{"version":3,"sources":["components/reusable/Spinner.tsx","components/reusable/OverlayLoader/OverlayLoader.tsx","contexts/main-loader.tsx","components/modal/ModalContext.tsx","components/modal/Modal.tsx","database/index.tsx","database/items.tsx","database/base.tsx","components/reusable/Tags/Tag.tsx","components/List.tsx","components/reusable/Tags/Tags.tsx","App.tsx","index.tsx"],"names":["spinning","version","viewBox","width","height","fill","opacity","d","attributeName","type","from","to","dur","repeatCount","Spinner","Box","align","justify","WhiteOverlayBox","styled","OverlayLoader","props","Stack","anchor","id","className","children","show","pad","round","OverlayLoaderContext","createContext","ModalContext","Modal","toggleModal","showModal","createElement","Button","primary","icon","Close","onClick","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","analytics","db","database","itemsDB","ref","child","this","dbName","once","then","snapshot","data","exists","val","undefined","tags","Set","filter","el","_db","update","_items","res","newEntry","push","Date","set","key","renderTag","onRemove","background","direction","top","bottom","left","right","gap","margin","Text","size","weight","color","FormClose","style","Tag","FilledSwipable","Swipeable","withRouter","history","useState","items","setItems","useEffect","getAll","Object","entries","map","item","catch","error","console","columns","property","header","render","entry","wrap","tag","index","createNew","onSwipedDown","DataTable","values","i","onClickRow","datum","log","Add","theme","calendar","medium","daySize","createBrowserHistory","App","loadOverlay","setLoadOverlay","Grommet","Provider","value","exact","path","component","List","ReactDom","document","getElementById"],"mappings":"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","file":"static/js/main.2bed5909.chunk.js","sourcesContent":["import { Box } from \"grommet\";\nimport React from \"react\";\n\nconst spinning = (\n  <svg\n    version=\"1.1\"\n    viewBox=\"0 0 32 32\"\n    width=\"28px\"\n    height=\"28px\"\n    fill=\"#7D4CDB\"\n  >\n    <path\n      opacity=\".25\"\n      d=\"M16 0 A16 16 0 0 0 16 32 A16 16 0 0 0 16 0 M16 4 A12 12 0 0 1 16 28 A12 12 0 0 1 16 4\"\n    />\n    <path d=\"M16 0 A16 16 0 0 1 32 16 L28 16 A12 12 0 0 0 16 4z\">\n      <animateTransform\n        attributeName=\"transform\"\n        type=\"rotate\"\n        from=\"0 16 16\"\n        to=\"360 16 16\"\n        dur=\"0.8s\"\n        repeatCount=\"indefinite\"\n      />\n    </path>\n  </svg>\n);\n\nexport const Spinner = () => (\n  <Box align=\"center\" justify=\"center\">\n    {spinning}\n  </Box>\n);\n\nexport default Spinner;\n","import { Box, Stack } from \"grommet\";\nimport React from \"react\";\nimport styled from 'styled-components';\nimport './OverlayLoader.scss';\nimport Spinner from \"../Spinner\";\n\nconst WhiteOverlayBox = styled(Box)`\nbackground-color: rgba(255, 255, 255, .6);\n`;\n\nconst OverlayLoader = (props) => (\n  <Stack anchor=\"center\" fill={true} id=\"overlay-stack\" className=\"overflow-container\">\n    {props.children}\n    {props.show && <WhiteOverlayBox pad=\"medium\" round=\"medium\">\n      <Spinner />\n    </WhiteOverlayBox>\n    }\n  </Stack>\n);\n\nexport default OverlayLoader;\n","import { createContext, SetStateAction, Dispatch, Context } from \"react\";\n\ninterface IOverlayLoaderContext {\n  loadOverlay?: boolean;\n  setLoadOverlay?: Dispatch<SetStateAction<boolean>>;\n}\n\n\nconst OverlayLoaderContext: Context<IOverlayLoaderContext> = createContext({});\nexport default OverlayLoaderContext;\n\n","import { createContext, SetStateAction, Dispatch, Context } from \"react\";\n\ninterface IModalContext {\n  showModal?: boolean;\n  toggleModal?: Dispatch<SetStateAction<boolean>>;\n}\n\n\nconst ModalContext: Context<IModalContext> = createContext({});\nexport default ModalContext;\n\n\n","\nimport React, { createElement } from 'react';\nimport { Close } from 'grommet-icons';\nimport { Button } from 'grommet';\nconst Modal = ({ toggleModal, showModal }) => {\n  return (\n    <>\n      {showModal && (\n        <>\n          {createElement(showModal)}\n          <Button className=\"close-button\" primary icon={<Close />} onClick={() => toggleModal(false)} />\n        </>)}\n    </>\n  );\n}\nexport default Modal;\n","import { database, initializeApp, analytics } from 'firebase';\n\nvar firebaseConfig = {\n  apiKey: \"AIzaSyDj00a0U6ld-u8Pne_BsT9qJfAUb3IW3Y4\",\n  authDomain: \"okay-2be48.firebaseapp.com\",\n  databaseURL: \"https://okay-2be48.firebaseio.com\",\n  projectId: \"okay-2be48\",\n  storageBucket: \"okay-2be48.appspot.com\",\n  messagingSenderId: \"481288243512\",\n  appId: \"1:481288243512:web:4649a66235f19d7f6d19cd\",\n  measurementId: \"G-EERCZ4N2XZ\"\n};\n\ninitializeApp(firebaseConfig);\nanalytics();\n\nexport const db = database();\n\n\n","import { db } from '.';\nimport { BaseDB, IBaseDB } from './base';\nimport { IItem } from '../models/items';\n\nexport interface IItemsDB extends IBaseDB<IItem> {\n\n}\n\nconst ITEMS = 'items';\nclass ItemsDB extends BaseDB<IItem> implements IItemsDB {\n  constructor() {\n    super(ITEMS);\n  }\n\n  public get(id: string): Promise<any> {\n    return db.ref().child(this.dbName + '/' + id).once('value')\n      .then(snapshot => {\n        const data = snapshot && snapshot.exists() ? snapshot.val() : undefined;\n\n        return data && { ...data, tags: new Set(data.tags) };\n      });\n  }\n\n  public update(id: string, data: IItem): Promise<any> {\n    data.tags = data.tags ? [...data.tags].filter(el => el) : undefined;\n\n    return this._db.update({\n      [id]: data\n    });\n  }\n}\n\nexport const itemsDB = new ItemsDB();\n","import { db } from './index';\n\nexport interface IBaseDB<T> {\n  getAll(): Promise<T[]>;\n  add(data: T): void;\n  update(id: string, data: T): void;\n}\n\nexport interface IBaseModel {\n  dateCreated?: Date;\n  dateModified?: Date;\n}\n\nexport class BaseDB<T> implements IBaseDB<T> {\n  protected _db: firebase.database.Reference;\n  protected _items: T[] = [];\n\n  constructor(protected dbName: string) {\n    this._db = db.ref().child(dbName);\n  }\n\n  public getAll(): Promise<T[]> {\n    return this._db.once('value', res => {\n      this._items = res.val();\n    }).then(res => this._items);\n\n  }\n\n  public get(id: string): Promise<any> {\n    return db.ref().child(this.dbName + '/' + id).once('value')\n      .then(snapshot => snapshot && snapshot.exists() ? snapshot.val() : undefined);\n  }\n\n  public add(data: T): Promise<any> {\n    const newEntry = this._db.push();\n\n    // TODO: SK: Revisit bracket notation;\n    data['dateCreated'] = new Date();\n\n    return newEntry.set(data)\n      .then(() => newEntry.key);\n  }\n\n  public update(id: string, data: T): Promise<any> {\n    return this._db.update({\n      [id]: data\n    });\n  }\n}\n","import React from \"react\";\n\nimport { Box, Button, Text } from \"grommet\";\n\nimport { FormClose } from \"grommet-icons\";\n\nconst renderTag = (children, onRemove?) => (\n  <Box\n    background=\"status-warning\"\n    direction=\"row\"\n    align=\"center\"\n    round=\"xsmall\"\n    pad={{\n      top: 'small',\n      bottom: 'small',\n      left: 'medium',\n      right: 'medium'\n    }}\n    gap=\"small\"\n    margin=\"small\"\n  >\n    <Text size=\"small\" weight=\"bold\"># {children}</Text>\n    {onRemove && (\n      <Box background={{ color: \"white\", opacity: \"strong\" }} round=\"full\">\n        <FormClose color='brand' style={{ width: \"12px\", height: \"12px\" }} />\n      </Box>\n    )}\n  </Box>\n);\n\nconst Tag = ({ children, onRemove, ...rest }) =>\n  onRemove ? (\n    <Button onClick={onRemove}>{renderTag(children, onRemove)}</Button>\n  ) : (\n      renderTag(children, onRemove)\n    );\n\nexport default Tag;\n","import React, { useState } from 'react';\nimport { itemsDB } from '../database/items';\nimport { IItem } from '../models/items';\nimport { DataTable, Text, Box, Button } from 'grommet';\nimport { useEffect } from 'react';\nimport { renderTags } from './reusable/Tags/Tags';\nimport { Add } from 'grommet-icons';\nimport { withRouter } from 'react-router-dom';\nimport { Swipeable } from 'react-swipeable';\nimport styled from 'styled-components';\n\nconst FilledSwipable = styled(Swipeable)`\n  flex: 1 2 auto;\n  flex-direction: column;\n  justify-content: space-between;\n  display: flex;\n`;\n\nconst List = ({ history }) => {\n  const [items, setItems] = useState([] as IItem[]);\n\n\n  useEffect(() => {\n    itemsDB.getAll()\n      .then(items => setItems(\n        Object.entries(items).map(([id, item]) => ({ ...item, id }))\n      )).catch(error => console.error(error));\n\n  }, [])\n\n  const columns = [\n    {\n      property: 'name',\n      primary: true,\n      header: (\n        <Text>Name</Text>\n      ),\n    },\n    {\n      property: 'tags',\n      primary: true,\n      header: (\n        <Text>Tags</Text>\n      ),\n      render: entry => renderTags(entry.tags)\n    },\n    {\n      property: 'quantity',\n      header: (\n        <Text>#</Text>\n      ),\n    }\n  ];\n\n  const createNew = () => {\n    history.push('/items/new')\n  }\n\n\n\n\n  const onClickRow = ({ datum }) => {\n    console.log(datum, history);\n    history.push(`/item/${datum.id}`);\n  };\n\n  return (\n\n    <Box justify=\"between\" direction=\"column\" align=\"center\" fill={true} id=\"list\">\n      <FilledSwipable onSwipedDown={createNew} >\n        <DataTable columns={columns} data={Object.values(items).map((item, i) => ({ ...item, index: i }))} onClickRow={onClickRow} />\n\n        <Box direction=\"row\" justify=\"center\" pad=\"medium\">\n          <Button primary icon={<Add />} onClick={createNew} />\n        </Box>\n      </FilledSwipable>\n    </Box>\n\n\n  );\n};\n\nexport default withRouter(List);\n","import React, { useState } from \"react\";\n\nimport { Box, TextInput } from \"grommet\";\n\nimport Tag from \"./Tag\";\nimport { useEffect } from 'react';\n\nexport const renderTags = (tags, onRemove?) => {\n  return (\n    <Box align=\"center\" direction=\"row\" wrap={true} pad={{ left: \"xsmall\" }}>\n      {tags && tags.map((tag, index) => (\n        <Tag key={tag} onRemove={onRemove ? () => onRemove(index) : undefined}>\n          {tag}\n        </Tag>\n      ))}\n    </Box>\n  );\n};\n\nconst Tags = ({ suggestions, value, onRemove, onSelect, }) => {\n  const [values, setValues] = useState([...value]);\n  const [search, setSearch] = useState('');\n\n  useEffect(() => {\n    setValues([...value]);\n  }, [value])\n\n  return (\n\n    <TextInput\n      placeholder=\"Select tags\"\n      type=\"search\"\n      value={search}\n      onChange={({ target: { value: searchValue } }) => setSearch(searchValue)}\n      onSelect={({ suggestion }) => {\n        setSearch('');\n        onSelect(suggestion);\n      }\n      }\n      suggestions={suggestions.filter(\n        suggestion =>\n          suggestion.toLowerCase().indexOf(search.toLowerCase()) >= 0\n      )}\n    />\n  );\n}\n\nexport default Tags;\n","\nimport { Grommet, Stack } from 'grommet';\nimport React, { useState } from 'react';\nimport { Route, Router } from 'react-router-dom';\nimport './App.scss';\nimport OverlayLoader from './components/reusable/OverlayLoader/OverlayLoader';\nimport OverlayLoaderContext from './contexts/main-loader';\nimport ModalContext from './components/modal/ModalContext';\nimport Modal from './components/modal/Modal';\n// import List from './components/List/List';\nimport { createBrowserHistory } from 'history';\nimport List from './components/List';\n// import Item from './components/Item/Item';\n// import EditItem from './components/Item/EditItem/EditItem';\n\nconst theme = {\n  calendar: {\n    medium: {\n      daySize: 'calc(100vw/8)'\n    }\n  }\n};\n\n\nconst history = createBrowserHistory();\n\nconst App = () => {\n\n  const [loadOverlay, setLoadOverlay] = useState(false);\n  const [showModal, toggleModal] = useState(false);\n\n  return (\n    <Grommet theme={theme}>\n      <ModalContext.Provider value={{ showModal, toggleModal }}>\n\n        <OverlayLoaderContext.Provider value={{ loadOverlay, setLoadOverlay }}>\n          <OverlayLoader show={loadOverlay}>\n            <Stack fill={true} className=\"overflow-container\" id=\"initial-stack\">\n              <Router history={history}>\n\n\n\n\n                {/* <Route path=\"/item/:id/edit\" component={EditItem} /> */}\n                {/* <Route path=\"/item/:id\" component={Item} /> */}\n                {/* <Route exact path=\"/items/new\" component={EditItem} /> */}\n\n                <Route exact path=\"/\" component={List} />\n\n              </Router>\n              {/* <Box align=\"end\" justify=\"end\">\n            <NavButtons />\n          </Box> */}\n            </Stack>\n          </OverlayLoader>\n        </OverlayLoaderContext.Provider>\n\n        <Modal showModal={showModal} toggleModal={toggleModal} />\n\n      </ModalContext.Provider>\n    </Grommet>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDom from 'react-dom';\nimport App from './App';\nimport './styles/index.scss';\n\nReactDom.render(\n  <App></App>\n  , document.getElementById('root'));\n"],"sourceRoot":""}