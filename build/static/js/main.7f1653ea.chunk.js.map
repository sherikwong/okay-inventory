{
  "version": 3,
  "sources": [
    "components/reusable/Spinner.tsx",
    "components/reusable/OverlayLoader/OverlayLoader.tsx",
    "contexts/main-loader.tsx",
    "components/modal/ModalContext.tsx",
    "components/modal/Modal.tsx",
    "database/index.tsx",
    "database/base.tsx",
    "database/items.tsx",
    "components/List.tsx",
    "database/tags.tsx",
    "components/reusable/SpinnerButton/SpinnerButton.tsx",
    "components/reusable/Tags/Tag.tsx",
    "components/reusable/Tags/Tags.tsx",
    "components/item/EditItem/EditTags.tsx",
    "components/item/EditItem/Name.tsx",
    "components/item/Item.styles.tsx",
    "components/item/Item.tsx",
    "components/item/EditItem/Date.tsx",
    "components/item/Router.tsx",
    "App.tsx",
    "index.tsx"
  ],
  "names": [
    "spinning",
    "version",
    "viewBox",
    "width",
    "height",
    "fill",
    "opacity",
    "d",
    "attributeName",
    "type",
    "from",
    "to",
    "dur",
    "repeatCount",
    "Spinner",
    "Box",
    "align",
    "justify",
    "WhiteOverlayBox",
    "styled",
    "OverlayLoader",
    "props",
    "Stack",
    "anchor",
    "id",
    "className",
    "children",
    "show",
    "pad",
    "round",
    "OverlayLoaderContext",
    "createContext",
    "ModalContext",
    "Modal",
    "toggleModal",
    "showModal",
    "createElement",
    "Button",
    "primary",
    "icon",
    "Close",
    "onClick",
    "initializeApp",
    "apiKey",
    "authDomain",
    "databaseURL",
    "projectId",
    "storageBucket",
    "messagingSenderId",
    "appId",
    "measurementId",
    "analytics",
    "db",
    "database",
    "BaseDB",
    "dbName",
    "_db",
    "items",
    "g",
    "this",
    "ref",
    "child",
    "once",
    "res",
    "val",
    "then",
    "snapshot",
    "exists",
    "undefined",
    "data",
    "newEntry",
    "push",
    "key",
    "Date",
    "set",
    "update",
    "console",
    "log",
    "itemsDB",
    "FilledSwipable",
    "Swipeable",
    "withRouter",
    "history",
    "useState",
    "setItems",
    "columns",
    "property",
    "header",
    "Text",
    "render",
    "entry",
    "useEffect",
    "getAll",
    "Object",
    "entries",
    "map",
    "item",
    "catch",
    "error",
    "createNew",
    "direction",
    "onSwipedDown",
    "DataTable",
    "values",
    "i",
    "index",
    "onClickRow",
    "datum",
    "Add",
    "tagsDB",
    "SpinnerButton",
    "loading",
    "setLoading",
    "Next",
    "React",
    "renderTag",
    "onRemove",
    "background",
    "top",
    "bottom",
    "left",
    "right",
    "gap",
    "margin",
    "size",
    "weight",
    "color",
    "FormClose",
    "style",
    "Tag",
    "getAllTags",
    "setAllTags",
    "newMap",
    "Map",
    "forEach",
    "details",
    "Tags",
    "tags",
    "queriedTags",
    "setQueriedTags",
    "allTags",
    "retrievedTags",
    "get",
    "wrap",
    "length",
    "tag",
    "name",
    "WhiteBgTextInput",
    "TextInput",
    "CenteredBox",
    "match",
    "state",
    "location",
    "params",
    "Set",
    "setTags",
    "search",
    "setSearch",
    "onCustomTag",
    "add",
    "newTag",
    "updateDBTags",
    "withRemoved",
    "delete",
    "Keyboard",
    "onEnter",
    "value",
    "suggestions",
    "filter",
    "has",
    "label",
    "onSelect",
    "$event",
    "suggestion",
    "safeTags",
    "onChange",
    "searchValue",
    "target",
    "onUpdate",
    "setName",
    "ContrastingText",
    "span",
    "Number",
    "Header",
    "ContrastingButton",
    "HugeArrowButtons",
    "SizedUnsplash",
    "div",
    "Unsplash",
    "BlackOverlay",
    "quantity",
    "setQty",
    "alterQty",
    "num",
    "updatedNum",
    "onSwipedUp",
    "secondary",
    "Up",
    "toUpperCase",
    "date",
    "toLocaleDateString",
    "Down",
    "WhiteBgBox",
    "setDate",
    "selectedDays",
    "onDayClick",
    "clickedDate",
    "createBrowserHistory",
    "setDetails",
    "keywords",
    "split",
    "join",
    "window",
    "screen",
    "backgroundPosition",
    "Menu",
    "Edit",
    "path",
    "exact",
    "theme",
    "calendar",
    "medium",
    "daySize",
    "App",
    "loadOverlay",
    "setLoadOverlay",
    "Grommet",
    "Provider",
    "component",
    "ItemRouter",
    "List",
    "ReactDom",
    "document",
    "getElementById"
  ],
  "mappings": "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",
  "file": "static/js/main.7f1653ea.chunk.js",
  "sourcesContent": [
    "import { Box } from \"grommet\";\nimport React from \"react\";\n\nconst spinning = (\n  <svg\n    version=\"1.1\"\n    viewBox=\"0 0 32 32\"\n    width=\"28px\"\n    height=\"28px\"\n    fill=\"#7D4CDB\"\n  >\n    <path\n      opacity=\".25\"\n      d=\"M16 0 A16 16 0 0 0 16 32 A16 16 0 0 0 16 0 M16 4 A12 12 0 0 1 16 28 A12 12 0 0 1 16 4\"\n    />\n    <path d=\"M16 0 A16 16 0 0 1 32 16 L28 16 A12 12 0 0 0 16 4z\">\n      <animateTransform\n        attributeName=\"transform\"\n        type=\"rotate\"\n        from=\"0 16 16\"\n        to=\"360 16 16\"\n        dur=\"0.8s\"\n        repeatCount=\"indefinite\"\n      />\n    </path>\n  </svg>\n);\n\nexport const Spinner = () => (\n  <Box align=\"center\" justify=\"center\">\n    {spinning}\n  </Box>\n);\n\nexport default Spinner;\n",
    "import { Box, Stack } from \"grommet\";\nimport React from \"react\";\nimport styled from 'styled-components';\nimport './OverlayLoader.scss';\nimport Spinner from \"../Spinner\";\n\nconst WhiteOverlayBox = styled(Box)`\nbackground-color: rgba(255, 255, 255, .6);\n`;\n\nconst OverlayLoader = (props) => (\n  <Stack anchor=\"center\" fill={true} id=\"overlay-stack\" className=\"overflow-container\">\n    {props.children}\n    {props.show && <WhiteOverlayBox pad=\"medium\" round=\"medium\">\n      <Spinner />\n    </WhiteOverlayBox>\n    }\n  </Stack>\n);\n\nexport default OverlayLoader;\n",
    "import { createContext, SetStateAction, Dispatch, Context } from \"react\";\n\ninterface IOverlayLoaderContext {\n  loadOverlay?: boolean;\n  setLoadOverlay?: Dispatch<SetStateAction<boolean>>;\n}\n\n\nconst OverlayLoaderContext: Context<IOverlayLoaderContext> = createContext({});\nexport default OverlayLoaderContext;\n\n",
    "import { createContext, SetStateAction, Dispatch, Context } from \"react\";\n\ninterface IModalContext {\n  showModal?: boolean;\n  toggleModal?: Dispatch<SetStateAction<boolean>>;\n}\n\n\nconst ModalContext: Context<IModalContext> = createContext({});\nexport default ModalContext;\n\n\n",
    "\nimport React, { createElement } from 'react';\nimport { Close } from 'grommet-icons';\nimport { Button } from 'grommet';\nconst Modal = ({ toggleModal, showModal }) => {\n  return (\n    <>\n      {showModal && (\n        <>\n          {createElement(showModal)}\n          <Button className=\"close-button\" primary icon={<Close />} onClick={() => toggleModal(false)} />\n        </>)}\n    </>\n  );\n}\nexport default Modal;\n",
    "import { database, initializeApp, analytics } from 'firebase';\n\nvar firebaseConfig = {\n  apiKey: \"AIzaSyDj00a0U6ld-u8Pne_BsT9qJfAUb3IW3Y4\",\n  authDomain: \"okay-2be48.firebaseapp.com\",\n  databaseURL: \"https://okay-2be48.firebaseio.com\",\n  projectId: \"okay-2be48\",\n  storageBucket: \"okay-2be48.appspot.com\",\n  messagingSenderId: \"481288243512\",\n  appId: \"1:481288243512:web:4649a66235f19d7f6d19cd\",\n  measurementId: \"G-EERCZ4N2XZ\"\n};\n\ninitializeApp(firebaseConfig);\nanalytics();\n\nexport const db = database();\n\n\n",
    "import { db } from '.';\n\nexport interface IBaseDB<T> {\n  getAll(): Promise<T[]>;\n  add(data: T): void;\n  update(id: string, data: T): void;\n}\n\nexport interface IBaseModel {\n  dateCreated?: Date;\n  dateModified?: Date;\n  id: string;\n}\n\nexport class BaseDB<T> implements IBaseDB<T> {\n  protected _db: firebase.database.Reference;\n  protected items: T[] = [];\n\n  constructor(protected dbName: string) {\n    this._db = db.ref().child(dbName);\n  }\n\n  public getAll(): Promise<T[]> {\n    return this._db.once('value', res => {\n      this.items = res.val();\n    }).then(res => this.items);\n\n  }\n  g\n  public get(id: string): Promise<any> {\n    return db.ref().child(this.dbName + '/' + id).once('value')\n      .then(snapshot => snapshot && snapshot.exists() ? snapshot.val() : undefined);\n  }\n\n  public add(data: Partial<T>): Promise<any> {\n    const newEntry = this._db.push();\n\n    // TODO: SK: Revisit bracket notation;\n    data['id'] = newEntry.key;\n    data['dateCreated'] = new Date();\n\n    return newEntry.set(data)\n      .then(res => {\n        return data;\n      });\n  }\n\n  public update(id: string, data: Partial<T>): Promise<any> {\n    return db.ref().child(this.dbName + '/' + id).update(data)\n      .then(() => {\n        console.log(`Success updating ${id}`);\n      });\n  }\n\n\n}\n",
    "/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n\nimport { db } from '.';\nimport { BaseDB, IBaseDB } from './base';\nimport { IItem } from '../models/items';\n\nexport interface IItemsDB extends IBaseDB<IItem> {\n\n}\n\nconst ITEMS = 'items';\nclass ItemsDB extends BaseDB<IItem> implements IItemsDB {\n  constructor() {\n    super(ITEMS);\n  }\n\n}\n\nexport const itemsDB = new ItemsDB();\n",
    "import React, { useState } from 'react';\nimport { itemsDB } from '../database/items';\nimport { IItem } from '../models/items';\nimport { DataTable, Text, Box, Button } from 'grommet';\nimport { useEffect } from 'react';\nimport { Add } from 'grommet-icons';\nimport { withRouter } from 'react-router-dom';\nimport { Swipeable } from 'react-swipeable';\nimport styled from 'styled-components';\n\nconst FilledSwipable = styled(Swipeable)`\n  flex: 1 2 auto;\n  flex-direction: column;\n  justify-content: space-between;\n  display: flex;\n`;\n\nconst List = ({ history }) => {\n  const [items, setItems] = useState([] as IItem[]);\n\n  // let columns;\n\n  // useEffect(() => {\n  let columns = [\n    // columns = [\n    {\n      property: 'name',\n      primary: true,\n      header: (\n        <Text>Name</Text>\n      ),\n    },\n    {\n      property: 'tags',\n      primary: true,\n      header: (\n        <Text>Tags</Text>\n      ),\n      render: entry => undefined\n    },\n    {\n      property: 'quantity',\n      header: (\n        <Text>#</Text>\n      ),\n    }\n  ];\n  // }, [items])\n\n\n  useEffect(() => {\n    itemsDB.getAll()\n      .then(items => setItems(\n        Object.entries(items).map(([id, item]) => ({ ...item, id }))\n      )).catch(error => console.error(error));\n\n\n\n  }, [])\n\n  const createNew = () => {\n    history.push('/items/new')\n  }\n\n\n  const onClickRow = ({ datum }) => {\n    // console.log(datum, history);\n    history.push(`/item/${datum.id}`);\n  };\n\n  return (\n\n    <Box justify=\"between\" direction=\"column\" align=\"center\" fill={true} id=\"list\">\n      <FilledSwipable onSwipedDown={createNew} >\n        <DataTable columns={columns} data={Object.values(items).map((item, i) => ({ ...item, index: i }))} onClickRow={onClickRow} />\n\n        <Box direction=\"row\" justify=\"center\" pad=\"medium\">\n          <Button primary icon={<Add />} onClick={createNew} />\n        </Box>\n      </FilledSwipable>\n    </Box>\n\n\n  );\n};\n\nexport default withRouter(List);\n",
    "import { BaseDB, IBaseDB, IBaseModel } from './base';\nexport const TAGS = 'tags';\n\nexport interface ITag extends IBaseModel {\n  name: string;\n  children?: ITag[];\n}\ninterface ITagsDB extends IBaseDB<ITag> {\n\n}\n\nclass TagsDB extends BaseDB<ITag> implements ITagsDB {\n  constructor() {\n    super(TAGS);\n  }\n\n\n}\n\nexport const tagsDB = new TagsDB();\n",
    "/* eslint-disable @typescript-eslint/no-unused-vars */\nimport { Button } from 'grommet';\nimport React, { useState, useEffect } from 'react';\nimport Spinner from '../Spinner';\nimport { Next } from 'grommet-icons';\nimport styled from 'styled-components';\n// import { ContrastingButton } from '../../item/Item.styles';\n\nconst SpinnerButton = ({ onClick, loading, setLoading, icon = Next }) => {\n  const innerButton = (<>\n    {loading && <Spinner />}\n    {!loading && React.createElement(icon)}\n  </>);\n\n  const _onClick = () => {\n    setLoading(true);\n    onClick();\n  }\n\n  return (\n    <></>\n    // <ContrastingButton secondary onClick={_onClick} children={innerButton} />\n  );\n};\n\nexport default SpinnerButton;\n",
    "import React from \"react\";\n\nimport { Box, Button, Text } from \"grommet\";\n\nimport { FormClose } from \"grommet-icons\";\n\nconst renderTag = (children, onRemove?) => (\n  <Box\n    background=\"status-warning\"\n    direction=\"row\"\n    align=\"center\"\n    round=\"xsmall\"\n    pad={{\n      top: 'small',\n      bottom: 'small',\n      left: 'medium',\n      right: 'medium'\n    }}\n    gap=\"small\"\n    margin=\"small\"\n  >\n    <Text size=\"small\" weight=\"bold\"># {children}</Text>\n    {onRemove && (\n      <Box\n        onClick={onRemove}\n        background={{ color: \"white\", opacity: \"strong\" }} round=\"full\">\n        <FormClose color='brand' style={{ width: \"12px\", height: \"12px\" }} />\n      </Box>\n    )}\n  </Box>\n);\n\nconst Tag = ({ children, onRemove, ...rest }) =>\n  onRemove ? (\n    <Button onClick={onRemove}>{renderTag(children, onRemove)}</Button>\n  ) : (\n      renderTag(children, onRemove)\n    );\n\nexport default Tag;\n",
    "/* eslint-disable @typescript-eslint/no-unused-vars */\nimport { Box } from \"grommet\";\nimport React, { useEffect, useState } from \"react\";\nimport { ITag, tagsDB } from '../../../database/tags';\nimport Tag from \"./Tag\";\n\nexport const getAllTags = setAllTags => () => {\n  tagsDB.getAll().then(res => {\n    const newMap = new Map([]);\n\n    Object.values(res).forEach(details => {\n      newMap.set(details.id, details);\n    });\n    setAllTags(newMap);\n  });\n}\n\nconst Tags = props => {\n  const { tags, onRemove } = props;\n  const [queriedTags, setQueriedTags] = useState([] as ITag[]);\n  const [allTags, setAllTags] = useState(new Map([]));\n\n  useEffect(getAllTags(setAllTags), [tags]);\n\n  useEffect(() => {\n  }, [allTags]);\n\n  useEffect(() => {\n    const retrievedTags = [...tags].map(id => {\n      const entry = (allTags).get(id);\n      return entry;\n    });\n\n    setQueriedTags(retrievedTags as any);\n  }, [tags]);\n\n  return (\n    <Box align=\"center\" direction=\"row\" wrap={true} pad={{ left: \"xsmall\" }}>\n      {queriedTags && queriedTags.length && queriedTags.map((tag, i) => {\n\n        return tag ? (\n          <Tag key={tag.id} onRemove={onRemove ? () =>\n            onRemove(tag) : undefined}>\n            {tag.name}\n          </Tag>)\n          : <div key={i} />\n      })}\n    </Box>\n  );\n};\n\nexport default Tags;\n",
    "/* eslint-disable @typescript-eslint/no-unused-vars */\n\nimport { withRouter } from \"react-router-dom\";\nimport React from 'react';\nimport { useState, useEffect } from 'react';\nimport { ITag, tagsDB } from \"../../../database/tags\";\nimport { TextInput, Box, Button, Keyboard, Stack } from 'grommet';\nimport styled from 'styled-components';\nimport SpinnerButton from '../../reusable/SpinnerButton/SpinnerButton';\nimport { Add } from 'grommet-icons'; import Tags from \"../../reusable/Tags/Tags\";\nimport { itemsDB } from '../../../database/items';\nimport { IItem } from '../../../models/items';\nimport { getAllTags } from '../../reusable/Tags/Tags';\n\nexport interface InputSuggestion {\n  value: string;\n  label: string;\n}\n\nexport const WhiteBgTextInput = styled(TextInput)`\nbackground-color: rgba(255, 255, 255, .5);\n`;\n\nconst CenteredBox = styled(Box)`\nposition: absolute;\ntop: 50%;\n`\n\nconst EditTags = props => {\n  const { match, details, location: { state }, history } = props;\n  const id = match.params.id;\n  const [tags, setTags] = useState(new Set([] as string[]));\n  const [isDictating, setDictating] = useState(false);\n  const [search, setSearch] = useState('');\n  const [allTags, setAllTags] = useState(new Map([]));\n  const [loading, setLoading] = useState(false);\n\n  useEffect(getAllTags(setAllTags), []);\n\n  useEffect(() => {\n    setTags(new Set(details ? details.tags : state.details.tags));\n  }, [details]);\n\n  const removeExistingTags = () => {\n    console.log(allTags);\n    return [...allTags.values()].filter(tag => {\n      return !tags.has((tag as ITag).id);\n    }).map(tag => ({\n      label: (tag as ITag).name,\n      value: (tag as ITag).id\n    }));\n  }\n\n  const onType = ({ target: { value: searchValue } }) => {\n    setSearch(searchValue);\n  }\n\n  const onCustomTag = () => {\n    tagsDB.add({\n      name: search\n    }).then((newTag: ITag) => {\n      tags.add(newTag.id);\n      allTags.set(newTag.id, newTag);\n      itemsDB.update(id, {\n        id,\n        tags: [...tags] as string[]\n      });\n\n\n    });\n  };\n\n  const onSelect = $event => {\n    const id = $event.suggestion.value;\n    // console.log('Selecting', id);\n\n    const safeTags = [...tags];\n    safeTags.push(id);\n    setTags(new Set(safeTags));\n\n    updateDBTags(safeTags);\n  }\n\n  const updateDBTags = tags => {\n    itemsDB.update(id, {\n      ...props.details,\n      tags: tags\n    });\n\n    // props.onUpdate();\n  }\n\n  const onRemove = (tag: ITag) => {\n    const withRemoved = new Set(tags);\n    withRemoved.delete(tag.id);\n    setTags(withRemoved);\n    updateDBTags([...withRemoved]);\n  }\n\n  const navToDate = () => {\n    history.push(`/item/${details.id}/edit/date`);\n  }\n\n  return (\n    <Box justify=\"start\" fill={true}>\n\n      <Box direction=\"row\">\n        <Tags tags={tags} onRemove={onRemove} />\n      </Box>\n\n      <Keyboard onEnter={onCustomTag}>\n        <CenteredBox fill=\"horizontal\" pad=\"large\">\n\n          <Box direction=\"row\">\n            <WhiteBgTextInput\n              value={search}\n              suggestions={removeExistingTags()}\n              onSelect={onSelect}\n              onChange={onType}\n            />\n\n            <Box direction=\"row\" align=\"center\" pad={{ left: 'large' }}>\n              {search && <Button icon={<Add />} onClick={onCustomTag} />}\n              <SpinnerButton onClick={navToDate} loading={loading} setLoading={setLoading} />\n            </Box>\n          </Box>\n        </CenteredBox>\n      </Keyboard>\n\n    </Box>\n  );\n}\n\nexport default withRouter(EditTags);\n",
    "import React, { useState, useEffect } from 'react';\nimport { Box, TextInput } from 'grommet';\nimport { WhiteBgTextInput } from './EditTags';\nimport SpinnerButton from '../../reusable/SpinnerButton/SpinnerButton';\nimport { itemsDB } from '../../../database/items';\nimport { withRouter } from 'react-router-dom';\n\nconst Name = props => {\n  const { details, onUpdate, history } = props;\n  const [name, setName] = useState('Name');\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    setName(details.name);\n  }, [details]);\n\n\n  const onType = $event => {\n    setName($event.target.value);\n  }\n\n  const onSubmit = () => {\n    itemsDB.update(details.id, {\n      ...details,\n      name\n    }).then(res => {\n      setLoading(false);\n    }).then(res => {\n      history.push(`/item/${details.id}/edit/tags`);\n    })\n\n  }\n\n  return (\n    <Box fill={true} justify=\"center\" pad=\"large\" direction=\"row\">\n      <WhiteBgTextInput\n        value={name}\n        onChange={onType} />\n      <Box pad={{ left: 'medium' }}>\n        <SpinnerButton onClick={onSubmit} loading={loading} setLoading={setLoading} />\n      </Box>\n    </Box>\n  )\n};\n\nexport default withRouter(Name);\n",
    "import styled from 'styled-components';\nimport { Button, Box } from 'grommet';\nimport Unsplash from 'react-unsplash-wrapper';\n\nexport const ContrastingText = styled.span`\nmix-blend-mode: difference;\nfont-weight: 700;\ncolor: white;\nfont-size: 30px;\n`;\n\nexport const Number = styled.span`\n  mix-blend-mode: difference;\n  font-weight: 700;\n  margin: 0 0 0 10px;\n  font-size: 200px;\n  line-height: 200px;\n  color: white;\n  // filter: drop-shadow(.05em .05em black);\n  text-align: center;\n`;\nexport const Header = styled.span`\n  mix-blend-mode: difference;\n  font-weight: 700;\n  margin: 0 0 0 10px;\n  font-size: 70px;\n  line-height: 70px;\n  color: white;\n  // filter: drop-shadow(.05em .05em black);\n  text-align: center;\n`;\n\nexport const ContrastingButton = styled(Button)`\npadding: 10px;\nborder-radius: 10px;\nsvg {\n  stroke: white;\n  mix-blend-mode: difference;\n}\n`;\n\nexport const HugeArrowButtons = styled(Button)`\nheight: 10vh;\nwidth: 10vh;\ndisplay: flex;\nalign-content: center;\n\nsvg {\n  stroke: white;\n  mix-blend-mode: difference;\n    height: 6vh;\n    width: 6vh;\n  }\n\n`;\n\nexport const QrCodeWrapper = styled.div`\n  height: 50px;\n  width: 50px;\n  padding: 4px;\n  border-radius: 2px;\n  background-color: rgba(255, 255, 255, .7);\n`;\nexport const DummyQRCode = styled.div`\n  height: 50px;\n  width: 50px;\n  padding: 4px;\n`;\n\n\n\nexport const SizedUnsplash = styled(Unsplash)`\n&, div {\n  height : 100vh;\n  width: 100vh;\n  }\n`;\n\nexport const BlackOverlay = styled(Box)`\nbackground-color: rgba(0, 0, 0, .5)\n`\n",
    "/* eslint-disable @typescript-eslint/no-unused-vars */\nimport React, { useEffect, useState } from 'react';\nimport { HugeArrowButtons, Header, QrCodeWrapper, DummyQRCode, ContrastingText } from './Item.styles';\nimport { Box } from 'grommet';\nimport { Down, Up } from 'grommet-icons';\nimport { QrCode } from 'qrcode.react';\nimport { withRouter } from 'react-router-dom';\nimport { Number } from './Item.styles';\nimport { itemsDB } from '../../database/items';\nimport Tags from '../reusable/Tags/Tags';\nimport { Swipeable } from 'react-swipeable';\n\n\nconst Item = (props) => {\n  const { details, onUpdate } = props;\n  const [quantity, setQty] = useState(0);\n\n  useEffect(() => {\n    setQty(details.quantity || 0)\n  }, [details]);\n\n  const alterQty = num => {\n    const updatedNum = quantity + num;\n    setQty(updatedNum);\n\n    itemsDB.update(details.id, {\n      ...details,\n      quantity: updatedNum\n    });\n  }\n\n  return (\n    <Swipeable onSwipedDown={() => alterQty(-1)} onSwipedUp={() => alterQty(1)}>\n      <Box direction=\"column\" fill={true} align=\"center\" justify=\"between\">\n\n        <HugeArrowButtons secondary size=\"large\" icon={<Up />} onClick={() => alterQty(1)} />\n\n        <Box align=\"center\">\n          <Number> {quantity}</Number>\n\n          <Header className=\"header-wrapper\">\n            {(details && details.name) ? details.name.toUpperCase() : ''}\n          </Header>\n\n\n          <ContrastingText> {details.date && new Date(details.date).toLocaleDateString(\"en-US\")}\n          </ContrastingText>\n          {/* <CalendarIcon date={details.date} /> */}\n\n          <Tags tags={details.tags} />\n        </Box>\n\n        <HugeArrowButtons secondary size=\"large\" icon={<Down />} onClick={() => alterQty(-1)} />\n\n      </Box>\n    </Swipeable>\n  );\n}\n\nexport default withRouter(Item);\n{/* <QrCodeWrapper>\n                        <QrCode bgColor=\"transparent\" value={id} size={50} />\n                      </QrCodeWrapper> */}\n",
    "import React from 'react';\nimport DayPicker from 'react-day-picker';\nimport 'react-day-picker/lib/style.css';\nimport { Box } from 'grommet';\nimport styled from 'styled-components';\nimport { withRouter } from 'react-router-dom';\nimport { itemsDB } from '../../../database/items';\nimport { useState } from 'react';\nimport { useEffect } from 'react';\n\nexport const WhiteBgBox = styled(Box)`\nbackground-color: rgba(255, 255, 255, .5);\n`;\n\nconst EditDate = props => {\n  const { details, history } = props;\n  const [date, setDate] = useState(new Date());\n\n  useEffect(() => {\n    setDate(details.date);\n  }, [details]);\n\n  const onChange = clickedDate => {\n    itemsDB.update(details.id, {\n      ...details,\n      date: clickedDate\n    });\n\n    history.push(`/item/${details.id}`);\n  }\n\n  return (\n    <WhiteBgBox>\n      <DayPicker selectedDays={[details.date]} onDayClick={onChange} />\n    </WhiteBgBox>\n  );\n\n}\n\nexport default withRouter(EditDate);\n",
    "/* eslint-disable @typescript-eslint/no-unused-vars */\n\nimport { Box, Stack } from 'grommet';\nimport { Menu, Edit } from 'grommet-icons';\nimport { createBrowserHistory } from 'history';\nimport React, { useEffect, useState } from 'react';\nimport { Route, Router, withRouter } from 'react-router-dom';\nimport { itemsDB } from '../../database/items';\nimport Name from './EditItem/Name';\nimport { BlackOverlay, ContrastingButton, SizedUnsplash } from './Item.styles';\nimport Item from './Item';\nimport './index.scss'\nimport EditTags from './EditItem/EditTags';\nimport EditDate from './EditItem/Date';\n\n\nexport const history = createBrowserHistory();\n\nconst ItemRouter = ({ match }) => {\n  const id = match.params.id;\n  const [qty, setQty] = useState(0);\n\n  const [details, setDetails] = useState({\n    name: '',\n    date: new Date(),\n    tags: [],\n  });\n\n\n  useEffect(() => {\n    if (id) {\n      get();\n    }\n  }, []);\n\n  const get = () => {\n    itemsDB.get(id).then(res => {\n      setDetails({ ...details, ...res });\n\n      setQty(res && res.quantity ? res.quantity : 0);\n    });\n  }\n\n  const navToEdit = () => {\n    history.push(`/item/${id}/edit/name`);\n  }\n\n  const keywords = details && details.name.split(' ').join(',') + ',food';\n  // console.log(keywords);\n\n  return (\n    <Stack fill={true} className=\"item-stack\" id=\"item\">\n\n      <SizedUnsplash\n        keywords={keywords}\n        width={window.screen.width} height={window.screen.height} style={{ backgroundPosition: 'center center' }} />\n\n      <BlackOverlay fill={true}></BlackOverlay>\n\n      <Box align=\"center\" fill={true} justify=\"between\">\n\n        <Box direction=\"row\" justify=\"between\" pad=\"medium\" fill=\"horizontal\">\n          <ContrastingButton secondary icon={<Menu />} onClick={() => history.push('/')} />\n          <ContrastingButton secondary icon={<Edit />} onClick={navToEdit} />\n        </Box>\n\n\n\n        <Box className=\"item-router-wrapper\" pad=\"large\">\n          <Router history={history}>\n\n            <Route path={`/item/:id/edit/tags`}>\n              <EditTags details={details} onUpdate={get} />\n            </Route>\n\n            <Route path={`/item/:id/edit/date`}>\n              <EditDate details={details} onUpdate={get} />\n            </Route>\n\n            <Route path={`/item/:id/edit/name`}>\n              <Name details={details} onUpdate={get} />\n            </Route>\n\n\n            <Route path={`/item/:id`} exact>\n              <Item details={details} />\n            </Route>\n\n\n\n          </Router>\n        </Box>\n\n\n      </Box>\n    </Stack>\n\n  );\n}\n\nexport default withRouter(ItemRouter);\n",
    "/* eslint-disable @typescript-eslint/no-unused-vars */\nimport { Grommet, Stack } from 'grommet';\nimport React, { useState } from 'react';\nimport { Route, Router } from 'react-router-dom';\nimport './App.scss';\nimport OverlayLoader from './components/reusable/OverlayLoader/OverlayLoader';\nimport OverlayLoaderContext from './contexts/main-loader';\nimport ModalContext from './components/modal/ModalContext';\nimport Modal from './components/modal/Modal';\n// import List from './components/List/List';\nimport { createBrowserHistory } from 'history';\nimport List from './components/List';\nimport ItemRouter from './components/item/Router';\n// import ItemRouter from './components/item/ItemRouter';\n\n// import Item from './components/Item';\n// import EditItem from './components/item/EditItem/EditItem';\n\nconst theme = {\n  calendar: {\n    medium: {\n      daySize: 'calc(100vw/8)'\n    }\n  }\n};\n\n\nconst history = createBrowserHistory();\n\nconst App = () => {\n\n  const [loadOverlay, setLoadOverlay] = useState(false);\n  const [showModal, toggleModal] = useState(false);\n\n  return (\n    <Grommet theme={theme}>\n      <ModalContext.Provider value={{ showModal, toggleModal }}>\n\n        <OverlayLoaderContext.Provider value={{ loadOverlay, setLoadOverlay }}>\n          <OverlayLoader show={loadOverlay}>\n            <Stack fill={true} className=\"overflow-container\" id=\"initial-stack\">\n              <Router history={history}>\n\n\n                {/* <Route path=\"/\" component={Tags} /> */}\n\n                {/* <Route path=\"/item/:id/edit\" component={EditItem} /> */}\n                <Route path=\"/item/:id\" component={ItemRouter} />\n                {/* <Route exact path=\"/items/new\" component={EditItem} /> */}\n\n                <Route exact path=\"/\" component={List} />\n\n              </Router>\n              {/* <Box align=\"end\" justify=\"end\">\n            <NavButtons />\n          </Box> */}\n            </Stack>\n          </OverlayLoader>\n        </OverlayLoaderContext.Provider>\n\n        <Modal showModal={showModal} toggleModal={toggleModal} />\n\n      </ModalContext.Provider>\n    </Grommet>\n  );\n};\n\nexport default App;\n",
    "import React from 'react';\nimport ReactDom from 'react-dom';\nimport App from './App';\nimport './styles/index.scss';\n\nReactDom.render(\n  <App></App>\n  , document.getElementById('root'));\n"
  ],
  "sourceRoot": ""
}
