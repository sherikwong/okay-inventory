function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React, { Component } from 'react';
import PropTypes from 'prop-types';
import { TickerDigit } from './TickerDigit.js';

var ReactNumberTicker = function (_Component) {
  _inherits(ReactNumberTicker, _Component);

  function ReactNumberTicker(props) {
    _classCallCheck(this, ReactNumberTicker);

    return _possibleConstructorReturn(this, _Component.call(this, props));
  }

  ReactNumberTicker.prototype.componentDidUpdate = function componentDidUpdate(prevProps, prevState, snapshot) {};

  ReactNumberTicker.prototype.render = function render() {
    var _this2 = this;

    var digits = this.props.value.map(function (number, index) {
      return React.createElement(TickerDigit, { key: index, value: number, delay: (_this2.props.length - index) * 50 });
    });

    return React.createElement(
      'div',
      { className: 'Ticker' },
      digits
    );
  };

  return ReactNumberTicker;
}(Component);

export { ReactNumberTicker as default };


ReactNumberTicker.propTypes = process.env.NODE_ENV !== "production" ? {
  value: PropTypes.arrayOf(PropTypes.number)
} : {};