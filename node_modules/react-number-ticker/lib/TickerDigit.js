'use strict';

exports.__esModule = true;
exports.TickerDigit = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

require('./TickerDigit.css');

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _reactSpring = require('react-spring');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var digits = [function (style) {
  return _react2.default.createElement(
    _reactSpring.animated.div,
    { className: 'tickerDigit 0', style: _extends({}, style) },
    '0'
  );
}, function (style) {
  return _react2.default.createElement(
    _reactSpring.animated.div,
    { className: 'tickerDigit 1', style: _extends({}, style) },
    '1'
  );
}, function (style) {
  return _react2.default.createElement(
    _reactSpring.animated.div,
    { className: 'tickerDigit 2', style: _extends({}, style) },
    '2'
  );
}, function (style) {
  return _react2.default.createElement(
    _reactSpring.animated.div,
    { className: 'tickerDigit 3', style: _extends({}, style) },
    '3'
  );
}, function (style) {
  return _react2.default.createElement(
    _reactSpring.animated.div,
    { className: 'tickerDigit 4', style: _extends({}, style) },
    '4'
  );
}, function (style) {
  return _react2.default.createElement(
    _reactSpring.animated.div,
    { className: 'tickerDigit 5', style: _extends({}, style) },
    '5'
  );
}, function (style) {
  return _react2.default.createElement(
    _reactSpring.animated.div,
    { className: 'tickerDigit 6', style: _extends({}, style) },
    '6'
  );
}, function (style) {
  return _react2.default.createElement(
    _reactSpring.animated.div,
    { className: 'tickerDigit 7', style: _extends({}, style) },
    '7'
  );
}, function (style) {
  return _react2.default.createElement(
    _reactSpring.animated.div,
    { className: 'tickerDigit 8', style: _extends({}, style) },
    '8'
  );
}, function (style) {
  return _react2.default.createElement(
    _reactSpring.animated.div,
    { className: 'tickerDigit 9', style: _extends({}, style) },
    '9'
  );
}];

var TickerDigit = function (_Component) {
  _inherits(TickerDigit, _Component);

  function TickerDigit(props) {
    _classCallCheck(this, TickerDigit);

    var _this = _possibleConstructorReturn(this, _Component.call(this, props));

    _this.state = {
      showCurr: true,
      value: _this.props.value
    };
    return _this;
  }

  TickerDigit.prototype.render = function render() {

    return _react2.default.createElement(
      'div',
      { className: 'tickerDigitWrapper' },
      _react2.default.createElement(
        _reactSpring.Transition,
        {
          native: true,
          from: { opacity: 0, transform: 'translate3d(0,-50%,-50px) rotateX(80deg)' },
          enter: { opacity: 1, transform: 'translate3d(0,0%,0%) rotateX(0)' },
          leave: { opacity: 0, transform: 'translate3d(0,50%,-50px) rotateX(-80deg)' } },
        digits[this.props.value]
      )
    );
  };

  return TickerDigit;
}(_react.Component);

exports.TickerDigit = TickerDigit;