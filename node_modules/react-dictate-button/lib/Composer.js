'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _memoizeOne = require('memoize-one');

var _memoizeOne2 = _interopRequireDefault(_memoizeOne);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _Context = require('./Context');

var _Context2 = _interopRequireDefault(_Context);

var _prefix = require('./prefix');

var _prefix2 = _interopRequireDefault(_prefix);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function abortable(recognition) {
  return !!recognition.abort;
}

function chainListener() {
  for (var _len = arguments.length, listeners = Array(_len), _key = 0; _key < _len; _key++) {
    listeners[_key] = arguments[_key];
  }

  return function () {
    var _this = this,
        _arguments = arguments;

    listeners.forEach(function (listener) {
      return listener.apply(_this, _arguments);
    });
  };
}

var Composer = function (_React$Component) {
  _inherits(Composer, _React$Component);

  function Composer(props) {
    _classCallCheck(this, Composer);

    var _this2 = _possibleConstructorReturn(this, (Composer.__proto__ || Object.getPrototypeOf(Composer)).call(this, props));

    _this2.createGrammarList = (0, _memoizeOne2.default)(function (speechGrammarList, grammar) {
      var grammarList = new speechGrammarList();

      grammar && grammarList.addFromString(grammar, 1);

      return grammarList;
    });

    _this2.createRecognition = (0, _memoizeOne2.default)(function (speechRecognition) {
      return speechRecognition && new speechRecognition();
    });

    _this2.handleAudioEnd = _this2.handleAudioEnd.bind(_this2);
    _this2.handleAudioStart = _this2.handleAudioStart.bind(_this2);
    _this2.handleEnd = _this2.handleEnd.bind(_this2);
    _this2.handleError = _this2.handleError.bind(_this2);
    _this2.handleRawEvent = _this2.handleRawEvent.bind(_this2);
    _this2.handleResult = _this2.handleResult.bind(_this2);
    _this2.handleStart = _this2.handleStart.bind(_this2);

    _this2.state = {
      readyState: 0,
      supported: !!props.speechRecognition
    };
    return _this2;
  }

  _createClass(Composer, [{
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      var recognition = this.recognition;

      var nextState = void 0;

      if (nextProps.speechRecognition !== this.props.speechRecognition) {
        if (recognition) {
          if (abortable(recognition)) {
            recognition.abort();
          } else {
            throw new Error('Cannot change "speechRecognition" prop while the current one is ongoing and is not abortable.');
          }
        }

        recognition = this.recognition = null;

        nextState = _extends({}, nextState, { supported: !!nextProps.speechRecognition });
      }

      if (nextProps.started !== this.props.started) {
        if (nextProps.started) {
          this.start(nextProps);

          nextState = _extends({}, nextState, { abortable: abortable(this.recognition) });
        } else {
          if (recognition) {
            if (abortable(recognition)) {
              recognition.abort();
            } else {
              throw new Error('Cannot stop recognition while the current one is ongoing and is not abortable.');
            }
          }
        }
      }

      nextState && this.setState(function () {
        return nextState;
      });
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      var recognition = this.recognition;


      if (recognition) {
        if (abortable(recognition)) {
          recognition.abort();
        } else {
          console.warn('react-dictate-button: Component is unmounted but recognition is still ongoing because it is not abortable.');
        }
      }
    }
  }, {
    key: 'handleAudioEnd',
    value: function handleAudioEnd() {
      this.setState(function () {
        return { readyState: 3 };
      });
    }
  }, {
    key: 'handleAudioStart',
    value: function handleAudioStart() {
      this.setState(function () {
        return { readyState: 2 };
      });

      // Web Speech API does not emit "result" when nothing is heard, and Chrome does not emit "nomatch" event.
      // Because we emitted onProgress, we should emit "dictate" if not error, so they works in pair.
      this.emitDictateOnEnd = true;
      this.props.onProgress && this.props.onProgress({ abortable: abortable(this.recognition) });
    }
  }, {
    key: 'handleEnd',
    value: function handleEnd() {
      this.recognition = null;

      if (this.emitDictateOnEnd) {
        this.props.onDictate && this.props.onDictate({});
      }

      this.setState(function () {
        return { readyState: 0 };
      });
    }
  }, {
    key: 'handleError',
    value: function handleError(event) {
      this.setState(function () {
        return _extends({
          readyState: 0
        }, event.error === 'not-allowed' && { supported: false });
      });

      // Error out, no need to emit "dictate"
      this.emitDictateOnEnd = false;
      this.recognition = null;
      this.props.onError && this.props.onError(event);
    }
  }, {
    key: 'handleRawEvent',
    value: function handleRawEvent(event) {
      this.props.onRawEvent && this.props.onRawEvent(event);
    }
  }, {
    key: 'handleResult',
    value: function handleResult(event) {
      var props = this.props;
      var rawResults = event.results;


      if (rawResults.length) {
        var results = [].map.call(rawResults, function (alts) {
          var firstAlt = alts[0];

          return {
            confidence: firstAlt.confidence,
            transcript: firstAlt.transcript
          };
        });

        var first = rawResults[0];

        if (first.isFinal) {
          this.emitDictateOnEnd = false;
          this.recognition = null;
          props.onDictate && props.onDictate({ result: results[0] });
        } else {
          props.onProgress && props.onProgress({ abortable: abortable(this.recognition), results: results });
        }
      }
    }
  }, {
    key: 'handleStart',
    value: function handleStart() {
      this.setState(function () {
        return { readyState: 1 };
      });
    }
  }, {
    key: 'start',
    value: function start(props) {
      if (this.recognition) {
        if (abortable(this.recognition)) {
          this.recognition.abort();
        } else {
          throw new Error('Cannot start a new recognition while the current one is ongoing and is not abortable.');
        }
      }

      if (!this.state.supported) {
        throw new Error('Speech recognition is not supported');
      }

      var recognition = this.recognition = this.createRecognition(props.speechRecognition);

      recognition.grammars = this.createGrammarList(props.speechGrammarList, props.grammar);
      recognition.lang = props.lang;
      recognition.interimResults = true;
      recognition.onaudioend = chainListener(this.handleAudioEnd, this.handleRawEvent);
      recognition.onaudiostart = chainListener(this.handleAudioStart, this.handleRawEvent);
      recognition.onend = chainListener(this.handleEnd, this.handleRawEvent);
      recognition.onerror = chainListener(this.handleError, this.handleRawEvent);
      recognition.onnomatch = this.handleRawEvent;
      recognition.onresult = chainListener(this.handleResult, this.handleRawEvent);
      recognition.onsoundend = this.handleRawEvent;
      recognition.onsoundstart = this.handleRawEvent;
      recognition.onspeechend = this.handleRawEvent;
      recognition.onspeechstart = this.handleRawEvent;
      recognition.onstart = chainListener(this.handleStart, this.handleRawEvent);

      props.extra && Object.keys(props.extra).forEach(function (key) {
        recognition[key] = props.extra[key];
      });

      recognition.start();
    }
  }, {
    key: 'render',
    value: function render() {
      var props = this.props,
          state = this.state;
      var children = props.children;


      return _react2.default.createElement(
        _Context2.default.Provider,
        { value: state },
        _react2.default.createElement(
          _Context2.default.Consumer,
          null,
          function (context) {
            return typeof children === 'function' ? children(context) : children;
          }
        )
      );
    }
  }]);

  return Composer;
}(_react2.default.Component);

exports.default = Composer;


Composer.defaultProps = {
  speechGrammarList: (0, _prefix2.default)('SpeechGrammarList'),
  speechRecognition: (0, _prefix2.default)('SpeechRecognition')
};

Composer.propTypes = {
  extra: _propTypes2.default.any,
  lang: _propTypes2.default.string,
  onDictate: _propTypes2.default.func,
  onError: _propTypes2.default.func,
  onProgress: _propTypes2.default.func,
  onRawEvent: _propTypes2.default.func,
  speechGrammarList: _propTypes2.default.any,
  speechRecognition: _propTypes2.default.any
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9Db21wb3Nlci5qcyJdLCJuYW1lcyI6WyJhYm9ydGFibGUiLCJyZWNvZ25pdGlvbiIsImFib3J0IiwiY2hhaW5MaXN0ZW5lciIsImxpc3RlbmVycyIsImZvckVhY2giLCJsaXN0ZW5lciIsImFwcGx5IiwiYXJndW1lbnRzIiwiQ29tcG9zZXIiLCJwcm9wcyIsImNyZWF0ZUdyYW1tYXJMaXN0Iiwic3BlZWNoR3JhbW1hckxpc3QiLCJncmFtbWFyIiwiZ3JhbW1hckxpc3QiLCJhZGRGcm9tU3RyaW5nIiwiY3JlYXRlUmVjb2duaXRpb24iLCJzcGVlY2hSZWNvZ25pdGlvbiIsImhhbmRsZUF1ZGlvRW5kIiwiYmluZCIsImhhbmRsZUF1ZGlvU3RhcnQiLCJoYW5kbGVFbmQiLCJoYW5kbGVFcnJvciIsImhhbmRsZVJhd0V2ZW50IiwiaGFuZGxlUmVzdWx0IiwiaGFuZGxlU3RhcnQiLCJzdGF0ZSIsInJlYWR5U3RhdGUiLCJzdXBwb3J0ZWQiLCJuZXh0UHJvcHMiLCJuZXh0U3RhdGUiLCJFcnJvciIsInN0YXJ0ZWQiLCJzdGFydCIsInNldFN0YXRlIiwiY29uc29sZSIsIndhcm4iLCJlbWl0RGljdGF0ZU9uRW5kIiwib25Qcm9ncmVzcyIsIm9uRGljdGF0ZSIsImV2ZW50IiwiZXJyb3IiLCJvbkVycm9yIiwib25SYXdFdmVudCIsInJhd1Jlc3VsdHMiLCJyZXN1bHRzIiwibGVuZ3RoIiwibWFwIiwiY2FsbCIsImZpcnN0QWx0IiwiYWx0cyIsImNvbmZpZGVuY2UiLCJ0cmFuc2NyaXB0IiwiZmlyc3QiLCJpc0ZpbmFsIiwicmVzdWx0IiwiZ3JhbW1hcnMiLCJsYW5nIiwiaW50ZXJpbVJlc3VsdHMiLCJvbmF1ZGlvZW5kIiwib25hdWRpb3N0YXJ0Iiwib25lbmQiLCJvbmVycm9yIiwib25ub21hdGNoIiwib25yZXN1bHQiLCJvbnNvdW5kZW5kIiwib25zb3VuZHN0YXJ0Iiwib25zcGVlY2hlbmQiLCJvbnNwZWVjaHN0YXJ0Iiwib25zdGFydCIsImV4dHJhIiwiT2JqZWN0Iiwia2V5cyIsImtleSIsImNoaWxkcmVuIiwiY29udGV4dCIsIlJlYWN0IiwiQ29tcG9uZW50IiwiZGVmYXVsdFByb3BzIiwicHJvcFR5cGVzIiwiUHJvcFR5cGVzIiwiYW55Iiwic3RyaW5nIiwiZnVuYyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUVBOzs7O0FBQ0E7Ozs7Ozs7Ozs7OztBQUVBLFNBQVNBLFNBQVQsQ0FBbUJDLFdBQW5CLEVBQWdDO0FBQzlCLFNBQU8sQ0FBQyxDQUFDQSxZQUFZQyxLQUFyQjtBQUNEOztBQUVELFNBQVNDLGFBQVQsR0FBcUM7QUFBQSxvQ0FBWEMsU0FBVztBQUFYQSxhQUFXO0FBQUE7O0FBQ25DLFNBQU8sWUFBWTtBQUFBO0FBQUE7O0FBQ2pCQSxjQUFVQyxPQUFWLENBQWtCO0FBQUEsYUFBWUMsU0FBU0MsS0FBVCxDQUFlLEtBQWYsRUFBcUJDLFVBQXJCLENBQVo7QUFBQSxLQUFsQjtBQUNELEdBRkQ7QUFHRDs7SUFFb0JDLFE7OztBQUNuQixvQkFBWUMsS0FBWixFQUFtQjtBQUFBOztBQUFBLHFIQUNYQSxLQURXOztBQUdqQixXQUFLQyxpQkFBTCxHQUF5QiwwQkFBUSxVQUFDQyxpQkFBRCxFQUFvQkMsT0FBcEIsRUFBZ0M7QUFDL0QsVUFBTUMsY0FBYyxJQUFJRixpQkFBSixFQUFwQjs7QUFFQUMsaUJBQVdDLFlBQVlDLGFBQVosQ0FBMEJGLE9BQTFCLEVBQW1DLENBQW5DLENBQVg7O0FBRUEsYUFBT0MsV0FBUDtBQUNELEtBTndCLENBQXpCOztBQVFBLFdBQUtFLGlCQUFMLEdBQXlCLDBCQUFRO0FBQUEsYUFBcUJDLHFCQUFxQixJQUFJQSxpQkFBSixFQUExQztBQUFBLEtBQVIsQ0FBekI7O0FBRUEsV0FBS0MsY0FBTCxHQUFzQixPQUFLQSxjQUFMLENBQW9CQyxJQUFwQixRQUF0QjtBQUNBLFdBQUtDLGdCQUFMLEdBQXdCLE9BQUtBLGdCQUFMLENBQXNCRCxJQUF0QixRQUF4QjtBQUNBLFdBQUtF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LFFBQWhFO0FBQUE7QUFESjtBQURGLE9BREY7QUFPRDs7OztFQWxNbUNFLGdCQUFNQyxTOztrQkFBdkJwRSxROzs7QUFxTXJCQSxTQUFTcUUsWUFBVCxHQUF3QjtBQUN0QmxFLHFCQUFtQixzQkFBTyxtQkFBUCxDQURHO0FBRXRCSyxxQkFBbUIsc0JBQU8sbUJBQVA7QUFGRyxDQUF4Qjs7QUFLQVIsU0FBU3NFLFNBQVQsR0FBcUI7QUFDbkJULFNBQU9VLG9CQUFVQyxHQURFO0FBRW5CeEIsUUFBTXVCLG9CQUFVRSxNQUZHO0FBR25CM0MsYUFBV3lDLG9CQUFVRyxJQUhGO0FBSW5CekMsV0FBU3NDLG9CQUFVRyxJQUpBO0FBS25CN0MsY0FBWTBDLG9CQUFVRyxJQUxIO0FBTW5CeEMsY0FBWXFDLG9CQUFVRyxJQU5IO0FBT25CdkUscUJBQW1Cb0Usb0JBQVVDLEdBUFY7QUFRbkJoRSxxQkFBbUIrRCxvQkFBVUM7QUFSVixDQUFyQiIsImZpbGUiOiJDb21wb3Nlci5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBtZW1vaXplIGZyb20gJ21lbW9pemUtb25lJztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG5pbXBvcnQgQ29udGV4dCBmcm9tICcuL0NvbnRleHQnO1xuaW1wb3J0IHByZWZpeCBmcm9tICcuL3ByZWZpeCc7XG5cbmZ1bmN0aW9uIGFib3J0YWJsZShyZWNvZ25pdGlvbikge1xuICByZXR1cm4gISFyZWNvZ25pdGlvbi5hYm9ydDtcbn1cblxuZnVuY3Rpb24gY2hhaW5MaXN0ZW5lciguLi5saXN0ZW5lcnMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICBsaXN0ZW5lcnMuZm9yRWFjaChsaXN0ZW5lciA9PiBsaXN0ZW5lci5hcHBseSh0aGlzLCBhcmd1bWVudHMpKVxuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDb21wb3NlciBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpO1xuXG4gICAgdGhpcy5jcmVhdGVHcmFtbWFyTGlzdCA9IG1lbW9pemUoKHNwZWVjaEdyYW1tYXJMaXN0LCBncmFtbWFyKSA9PiB7XG4gICAgICBjb25zdCBncmFtbWFyTGlzdCA9IG5ldyBzcGVlY2hHcmFtbWFyTGlzdCgpO1xuXG4gICAgICBncmFtbWFyICYmIGdyYW1tYXJMaXN0LmFkZEZyb21TdHJpbmcoZ3JhbW1hciwgMSk7XG5cbiAgICAgIHJldHVybiBncmFtbWFyTGlzdDtcbiAgICB9KTtcblxuICAgIHRoaXMuY3JlYXRlUmVjb2duaXRpb24gPSBtZW1vaXplKHNwZWVjaFJlY29nbml0aW9uID0+IHNwZWVjaFJlY29nbml0aW9uICYmIG5ldyBzcGVlY2hSZWNvZ25pdGlvbigpKTtcblxuICAgIHRoaXMuaGFuZGxlQXVkaW9FbmQgPSB0aGlzLmhhbmRsZUF1ZGlvRW5kLmJpbmQodGhpcyk7XG4gICAgdGhpcy5oYW5kbGVBdWRpb1N0YXJ0ID0gdGhpcy5oYW5kbGVBdWRpb1N0YXJ0LmJpbmQodGhpcyk7XG4gICAgdGhpcy5oYW5kbGVFbmQgPSB0aGlzLmhhbmRsZUVuZC5iaW5kKHRoaXMpO1xuICAgIHRoaXMuaGFuZGxlRXJyb3IgPSB0aGlzLmhhbmRsZUVycm9yLmJpbmQodGhpcyk7XG4gICAgdGhpcy5oYW5kbGVSYXdFdmVudCA9IHRoaXMuaGFuZGxlUmF3RXZlbnQuYmluZCh0aGlzKTtcbiAgICB0aGlzLmhhbmRsZVJlc3VsdCA9IHRoaXMuaGFuZGxlUmVzdWx0LmJpbmQodGhpcyk7XG4gICAgdGhpcy5oYW5kbGVTdGFydCA9IHRoaXMuaGFuZGxlU3RhcnQuYmluZCh0aGlzKTtcblxuICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICByZWFkeVN0YXRlOiAwLFxuICAgICAgc3VwcG9ydGVkOiAhIXByb3BzLnNwZWVjaFJlY29nbml0aW9uXG4gICAgfTtcbiAgfVxuXG4gIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMobmV4dFByb3BzKSB7XG4gICAgbGV0IHsgcmVjb2duaXRpb24gfSA9IHRoaXM7XG4gICAgbGV0IG5leHRTdGF0ZTtcblxuICAgIGlmIChuZXh0UHJvcHMuc3BlZWNoUmVjb2duaXRpb24gIT09IHRoaXMucHJvcHMuc3BlZWNoUmVjb2duaXRpb24pIHtcbiAgICAgIGlmIChyZWNvZ25pdGlvbikge1xuICAgICAgICBpZiAoYWJvcnRhYmxlKHJlY29nbml0aW9uKSkge1xuICAgICAgICAgIHJlY29nbml0aW9uLmFib3J0KCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdDYW5ub3QgY2hhbmdlIFwic3BlZWNoUmVjb2duaXRpb25cIiBwcm9wIHdoaWxlIHRoZSBjdXJyZW50IG9uZSBpcyBvbmdvaW5nIGFuZCBpcyBub3QgYWJvcnRhYmxlLicpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJlY29nbml0aW9uID0gdGhpcy5yZWNvZ25pdGlvbiA9IG51bGw7XG5cbiAgICAgIG5leHRTdGF0ZSA9IHsgLi4ubmV4dFN0YXRlLCBzdXBwb3J0ZWQ6ICEhbmV4dFByb3BzLnNwZWVjaFJlY29nbml0aW9uIH07XG4gICAgfVxuXG4gICAgaWYgKG5leHRQcm9wcy5zdGFydGVkICE9PSB0aGlzLnByb3BzLnN0YXJ0ZWQpIHtcbiAgICAgIGlmIChuZXh0UHJvcHMuc3RhcnRlZCkge1xuICAgICAgICB0aGlzLnN0YXJ0KG5leHRQcm9wcyk7XG5cbiAgICAgICAgbmV4dFN0YXRlID0geyAuLi5uZXh0U3RhdGUsIGFib3J0YWJsZTogYWJvcnRhYmxlKHRoaXMucmVjb2duaXRpb24pIH07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAocmVjb2duaXRpb24pIHtcbiAgICAgICAgICBpZiAoYWJvcnRhYmxlKHJlY29nbml0aW9uKSkge1xuICAgICAgICAgICAgcmVjb2duaXRpb24uYWJvcnQoKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdDYW5ub3Qgc3RvcCByZWNvZ25pdGlvbiB3aGlsZSB0aGUgY3VycmVudCBvbmUgaXMgb25nb2luZyBhbmQgaXMgbm90IGFib3J0YWJsZS4nKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBuZXh0U3RhdGUgJiYgdGhpcy5zZXRTdGF0ZSgoKSA9PiBuZXh0U3RhdGUpO1xuICB9XG5cbiAgY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgY29uc3QgeyByZWNvZ25pdGlvbiB9ID0gdGhpcztcblxuICAgIGlmIChyZWNvZ25pdGlvbikge1xuICAgICAgaWYgKGFib3J0YWJsZShyZWNvZ25pdGlvbikpIHtcbiAgICAgICAgcmVjb2duaXRpb24uYWJvcnQoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnNvbGUud2FybigncmVhY3QtZGljdGF0ZS1idXR0b246IENvbXBvbmVudCBpcyB1bm1vdW50ZWQgYnV0IHJlY29nbml0aW9uIGlzIHN0aWxsIG9uZ29pbmcgYmVjYXVzZSBpdCBpcyBub3QgYWJvcnRhYmxlLicpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGhhbmRsZUF1ZGlvRW5kKCkge1xuICAgIHRoaXMuc2V0U3RhdGUoKCkgPT4gKHsgcmVhZHlTdGF0ZTogMyB9KSk7XG4gIH1cblxuICBoYW5kbGVBdWRpb1N0YXJ0KCkge1xuICAgIHRoaXMuc2V0U3RhdGUoKCkgPT4gKHsgcmVhZHlTdGF0ZTogMiB9KSk7XG5cbiAgICAvLyBXZWIgU3BlZWNoIEFQSSBkb2VzIG5vdCBlbWl0IFwicmVzdWx0XCIgd2hlbiBub3RoaW5nIGlzIGhlYXJkLCBhbmQgQ2hyb21lIGRvZXMgbm90IGVtaXQgXCJub21hdGNoXCIgZXZlbnQuXG4gICAgLy8gQmVjYXVzZSB3ZSBlbWl0dGVkIG9uUHJvZ3Jlc3MsIHdlIHNob3VsZCBlbWl0IFwiZGljdGF0ZVwiIGlmIG5vdCBlcnJvciwgc28gdGhleSB3b3JrcyBpbiBwYWlyLlxuICAgIHRoaXMuZW1pdERpY3RhdGVPbkVuZCA9IHRydWU7XG4gICAgdGhpcy5wcm9wcy5vblByb2dyZXNzICYmIHRoaXMucHJvcHMub25Qcm9ncmVzcyh7IGFib3J0YWJsZTogYWJvcnRhYmxlKHRoaXMucmVjb2duaXRpb24pIH0pO1xuICB9XG5cbiAgaGFuZGxlRW5kKCkge1xuICAgIHRoaXMucmVjb2duaXRpb24gPSBudWxsO1xuXG4gICAgaWYgKHRoaXMuZW1pdERpY3RhdGVPbkVuZCkge1xuICAgICAgdGhpcy5wcm9wcy5vbkRpY3RhdGUgJiYgdGhpcy5wcm9wcy5vbkRpY3RhdGUoe30pO1xuICAgIH1cblxuICAgIHRoaXMuc2V0U3RhdGUoKCkgPT4gKHsgcmVhZHlTdGF0ZTogMCB9KSk7XG4gIH1cblxuICBoYW5kbGVFcnJvcihldmVudCkge1xuICAgIHRoaXMuc2V0U3RhdGUoKCkgPT4gKHtcbiAgICAgIHJlYWR5U3RhdGU6IDAsXG4gICAgICAuLi4oZXZlbnQuZXJyb3IgPT09ICdub3QtYWxsb3dlZCcgJiYgeyBzdXBwb3J0ZWQ6IGZhbHNlIH0pXG4gICAgfSkpO1xuXG4gICAgLy8gRXJyb3Igb3V0LCBubyBuZWVkIHRvIGVtaXQgXCJkaWN0YXRlXCJcbiAgICB0aGlzLmVtaXREaWN0YXRlT25FbmQgPSBmYWxzZTtcbiAgICB0aGlzLnJlY29nbml0aW9uID0gbnVsbDtcbiAgICB0aGlzLnByb3BzLm9uRXJyb3IgJiYgdGhpcy5wcm9wcy5vbkVycm9yKGV2ZW50KTtcbiAgfVxuXG4gIGhhbmRsZVJhd0V2ZW50KGV2ZW50KSB7XG4gICAgdGhpcy5wcm9wcy5vblJhd0V2ZW50ICYmIHRoaXMucHJvcHMub25SYXdFdmVudChldmVudCk7XG4gIH1cblxuICBoYW5kbGVSZXN1bHQoZXZlbnQpIHtcbiAgICBjb25zdCB7IHByb3BzIH0gPSB0aGlzO1xuICAgIGNvbnN0IHsgcmVzdWx0czogcmF3UmVzdWx0cyB9ID0gZXZlbnQ7XG5cbiAgICBpZiAocmF3UmVzdWx0cy5sZW5ndGgpIHtcbiAgICAgIGNvbnN0IHJlc3VsdHMgPSBbXS5tYXAuY2FsbChyYXdSZXN1bHRzLCBhbHRzID0+IHtcbiAgICAgICAgY29uc3QgZmlyc3RBbHQgPSBhbHRzWzBdO1xuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgY29uZmlkZW5jZTogZmlyc3RBbHQuY29uZmlkZW5jZSxcbiAgICAgICAgICB0cmFuc2NyaXB0OiBmaXJzdEFsdC50cmFuc2NyaXB0XG4gICAgICAgIH07XG4gICAgICB9KTtcblxuICAgICAgY29uc3QgZmlyc3QgPSByYXdSZXN1bHRzWzBdO1xuXG4gICAgICBpZiAoZmlyc3QuaXNGaW5hbCkge1xuICAgICAgICB0aGlzLmVtaXREaWN0YXRlT25FbmQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5yZWNvZ25pdGlvbiA9IG51bGw7XG4gICAgICAgIHByb3BzLm9uRGljdGF0ZSAmJiBwcm9wcy5vbkRpY3RhdGUoeyByZXN1bHQ6IHJlc3VsdHNbMF0gfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwcm9wcy5vblByb2dyZXNzICYmIHByb3BzLm9uUHJvZ3Jlc3MoeyBhYm9ydGFibGU6IGFib3J0YWJsZSh0aGlzLnJlY29nbml0aW9uKSwgcmVzdWx0cyB9KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBoYW5kbGVTdGFydCgpIHtcbiAgICB0aGlzLnNldFN0YXRlKCgpID0+ICh7IHJlYWR5U3RhdGU6IDEgfSkpO1xuICB9XG5cbiAgc3RhcnQocHJvcHMpIHtcbiAgICBpZiAodGhpcy5yZWNvZ25pdGlvbikge1xuICAgICAgaWYgKGFib3J0YWJsZSh0aGlzLnJlY29nbml0aW9uKSkge1xuICAgICAgICB0aGlzLnJlY29nbml0aW9uLmFib3J0KCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0Nhbm5vdCBzdGFydCBhIG5ldyByZWNvZ25pdGlvbiB3aGlsZSB0aGUgY3VycmVudCBvbmUgaXMgb25nb2luZyBhbmQgaXMgbm90IGFib3J0YWJsZS4nKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoIXRoaXMuc3RhdGUuc3VwcG9ydGVkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1NwZWVjaCByZWNvZ25pdGlvbiBpcyBub3Qgc3VwcG9ydGVkJyk7XG4gICAgfVxuXG4gICAgY29uc3QgcmVjb2duaXRpb24gPSB0aGlzLnJlY29nbml0aW9uID0gdGhpcy5jcmVhdGVSZWNvZ25pdGlvbihwcm9wcy5zcGVlY2hSZWNvZ25pdGlvbik7XG5cbiAgICByZWNvZ25pdGlvbi5ncmFtbWFycyA9IHRoaXMuY3JlYXRlR3JhbW1hckxpc3QocHJvcHMuc3BlZWNoR3JhbW1hckxpc3QsIHByb3BzLmdyYW1tYXIpO1xuICAgIHJlY29nbml0aW9uLmxhbmcgPSBwcm9wcy5sYW5nO1xuICAgIHJlY29nbml0aW9uLmludGVyaW1SZXN1bHRzID0gdHJ1ZTtcbiAgICByZWNvZ25pdGlvbi5vbmF1ZGlvZW5kID0gY2hhaW5MaXN0ZW5lcih0aGlzLmhhbmRsZUF1ZGlvRW5kLCB0aGlzLmhhbmRsZVJhd0V2ZW50KTtcbiAgICByZWNvZ25pdGlvbi5vbmF1ZGlvc3RhcnQgPSBjaGFpbkxpc3RlbmVyKHRoaXMuaGFuZGxlQXVkaW9TdGFydCwgdGhpcy5oYW5kbGVSYXdFdmVudCk7XG4gICAgcmVjb2duaXRpb24ub25lbmQgPSBjaGFpbkxpc3RlbmVyKHRoaXMuaGFuZGxlRW5kLCB0aGlzLmhhbmRsZVJhd0V2ZW50KTtcbiAgICByZWNvZ25pdGlvbi5vbmVycm9yID0gY2hhaW5MaXN0ZW5lcih0aGlzLmhhbmRsZUVycm9yLCB0aGlzLmhhbmRsZVJhd0V2ZW50KTtcbiAgICByZWNvZ25pdGlvbi5vbm5vbWF0Y2ggPSB0aGlzLmhhbmRsZVJhd0V2ZW50O1xuICAgIHJlY29nbml0aW9uLm9ucmVzdWx0ID0gY2hhaW5MaXN0ZW5lcih0aGlzLmhhbmRsZVJlc3VsdCwgdGhpcy5oYW5kbGVSYXdFdmVudCk7XG4gICAgcmVjb2duaXRpb24ub25zb3VuZGVuZCA9IHRoaXMuaGFuZGxlUmF3RXZlbnQ7XG4gICAgcmVjb2duaXRpb24ub25zb3VuZHN0YXJ0ID0gdGhpcy5oYW5kbGVSYXdFdmVudDtcbiAgICByZWNvZ25pdGlvbi5vbnNwZWVjaGVuZCA9IHRoaXMuaGFuZGxlUmF3RXZlbnQ7XG4gICAgcmVjb2duaXRpb24ub25zcGVlY2hzdGFydCA9IHRoaXMuaGFuZGxlUmF3RXZlbnQ7XG4gICAgcmVjb2duaXRpb24ub25zdGFydCA9IGNoYWluTGlzdGVuZXIodGhpcy5oYW5kbGVTdGFydCwgdGhpcy5oYW5kbGVSYXdFdmVudCk7XG5cbiAgICBwcm9wcy5leHRyYSAmJiBPYmplY3Qua2V5cyhwcm9wcy5leHRyYSkuZm9yRWFjaChrZXkgPT4ge1xuICAgICAgcmVjb2duaXRpb25ba2V5XSA9IHByb3BzLmV4dHJhW2tleV07XG4gICAgfSk7XG5cbiAgICByZWNvZ25pdGlvbi5zdGFydCgpO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHsgcHJvcHMsIHN0YXRlIH0gPSB0aGlzO1xuICAgIGNvbnN0IHsgY2hpbGRyZW4gfSA9IHByb3BzO1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDxDb250ZXh0LlByb3ZpZGVyIHZhbHVlPXsgc3RhdGUgfT5cbiAgICAgICAgPENvbnRleHQuQ29uc3VtZXI+XG4gICAgICAgICAgeyBjb250ZXh0ID0+IHR5cGVvZiBjaGlsZHJlbiA9PT0gJ2Z1bmN0aW9uJyA/IGNoaWxkcmVuKGNvbnRleHQpIDogY2hpbGRyZW4gfVxuICAgICAgICA8L0NvbnRleHQuQ29uc3VtZXI+XG4gICAgICA8L0NvbnRleHQuUHJvdmlkZXI+XG4gICAgKTtcbiAgfVxufVxuXG5Db21wb3Nlci5kZWZhdWx0UHJvcHMgPSB7XG4gIHNwZWVjaEdyYW1tYXJMaXN0OiBwcmVmaXgoJ1NwZWVjaEdyYW1tYXJMaXN0JyksXG4gIHNwZWVjaFJlY29nbml0aW9uOiBwcmVmaXgoJ1NwZWVjaFJlY29nbml0aW9uJylcbn07XG5cbkNvbXBvc2VyLnByb3BUeXBlcyA9IHtcbiAgZXh0cmE6IFByb3BUeXBlcy5hbnksXG4gIGxhbmc6IFByb3BUeXBlcy5zdHJpbmcsXG4gIG9uRGljdGF0ZTogUHJvcFR5cGVzLmZ1bmMsXG4gIG9uRXJyb3I6IFByb3BUeXBlcy5mdW5jLFxuICBvblByb2dyZXNzOiBQcm9wVHlwZXMuZnVuYyxcbiAgb25SYXdFdmVudDogUHJvcFR5cGVzLmZ1bmMsXG4gIHNwZWVjaEdyYW1tYXJMaXN0OiBQcm9wVHlwZXMuYW55LFxuICBzcGVlY2hSZWNvZ25pdGlvbjogUHJvcFR5cGVzLmFueVxufTtcbiJdfQ==