{"ast":null,"code":"var _jsxFileName = \"/Users/sherikwong/Desktop/okay-inventory/src/components/scan/scan.tsx\";\nimport { Box } from 'grommet';\nimport { Menu } from 'grommet-icons';\nimport React, { useEffect, useState } from 'react';\nimport QrReader from 'react-qr-reader';\nimport { withRouter } from 'react-router-dom';\nimport styled from 'styled-components';\nimport { itemsDB } from '../../database/items';\nimport './scan.scss';\nimport { ContrastingButton } from '../item/Item.styles';\nconst MenuButton = styled(ContrastingButton)`\nposition: absolute;\ntop: 0;\nleft: 0;\n`;\nconst Error = styled.div`\n z-index: 1000;\n color: white;\n text-align: center;\n position: absolute;\n bottom: 0;\n background-color: rgba(0, 0, 0, .8);\n text-transform: uppercase;\n width: 100%;\n`;\n\nconst getAnimationClass = direction => `animate__animated animate__slide${direction}`;\n\nconst IN_UP = 'InUp';\nconst OUT_DOWN = 'OutDown';\n\nconst Scan = props => {\n  const {\n    history\n  } = props;\n  const [hasError, setError] = useState(false);\n  const [errorTransitionClass, setTransClass] = useState(getAnimationClass(''));\n\n  const onScan = qr => {\n    setError(false);\n\n    if (qr) {\n      const domains = [window.location.href, 'https://sherikwong.com/', 'https://okay-inventory.herokuapp.com/'];\n      let currentDomain = domains.find(domain => qr.includes(domain));\n      const withoutHost = qr.replace(`${currentDomain}`, '');\n      const id = withoutHost.replace('item/', '');\n      itemsDB.get(id).then(item => {\n        if (item) {\n          history.push(`/item/${id}`);\n        } else {\n          setError(true);\n        }\n      });\n    }\n  };\n\n  const goToMenu = () => {\n    history.push('/list');\n  };\n\n  useEffect(() => {\n    setTransClass(getAnimationClass(hasError ? IN_UP : OUT_DOWN));\n  }, [hasError]);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(QrReader, {\n    style: {\n      height: '100%'\n    },\n    className: \"container\",\n    onScan: onScan,\n    onError: () => undefined,\n    onImageLoad: () => undefined,\n    onLoad: () => undefined,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(MenuButton, {\n    pad: \"medium\",\n    icon: /*#__PURE__*/React.createElement(Menu, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 38\n      }\n    }),\n    onClick: goToMenu,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Error, {\n    className: errorTransitionClass,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Box, {\n    pad: \"medium\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 9\n    }\n  }, \"Try again\")));\n};\n\nexport default withRouter(Scan);","map":{"version":3,"sources":["/Users/sherikwong/Desktop/okay-inventory/src/components/scan/scan.tsx"],"names":["Box","Menu","React","useEffect","useState","QrReader","withRouter","styled","itemsDB","ContrastingButton","MenuButton","Error","div","getAnimationClass","direction","IN_UP","OUT_DOWN","Scan","props","history","hasError","setError","errorTransitionClass","setTransClass","onScan","qr","domains","window","location","href","currentDomain","find","domain","includes","withoutHost","replace","id","get","then","item","push","goToMenu","height","undefined"],"mappings":"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","sourcesContent":["import { Button, Box } from 'grommet';\nimport { Menu } from 'grommet-icons';\nimport React, { useEffect, useState } from 'react';\nimport QrReader from 'react-qr-reader';\nimport { withRouter } from 'react-router-dom';\nimport styled from 'styled-components';\nimport { itemsDB } from '../../database/items';\nimport './scan.scss';\nimport { ContrastingButton } from '../item/Item.styles';\nimport Logo from '../reusable/logo/logo';\n\nconst MenuButton = styled(ContrastingButton)`\nposition: absolute;\ntop: 0;\nleft: 0;\n`;\n\nconst Error = styled.div`\n z-index: 1000;\n color: white;\n text-align: center;\n position: absolute;\n bottom: 0;\n background-color: rgba(0, 0, 0, .8);\n text-transform: uppercase;\n width: 100%;\n`;\n\nconst getAnimationClass = direction => `animate__animated animate__slide${direction}`;\nconst IN_UP = 'InUp';\nconst OUT_DOWN = 'OutDown';\n\nconst Scan = props => {\n  const { history } = props;\n  const [hasError, setError] = useState(false);\n  const [errorTransitionClass, setTransClass] = useState(getAnimationClass(''));\n\n  const onScan = (qr: string | null) => {\n    setError(false);\n\n    if (qr) {\n      const domains = [window.location.href, 'https://sherikwong.com/', 'https://okay-inventory.herokuapp.com/'];\n      let currentDomain = domains.find(domain => qr.includes(domain));\n\n      const withoutHost = qr.replace(`${currentDomain}`, '');\n      const id = withoutHost.replace('item/', '');\n\n      itemsDB.get(id).then(item => {\n        if (item) {\n          history.push(`/item/${id}`);\n        } else {\n          setError(true);\n        }\n      });\n    }\n  }\n\n  const goToMenu = () => {\n    history.push('/list');\n  };\n\n  useEffect(() => {\n    setTransClass(getAnimationClass(hasError ? IN_UP : OUT_DOWN));\n  }, [hasError])\n\n  return (\n    <>\n      <QrReader style={{ height: '100%' }} className=\"container\" onScan={onScan} onError={() => undefined} onImageLoad={() => undefined} onLoad={() => undefined} />\n      <MenuButton pad=\"medium\" icon={<Menu />} onClick={goToMenu} />\n\n      <Error className={errorTransitionClass}>\n        <Box pad=\"medium\">\n          Try again\n        </Box>\n      </Error>\n    </>\n  );\n}\n\nexport default withRouter(Scan);\n"]},"metadata":{},"sourceType":"module"}