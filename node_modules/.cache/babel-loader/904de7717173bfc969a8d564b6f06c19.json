{"ast":null,"code":"var _jsxFileName = \"/Users/sherikwong/Desktop/okay-inventory/src/components/features/model/new/new-model.tsx\";\nimport { DynamicForm } from '../../../dynamic-form/dynamic-form';\nimport { EFieldType } from '../../../../types/form/field';\nimport React, { useReducer, useState } from 'react';\nimport { transformEnumToSelectOptions } from '../../../../utils/transformEnumToSelectOptions';\nimport { Button, Form } from 'grommet';\nimport { Container } from '../../../reusable/container';\nconst optionsForm = [{\n  name: 'label'\n}, {\n  name: 'value'\n}];\nconst newFieldForm = [{\n  name: 'name'\n}, {\n  name: 'type',\n  type: EFieldType.RADIO_GROUP,\n  options: transformEnumToSelectOptions(EFieldType)\n}];\nexport const NewModel = () => {\n  const [modelName, setModelName] = useState('');\n  const [optionsFields, setOptionsFields] = useState([]);\n  const [options, setOptions] = useState([]);\n  const [fields, setFields] = useReducer((previous, {\n    action,\n    field\n  }) => {\n    const shallowCopy = new Map(previous);\n\n    switch (action) {\n      case 'add':\n        shallowCopy.set(field.name, field);\n        break;\n\n      case 'delete':\n        shallowCopy.delete(field.name);\n        break;\n\n      case 'modify':\n        const gottenField = shallowCopy.get(field.name);\n        shallowCopy.set(field.name, { ...gottenField,\n          ...field\n        });\n    }\n\n    return shallowCopy;\n  }, new Map([]));\n  const fieldsAsArray = Array.from(fields).map(([, value]) => value);\n\n  const addField = ({\n    value\n  }) => {\n    setFields({\n      action: 'add',\n      field: value\n    });\n    setOptions([]);\n  };\n\n  const onSubmit = $ => {// modelsDB.add({\n    //   name: modelName,\n    //   fields: fieldsAsArray,\n    // });\n  };\n\n  const newModelForm = [{\n    name: 'Form Name',\n    value: modelName,\n    onChange: value => setModelName(value.target.value)\n  }];\n\n  const onChange = values => {\n    const {\n      type,\n      label,\n      value,\n      name\n    } = values;\n\n    if (!fields.has(name)) {\n      setFields({\n        action: 'add',\n        field: {\n          name\n        }\n      });\n    }\n\n    setOptionsFields(type === EFieldType.SELECT || type === EFieldType.RADIO_GROUP.toLowerCase() ? optionsForm : []);\n  };\n\n  const onAddOption = ({\n    value\n  }) => {\n    setOptions([...options, value]);\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }\n  }, \"New Model\"), /*#__PURE__*/React.createElement(DynamicForm, {\n    fields: newModelForm,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }\n  }), fields && /*#__PURE__*/React.createElement(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(DynamicForm, {\n    fields: fieldsAsArray,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Form, {\n    onSubmit: addField,\n    onChange: onChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(DynamicForm, {\n    fields: newFieldForm,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    type: \"submit\",\n    label: \"Add Field\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 11\n    }\n  }))), options.length && /*#__PURE__*/React.createElement(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 11\n    }\n  }, \"Options\"), options.map(({\n    value,\n    label\n  }) => /*#__PURE__*/React.createElement(React.Fragment, null, label, \": \", value))), optionsFields.length && /*#__PURE__*/React.createElement(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Form, {\n    onSubmit: onAddOption,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(DynamicForm, {\n    fields: optionsFields,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    type: \"submit\",\n    label: \"Add Option\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 15\n    }\n  })))), /*#__PURE__*/React.createElement(Button, {\n    label: \"Save\",\n    onClick: onSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 7\n    }\n  }));\n};\nexport default {};","map":{"version":3,"sources":["/Users/sherikwong/Desktop/okay-inventory/src/components/features/model/new/new-model.tsx"],"names":["DynamicForm","EFieldType","React","useReducer","useState","transformEnumToSelectOptions","Button","Form","Container","optionsForm","name","newFieldForm","type","RADIO_GROUP","options","NewModel","modelName","setModelName","optionsFields","setOptionsFields","setOptions","fields","setFields","previous","action","field","shallowCopy","Map","set","delete","gottenField","get","fieldsAsArray","Array","from","map","value","addField","onSubmit","$","newModelForm","onChange","target","values","label","has","SELECT","toLowerCase","onAddOption","length"],"mappings":"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","sourcesContent":["import { DynamicForm } from '../../../dynamic-form/dynamic-form';\nimport {\n  EFieldType,\n  IField,\n  ISelectOption,\n} from '../../../../types/form/field';\nimport React, { Reducer, useEffect, useReducer, useState } from 'react';\nimport { transformEnumToSelectOptions } from '../../../../utils/transformEnumToSelectOptions';\nimport { Box, Button, Form, FormField, TextInput } from 'grommet';\nimport { modelsDB } from '../../../../database/models';\nimport { Container } from '../../../reusable/container';\n\ninterface IReducer {\n  action: 'increment' | 'decrement' | 'add' | 'delete' | 'modify';\n  field: IField;\n}\n\nconst optionsForm = [\n  {\n    name: 'label',\n  },\n  {\n    name: 'value',\n  },\n];\n\nconst newFieldForm: IField[] = [\n  {\n    name: 'name',\n  },\n  {\n    name: 'type',\n    type: EFieldType.RADIO_GROUP,\n    options: transformEnumToSelectOptions(EFieldType),\n  },\n];\n\nexport const NewModel = () => {\n  const [modelName, setModelName] = useState('');\n  const [optionsFields, setOptionsFields] = useState<IField[]>([]);\n  const [options, setOptions] = useState<ISelectOption[]>([]);\n\n  const [fields, setFields] = useReducer<\n    Reducer<Map<string, IField>, IReducer>\n  >((previous, { action, field }) => {\n    const shallowCopy = new Map(previous);\n\n    switch (action) {\n      case 'add':\n        shallowCopy.set(field.name, field);\n        break;\n      case 'delete':\n        shallowCopy.delete(field.name);\n        break;\n      case 'modify':\n        const gottenField = shallowCopy.get(field.name);\n        shallowCopy.set(field.name, {\n          ...gottenField,\n          ...field,\n        });\n    }\n\n    return shallowCopy;\n  }, new Map([]));\n\n  const fieldsAsArray = Array.from(fields).map(([, value]) => value);\n\n  const addField = ({ value }) => {\n    setFields({ action: 'add', field: value });\n    setOptions([]);\n  };\n\n  const onSubmit = ($) => {\n    // modelsDB.add({\n    //   name: modelName,\n    //   fields: fieldsAsArray,\n    // });\n  };\n\n  const newModelForm: IField[] = [\n    {\n      name: 'Form Name',\n      value: modelName,\n      onChange: (value) => setModelName(value.target.value),\n    },\n  ];\n\n  const onChange = (values: any) => {\n    const { type, label, value, name } = values;\n\n    if (!fields.has(name)) {\n      setFields({\n        action: 'add',\n        field: {\n          name,\n        },\n      });\n    }\n\n    setOptionsFields(\n      type === EFieldType.SELECT ||\n        type === EFieldType.RADIO_GROUP.toLowerCase()\n        ? optionsForm\n        : []\n    );\n  };\n\n  const onAddOption: any = ({ value }) => {\n    setOptions([...options, value]);\n  };\n\n  return (\n    <>\n      <h1>New Model</h1>\n\n      <DynamicForm fields={newModelForm} />\n\n      {fields && (\n        <Container>\n          <DynamicForm fields={fieldsAsArray} />\n        </Container>\n      )}\n\n      <Container>\n        <Form onSubmit={addField} onChange={onChange}>\n          <DynamicForm fields={newFieldForm} />\n          <Button type=\"submit\" label=\"Add Field\" />\n        </Form>\n      </Container>\n\n      {options.length && (\n        <Container>\n          <h1>Options</h1>\n          {options.map(({ value, label }) => (\n            <>\n              {label}: {value}\n            </>\n          ))}\n        </Container>\n      )}\n\n      {optionsFields.length && (\n        <Container>\n          <Form onSubmit={onAddOption}>\n            <Container>\n              <DynamicForm fields={optionsFields} />\n              <Button type=\"submit\" label=\"Add Option\" />\n            </Container>\n          </Form>\n        </Container>\n      )}\n\n      <Button label=\"Save\" onClick={onSubmit} />\n    </>\n  );\n};\n\nexport default {};\n"]},"metadata":{},"sourceType":"module"}