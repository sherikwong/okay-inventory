{"ast":null,"code":"var _jsxFileName = \"/Users/sherikwong/Desktop/okay-inventory/src/components/reusable/Tags/Tags.tsx\";\n\n/* eslint-disable @typescript-eslint/no-unused-vars */\nimport { Box } from \"grommet\";\nimport React, { useEffect, useState } from \"react\";\nimport { tagsDB } from '../../../database/tags';\nimport Tag from \"./Tag\";\nexport const getAllTags = setAllTags => () => {\n  tagsDB.getAll().then(res => {\n    const newMap = new Map([]);\n    Object.values(res).forEach(details => {\n      newMap.set(details.id, details);\n    });\n    setAllTags(newMap);\n  });\n};\n\nconst Tags = props => {\n  const {\n    tags,\n    onRemove\n  } = props;\n  const [queriedTags, setQueriedTags] = useState([]);\n  const [allTags, setAllTags] = useState(new Map([]));\n  useEffect(getAllTags(setAllTags), [tags]);\n  useEffect(() => {\n    let tempTags = [];\n\n    if (tags) {\n      const retrievedTags = [...tags].map(id => {\n        const entry = allTags.get(id);\n        return entry;\n      }).filter(tag => tag);\n\n      if (retrievedTags.length) {\n        tempTags = retrievedTags;\n      }\n    }\n\n    setQueriedTags(tempTags);\n  }, [allTags, tags]);\n  return /*#__PURE__*/React.createElement(Box, {\n    align: \"center\",\n    direction: \"row\",\n    wrap: true,\n    pad: {\n      left: \"xsmall\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 5\n    }\n  }, queriedTags && queriedTags.map((tag, i) => {\n    return /*#__PURE__*/React.createElement(Tag, {\n      key: tag.id,\n      onRemove: onRemove ? () => onRemove(tag) : undefined,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 16\n      }\n    }, tag.name);\n  }));\n};\n\nexport default Tags;","map":{"version":3,"sources":["/Users/sherikwong/Desktop/okay-inventory/src/components/reusable/Tags/Tags.tsx"],"names":["Box","React","useEffect","useState","tagsDB","Tag","getAllTags","setAllTags","getAll","then","res","newMap","Map","Object","values","forEach","details","set","id","Tags","props","tags","onRemove","queriedTags","setQueriedTags","allTags","tempTags","retrievedTags","map","entry","get","filter","tag","length","left","i","undefined","name"],"mappings":";;AAAA;AACA,SAASA,GAAT,QAAoB,SAApB;AACA,OAAOC,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAAeC,MAAf,QAA6B,wBAA7B;AACA,OAAOC,GAAP,MAAgB,OAAhB;AAEA,OAAO,MAAMC,UAAU,GAAGC,UAAU,IAAI,MAAM;AAC5CH,EAAAA,MAAM,CAACI,MAAP,GAAgBC,IAAhB,CAAqBC,GAAG,IAAI;AAC1B,UAAMC,MAAM,GAAG,IAAIC,GAAJ,CAAQ,EAAR,CAAf;AAEAC,IAAAA,MAAM,CAACC,MAAP,CAAcJ,GAAd,EAAmBK,OAAnB,CAA2BC,OAAO,IAAI;AACpCL,MAAAA,MAAM,CAACM,GAAP,CAAWD,OAAO,CAACE,EAAnB,EAAuBF,OAAvB;AACD,KAFD;AAGAT,IAAAA,UAAU,CAACI,MAAD,CAAV;AACD,GAPD;AAQD,CATM;;AAWP,MAAMQ,IAAI,GAAGC,KAAK,IAAI;AACpB,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAqBF,KAA3B;AACA,QAAM,CAACG,WAAD,EAAcC,cAAd,IAAgCrB,QAAQ,CAAC,EAAD,CAA9C;AACA,QAAM,CAACsB,OAAD,EAAUlB,UAAV,IAAwBJ,QAAQ,CAAC,IAAIS,GAAJ,CAAQ,EAAR,CAAD,CAAtC;AAEAV,EAAAA,SAAS,CAACI,UAAU,CAACC,UAAD,CAAX,EAAyB,CAACc,IAAD,CAAzB,CAAT;AAEAnB,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIwB,QAAQ,GAAG,EAAf;;AACA,QAAIL,IAAJ,EAAU;AACR,YAAMM,aAAkB,GAAG,CAAC,GAAGN,IAAJ,EAAUO,GAAV,CAAcV,EAAE,IAAI;AAC7C,cAAMW,KAAK,GAAIJ,OAAD,CAAUK,GAAV,CAAcZ,EAAd,CAAd;AACA,eAAOW,KAAP;AACD,OAH0B,EAGxBE,MAHwB,CAGjBC,GAAG,IAAIA,GAHU,CAA3B;;AAKA,UAAIL,aAAa,CAACM,MAAlB,EAA0B;AACxBP,QAAAA,QAAQ,GAAGC,aAAX;AACD;AACF;;AACDH,IAAAA,cAAc,CAACE,QAAD,CAAd;AACD,GAbQ,EAaN,CAACD,OAAD,EAAUJ,IAAV,CAbM,CAAT;AAeA,sBACE,oBAAC,GAAD;AAAK,IAAA,KAAK,EAAC,QAAX;AAAoB,IAAA,SAAS,EAAC,KAA9B;AAAoC,IAAA,IAAI,EAAE,IAA1C;AAAgD,IAAA,GAAG,EAAE;AAAEa,MAAAA,IAAI,EAAE;AAAR,KAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGX,WAAW,IAAIA,WAAW,CAACK,GAAZ,CAAgB,CAACI,GAAD,EAAMG,CAAN,KAAY;AAE1C,wBAAO,oBAAC,GAAD;AAAK,MAAA,GAAG,EAAEH,GAAG,CAACd,EAAd;AAAkB,MAAA,QAAQ,EAAEI,QAAQ,GAAG,MAC5CA,QAAQ,CAACU,GAAD,CADiC,GACzBI,SADX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEJJ,GAAG,CAACK,IAFA,CAAP;AAID,GANe,CADlB,CADF;AAWD,CAjCD;;AAmCA,eAAelB,IAAf","sourcesContent":["/* eslint-disable @typescript-eslint/no-unused-vars */\nimport { Box } from \"grommet\";\nimport React, { useEffect, useState } from \"react\";\nimport { ITag, tagsDB } from '../../../database/tags';\nimport Tag from \"./Tag\";\n\nexport const getAllTags = setAllTags => () => {\n  tagsDB.getAll().then(res => {\n    const newMap = new Map([]);\n\n    Object.values(res).forEach(details => {\n      newMap.set(details.id, details);\n    });\n    setAllTags(newMap);\n  });\n}\n\nconst Tags = props => {\n  const { tags, onRemove } = props;\n  const [queriedTags, setQueriedTags] = useState([] as ITag[]);\n  const [allTags, setAllTags] = useState(new Map([]));\n\n  useEffect(getAllTags(setAllTags), [tags]);\n\n  useEffect(() => {\n    let tempTags = [];\n    if (tags) {\n      const retrievedTags: any = [...tags].map(id => {\n        const entry = (allTags).get(id);\n        return entry;\n      }).filter(tag => tag);\n\n      if (retrievedTags.length) {\n        tempTags = retrievedTags;\n      }\n    }\n    setQueriedTags(tempTags);\n  }, [allTags, tags]);\n\n  return (\n    <Box align=\"center\" direction=\"row\" wrap={true} pad={{ left: \"xsmall\" }}>\n      {queriedTags && queriedTags.map((tag, i) => {\n\n        return <Tag key={tag.id} onRemove={onRemove ? () =>\n          onRemove(tag) : undefined}>\n          {tag.name}\n        </Tag>\n      })}\n    </Box>\n  );\n};\n\nexport default Tags;\n"]},"metadata":{},"sourceType":"module"}