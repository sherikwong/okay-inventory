{"ast":null,"code":"var _jsxFileName = \"/Users/sherikwong/Desktop/okay-inventory/src/components/dynamic-form/dynamic-form.tsx\";\nimport { EFieldType } from '../../types/form/field';\nimport { fieldTypeMap } from './dynamic-form.variables';\nimport React from 'react';\nimport { titleCase } from 'voca';\nimport { Box, FormField, TextInput } from 'grommet';\nexport const DynamicForm = ({\n  fields\n}) => {\n  return /*#__PURE__*/React.createElement(Box, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 5\n    }\n  }, fields === null || fields === void 0 ? void 0 : fields.map(field => {\n    const Input = fieldTypeMap.get(field.type || EFieldType.text) || TextInput;\n    const hasOptions = field.type === EFieldType.select || field.type == EFieldType.radioGroup;\n    const selectConfig = hasOptions ? {\n      labelKey: 'value',\n      valueKey: 'label'\n    } : {};\n    const options = hasOptions ? field.options || ['hello'] : undefined;\n    return /*#__PURE__*/React.createElement(FormField, {\n      label: titleCase(field.name),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Input, Object.assign({}, field, {\n      type: field.type === EFieldType.number ? 'number' : 'text'\n    }, selectConfig, {\n      options: options,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 13\n      }\n    })));\n  }));\n};","map":{"version":3,"sources":["/Users/sherikwong/Desktop/okay-inventory/src/components/dynamic-form/dynamic-form.tsx"],"names":["EFieldType","fieldTypeMap","React","titleCase","Box","FormField","TextInput","DynamicForm","fields","map","field","Input","get","type","text","hasOptions","select","radioGroup","selectConfig","labelKey","valueKey","options","undefined","name","number"],"mappings":";AAAA,SAASA,UAAT,QAAmC,wBAAnC;AACA,SAASC,YAAT,QAA6B,0BAA7B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,QAA0B,MAA1B;AACA,SAASC,GAAT,EAAcC,SAAd,EAAyBC,SAAzB,QAA0C,SAA1C;AAOA,OAAO,MAAMC,WAAW,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAA4B;AACrD,sBACE,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGA,MADH,aACGA,MADH,uBACGA,MAAM,CAAEC,GAAR,CAAaC,KAAD,IAAW;AACtB,UAAMC,KAAK,GACTV,YAAY,CAACW,GAAb,CAAiBF,KAAK,CAACG,IAAN,IAAcb,UAAU,CAACc,IAA1C,KAAmDR,SADrD;AAEA,UAAMS,UAAU,GACdL,KAAK,CAACG,IAAN,KAAeb,UAAU,CAACgB,MAA1B,IACAN,KAAK,CAACG,IAAN,IAAcb,UAAU,CAACiB,UAF3B;AAIA,UAAMC,YAAY,GAAGH,UAAU,GAC3B;AACEI,MAAAA,QAAQ,EAAE,OADZ;AAEEC,MAAAA,QAAQ,EAAE;AAFZ,KAD2B,GAK3B,EALJ;AAOE,UAAMC,OAAO,GAAGN,UAAU,GAAIL,KAAK,CAACW,OAAN,IAAiB,CAAC,OAAD,CAArB,GAAkCC,SAA5D;AAEF,wBACE,oBAAC,SAAD;AAAW,MAAA,KAAK,EAAEnB,SAAS,CAACO,KAAK,CAACa,IAAP,CAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,KAAD,oBACMb,KADN;AAEE,MAAA,IAAI,EAAEA,KAAK,CAACG,IAAN,KAAeb,UAAU,CAACwB,MAA1B,GAAmC,QAAnC,GAA8C;AAFtD,OAGMN,YAHN;AAIE,MAAA,OAAO,EAAEG,OAJX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OADF,CADF;AAUD,GA1BA,CADH,CADF;AA+BD,CAhCM","sourcesContent":["import { EFieldType, IField } from '../../types/form/field';\nimport { fieldTypeMap } from './dynamic-form.variables';\nimport React from 'react';\nimport { titleCase } from 'voca';\nimport { Box, FormField, TextInput } from 'grommet';\n\ninterface IFormProps {\n  fields: IField[];\n  direction?: 'row' | 'column';\n}\n\nexport const DynamicForm = ({ fields }: IFormProps) => {\n  return (\n    <Box>\n      {fields?.map((field) => {\n        const Input =\n          fieldTypeMap.get(field.type || EFieldType.text) || TextInput;\n        const hasOptions =\n          field.type === EFieldType.select ||\n          field.type == EFieldType.radioGroup;\n\n        const selectConfig = hasOptions\n          ? {\n              labelKey: 'value',\n              valueKey: 'label',\n            }\n          : {};\n\n          const options = hasOptions ? (field.options || ['hello']) : undefined\n\n        return (\n          <FormField label={titleCase(field.name)}>\n            <Input\n              {...field}\n              type={field.type === EFieldType.number ? 'number' : 'text'}\n              {...selectConfig}\n              options={options}\n            />\n          </FormField>\n        );\n      })}\n    </Box>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}