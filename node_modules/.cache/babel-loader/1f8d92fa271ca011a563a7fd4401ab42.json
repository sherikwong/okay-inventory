{"ast":null,"code":"var _jsxFileName = \"/Users/sherikwong/Desktop/okay-inventory/src/components/features/model/new/new-model.tsx\";\nimport { DynamicForm } from '../../../dynamic-form/dynamic-form';\nimport { EFieldType } from '../../../../types/form/field';\nimport React, { useEffect, useReducer, useState } from 'react';\nimport { transformEnumToSelectOptions } from '../../../../utils/transformEnumToSelectOptions';\nimport { Button, Form } from 'grommet';\nimport { Container } from '../../../reusable/container';\nconst optionsForm = [{\n  name: 'label'\n}, {\n  name: 'value'\n}];\nconst newFieldForm = [{\n  name: 'name'\n}, {\n  name: 'type',\n  type: EFieldType.radioGroup,\n  options: transformEnumToSelectOptions(EFieldType)\n}];\nexport const NewModel = () => {\n  const [modelName, setModelName] = useState('');\n  const [optionsFields, setOptionsFields] = useState([]);\n  const [options, setOptions] = useState([]);\n\n  const hasOptions = type => type === EFieldType.select || type === EFieldType.radioGroup;\n\n  const [fields, setFields] = useReducer((previous, {\n    action,\n    field\n  }) => {\n    const shallowCopy = new Map(previous);\n\n    switch (action) {\n      case 'add':\n        let _field = { ...field\n        };\n\n        if (hasOptions(field.type)) {\n          _field = { ..._field,\n            options\n          };\n        }\n\n        shallowCopy.set(field.name, _field); // setOptions([]);\n\n        break;\n\n      case 'delete':\n        shallowCopy.delete(field.name);\n        break;\n\n      case 'modify':\n        const gottenField = shallowCopy.get(field.name);\n        shallowCopy.set(field.name, { ...gottenField,\n          ...field\n        });\n    }\n\n    return shallowCopy;\n  }, new Map([]));\n  useEffect(() => {\n    console.log(fields);\n  }, [fields]);\n  const fieldsAsArray = Array.from(fields).map(([, value]) => value);\n\n  const addField = ({\n    value\n  }) => {\n    setFields({\n      action: 'add',\n      field: { ...value,\n        ...(options.length ? options : {})\n      }\n    });\n    setOptions([]);\n  };\n\n  const onSubmit = () => {\n    console.log(modelName, fieldsAsArray); // modelsDB.add({\n    //   name: modelName,\n    //   fields: fieldsAsArray,\n    // });\n  };\n\n  const newModelForm = [{\n    name: 'Form Name',\n    value: modelName,\n    onChange: value => setModelName(value.target.value)\n  }];\n\n  const onChange = values => {\n    const {\n      type,\n      label,\n      value,\n      name\n    } = values;\n    setOptionsFields(hasOptions(type) ? optionsForm : []);\n  };\n\n  const onAddOption = ({\n    value\n  }) => {\n    setOptions([...options, value]);\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }\n  }, \"New Model\"), /*#__PURE__*/React.createElement(DynamicForm, {\n    fields: newModelForm,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }\n  }), fields && /*#__PURE__*/React.createElement(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(DynamicForm, {\n    fields: fieldsAsArray,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Form, {\n    onSubmit: addField,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(DynamicForm, {\n    fields: newFieldForm,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    type: \"submit\",\n    label: \"Add Field\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 11\n    }\n  }))), options.length && /*#__PURE__*/React.createElement(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 11\n    }\n  }, \"Options\"), options.map(({\n    value,\n    label\n  }) => /*#__PURE__*/React.createElement(React.Fragment, null, label, \": \", value))), optionsFields.length && /*#__PURE__*/React.createElement(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Form, {\n    onSubmit: onAddOption,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(DynamicForm, {\n    fields: optionsFields,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    type: \"submit\",\n    label: \"Add Option\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 15\n    }\n  })))), /*#__PURE__*/React.createElement(Button, {\n    label: \"Save\",\n    onClick: onSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 7\n    }\n  }));\n};\nexport default {};","map":{"version":3,"sources":["/Users/sherikwong/Desktop/okay-inventory/src/components/features/model/new/new-model.tsx"],"names":["DynamicForm","EFieldType","React","useEffect","useReducer","useState","transformEnumToSelectOptions","Button","Form","Container","optionsForm","name","newFieldForm","type","radioGroup","options","NewModel","modelName","setModelName","optionsFields","setOptionsFields","setOptions","hasOptions","select","fields","setFields","previous","action","field","shallowCopy","Map","_field","set","delete","gottenField","get","console","log","fieldsAsArray","Array","from","map","value","addField","length","onSubmit","newModelForm","onChange","target","values","label","onAddOption"],"mappings":"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","sourcesContent":["import { DynamicForm } from '../../../dynamic-form/dynamic-form';\nimport {\n  EFieldType,\n  IField,\n  ISelectOption,\n} from '../../../../types/form/field';\nimport React, { Reducer, useEffect, useReducer, useState } from 'react';\nimport { transformEnumToSelectOptions } from '../../../../utils/transformEnumToSelectOptions';\nimport { Box, Button, Form, FormField, TextInput } from 'grommet';\nimport { modelsDB } from '../../../../database/models';\nimport { Container } from '../../../reusable/container';\n\ninterface IReducer {\n  action: 'increment' | 'decrement' | 'add' | 'delete' | 'modify';\n  field: IField;\n}\n\nconst optionsForm = [\n  {\n    name: 'label',\n  },\n  {\n    name: 'value',\n  },\n];\n\nconst newFieldForm: IField[] = [\n  {\n    name: 'name',\n  },\n  {\n    name: 'type',\n    type: EFieldType.radioGroup,\n    options: transformEnumToSelectOptions(EFieldType),\n  },\n];\n\nexport const NewModel = () => {\n  const [modelName, setModelName] = useState('');\n  const [optionsFields, setOptionsFields] = useState<IField[]>([]);\n  const [options, setOptions] = useState<ISelectOption[]>([]);\n\n  const hasOptions = (type) =>\n    type === EFieldType.select || type === EFieldType.radioGroup;\n\n  const [fields, setFields] = useReducer<\n    Reducer<Map<string, IField>, IReducer>\n  >((previous, { action, field }) => {\n    const shallowCopy = new Map(previous);\n\n    switch (action) {\n      case 'add':\n        let _field = { ...field };\n\n        if (hasOptions(field.type)) {\n          _field = { ..._field, options };\n        }\n\n        shallowCopy.set(field.name, _field);\n        // setOptions([]);\n        break;\n      case 'delete':\n        shallowCopy.delete(field.name);\n        break;\n      case 'modify':\n        const gottenField = shallowCopy.get(field.name);\n        shallowCopy.set(field.name, {\n          ...gottenField,\n          ...field,\n        });\n    }\n\n    return shallowCopy;\n  }, new Map([]));\n\n  useEffect(() => {\n    console.log(fields);\n  }, [fields]);\n\n  const fieldsAsArray = Array.from(fields).map(([, value]) => value);\n\n  const addField = ({ value }) => {\n    setFields({\n      action: 'add',\n      field: { ...value, ...(options.length ? options : {}) },\n    });\n    setOptions([]);\n  };\n\n  const onSubmit = () => {\n    console.log(modelName, fieldsAsArray);\n    // modelsDB.add({\n    //   name: modelName,\n    //   fields: fieldsAsArray,\n    // });\n  };\n\n  const newModelForm: IField[] = [\n    {\n      name: 'Form Name',\n      value: modelName,\n      onChange: (value) => setModelName(value.target.value),\n    },\n  ];\n\n  const onChange = (values: any) => {\n    const { type, label, value, name } = values;\n\n    setOptionsFields(hasOptions(type) ? optionsForm : []);\n  };\n\n  const onAddOption: any = ({ value }) => {\n    setOptions([...options, value]);\n  };\n\n  return (\n    <>\n      <h1>New Model</h1>\n\n      <DynamicForm fields={newModelForm} />\n\n      {fields && (\n        <Container>\n          <DynamicForm fields={fieldsAsArray} />\n        </Container>\n      )}\n\n      <Container>\n        <Form onSubmit={addField}>\n          <DynamicForm fields={newFieldForm} />\n          <Button type=\"submit\" label=\"Add Field\" />\n        </Form>\n      </Container>\n\n      {options.length && (\n        <Container>\n          <h1>Options</h1>\n          {options.map(({ value, label }) => (\n            <>\n              {label}: {value}\n            </>\n          ))}\n        </Container>\n      )}\n\n      {optionsFields.length && (\n        <Container>\n          <Form onSubmit={onAddOption}>\n            <Container>\n              <DynamicForm fields={optionsFields} />\n              <Button type=\"submit\" label=\"Add Option\" />\n            </Container>\n          </Form>\n        </Container>\n      )}\n\n      <Button label=\"Save\" onClick={onSubmit} />\n    </>\n  );\n};\n\nexport default {};\n"]},"metadata":{},"sourceType":"module"}