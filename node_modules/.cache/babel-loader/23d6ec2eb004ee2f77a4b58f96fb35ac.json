{"ast":null,"code":"/*! \n * Voca string library 1.4.0\n * https://vocajs.com\n *\n * Copyright Dmitri Pavlutin and other contributors\n * Released under the MIT license\n */\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() : typeof define === 'function' && define.amd ? define(factory) : global.v = factory();\n})(this, function () {\n  'use strict';\n  /**\n   * Checks if `value` is `null` or `undefined`\n   *\n   * @ignore\n   * @function isNil\n   * @param {*} value The object to check\n   * @return {boolean} Returns `true` is `value` is `undefined` or `null`, `false` otherwise\n   */\n\n  function isNil(value) {\n    return value === undefined || value === null;\n  }\n  /**\n   * Converts the `value` to a boolean. If `value` is `undefined` or `null`, returns `defaultValue`.\n   *\n   * @ignore\n   * @function toBoolean\n   * @param {*} value The value to convert.\n   * @param {boolean} [defaultValue=false] The default value.\n   * @return {boolean} Returns the coercion to boolean.\n   */\n\n\n  function coerceToBoolean(value) {\n    var defaultValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n    if (isNil(value)) {\n      return defaultValue;\n    }\n\n    return Boolean(value);\n  }\n  /**\n   * Checks whether `subject` is a string primitive type.\n   *\n   * @function isString\n   * @static\n   * @since 1.0.0\n   * @memberOf Query\n   * @param {string} subject The value to verify.\n   * @return {boolean} Returns `true` if `subject` is string primitive type or `false` otherwise.\n   * @example\n   * v.isString('vacation');\n   * // => true\n   *\n   * v.isString(560);\n   * // => false\n   */\n\n\n  function isString(subject) {\n    return typeof subject === 'string';\n  }\n  /**\n   * Get the string representation of the `value`.\n   * Converts the `value` to string.\n   * If `value` is `null` or `undefined`, return `defaultValue`.\n   *\n   * @ignore\n   * @function toString\n   * @param {*} value             The value to convert.\n   * @param {*} [defaultValue=''] The default value to return.\n   * @return {string|null}        Returns the string representation of `value`. Returns `defaultValue` if `value` is\n   *                              `null` or `undefined`.\n   */\n\n\n  function coerceToString(value) {\n    var defaultValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n\n    if (isNil(value)) {\n      return defaultValue;\n    }\n\n    if (isString(value)) {\n      return value;\n    }\n\n    return String(value);\n  }\n  /**\n   * Converts the first character of `subject` to upper case. If `restToLower` is `true`, convert the rest of\n   * `subject` to lower case.\n   *\n   * @function capitalize\n   * @static\n   * @since 1.0.0\n   * @memberOf Case\n   * @param  {string}  [subject='']        The string to capitalize.\n   * @param  {boolean} [restToLower=false] Convert the rest of `subject` to lower case.\n   * @return {string}                      Returns the capitalized string.\n   * @example\n   * v.capitalize('apple');\n   * // => 'Apple'\n   *\n   * v.capitalize('aPPle', true);\n   * // => 'Apple'\n   */\n\n\n  function capitalize(subject, restToLower) {\n    var subjectString = coerceToString(subject);\n    var restToLowerCaseBoolean = coerceToBoolean(restToLower);\n\n    if (subjectString === '') {\n      return '';\n    }\n\n    if (restToLowerCaseBoolean) {\n      subjectString = subjectString.toLowerCase();\n    }\n\n    return subjectString.substr(0, 1).toUpperCase() + subjectString.substr(1);\n  }\n  /**\n   * Converts the `subject` to lower case.\n   *\n   * @function lowerCase\n   * @static\n   * @since 1.0.0\n   * @memberOf Case\n   * @param  {string} [subject=''] The string to convert to lower case.\n   * @return {string}              Returns the lower case string.\n   * @example\n   * v.lowerCase('Green');\n   * // => 'green'\n   *\n   * v.lowerCase('BLUE');\n   * // => 'blue'\n   */\n\n\n  function lowerCase(subject) {\n    var subjectString = coerceToString(subject, '');\n    return subjectString.toLowerCase();\n  }\n  /**\n   * A regular expression string matching digits\n   *\n   * @type {string}\n   * @ignore\n   */\n\n\n  var digit = '\\\\d';\n  /**\n   * A regular expression string matching whitespace\n   *\n   * @type {string}\n   * @ignore\n   */\n\n  var whitespace = '\\\\s\\\\uFEFF\\\\xA0';\n  /**\n   * A regular expression string matching high surrogate\n   *\n   * @type {string}\n   * @ignore\n   */\n\n  var highSurrogate = '\\\\uD800-\\\\uDBFF';\n  /**\n   * A regular expression string matching low surrogate\n   *\n   * @type {string}\n   * @ignore\n   */\n\n  var lowSurrogate = '\\\\uDC00-\\\\uDFFF';\n  /**\n   * A regular expression string matching diacritical mark\n   *\n   * @type {string}\n   * @ignore\n   */\n\n  var diacriticalMark = '\\\\u0300-\\\\u036F\\\\u1AB0-\\\\u1AFF\\\\u1DC0-\\\\u1DFF\\\\u20D0-\\\\u20FF\\\\uFE20-\\\\uFE2F';\n  /**\n   * A regular expression to match the base character for a combining mark\n   *\n   * @type {string}\n   * @ignore\n   */\n\n  var base = '\\\\0-\\\\u02FF\\\\u0370-\\\\u1AAF\\\\u1B00-\\\\u1DBF\\\\u1E00-\\\\u20CF\\\\u2100-\\\\uD7FF\\\\uE000-\\\\uFE1F\\\\uFE30-\\\\uFFFF';\n  /**\n   * Regular expression to match combining marks\n   *\n   * @see http://unicode.org/faq/char_combmark.html\n   * @type {RegExp}\n   * @ignore\n   */\n\n  var REGEXP_COMBINING_MARKS = new RegExp('([' + base + ']|[' + highSurrogate + '][' + lowSurrogate + ']|[' + highSurrogate + '](?![' + lowSurrogate + '])|(?:[^' + highSurrogate + ']|^)[' + lowSurrogate + '])([' + diacriticalMark + ']+)', 'g');\n  /**\n   * Regular expression to match surrogate pairs\n   *\n   * @see http://www.unicode.org/faq/utf_bom.html#utf16-2\n   * @type {RegExp}\n   * @ignore\n   */\n\n  var REGEXP_SURROGATE_PAIRS = new RegExp('([' + highSurrogate + '])([' + lowSurrogate + '])', 'g');\n  /**\n   * Regular expression to match a unicode character\n   *\n   * @type {RegExp}\n   * @ignore\n   */\n\n  var REGEXP_UNICODE_CHARACTER = new RegExp('((?:[' + base + ']|[' + highSurrogate + '][' + lowSurrogate + ']|[' + highSurrogate + '](?![' + lowSurrogate + '])|(?:[^' + highSurrogate + ']|^)[' + lowSurrogate + '])(?:[' + diacriticalMark + ']+))|\\\n([' + highSurrogate + '][' + lowSurrogate + '])|\\\n([\\\\n\\\\r\\\\u2028\\\\u2029])|\\\n(.)', 'g');\n  /**\n   * Regular expression to match whitespaces\n   *\n   * @type {RegExp}\n   * @ignore\n   */\n\n  var REGEXP_WHITESPACE = new RegExp('[' + whitespace + ']');\n  /**\n   * Regular expression to match whitespaces from the left side\n   *\n   * @type {RegExp}\n   * @ignore\n   */\n\n  var REGEXP_TRIM_LEFT = new RegExp('^[' + whitespace + ']+');\n  /**\n   * Regular expression to match whitespaces from the right side\n   *\n   * @type {RegExp}\n   * @ignore\n   */\n\n  var REGEXP_TRIM_RIGHT = new RegExp('[' + whitespace + ']+$');\n  /**\n   * Regular expression to match digit characters\n   *\n   * @type {RegExp}\n   * @ignore\n   */\n\n  var REGEXP_DIGIT = new RegExp('^' + digit + '+$');\n  /**\n   * Regular expression to match regular expression special characters\n   *\n   * @type {RegExp}\n   * @ignore\n   */\n\n  var REGEXP_SPECIAL_CHARACTERS = /[-[\\]{}()*+!<=:?./\\\\^$|#,]/g;\n  /**\n   * Regular expression to match not latin characters\n   *\n   * @type {RegExp}\n   * @ignore\n   */\n\n  var REGEXP_NON_LATIN = /[^A-Za-z0-9]/g;\n  /**\n   * Regular expression to match HTML special characters.\n   *\n   * @type {RegExp}\n   * @ignore\n   */\n\n  var REGEXP_HTML_SPECIAL_CHARACTERS = /[<>&\"'`]/g;\n  /**\n   * Regular expression to match sprintf format string\n   *\n   * @type {RegExp}\n   * @ignore\n   */\n\n  var REGEXP_CONVERSION_SPECIFICATION = /(%{1,2})(?:(\\d+)\\$)?(\\+)?([ 0]|'.{1})?(-)?(\\d+)?(?:\\.(\\d+))?([bcdiouxXeEfgGs])?/g;\n  /**\n   * Regular expression to match trailing zeros in a number\n   *\n   * @type {RegExp}\n   * @ignore\n   */\n\n  var REGEXP_TRAILING_ZEROS = /\\.?0+$/g;\n  /**\n   * Regular expression to match flags from a regular expression.\n   *\n   * @type {RegExp}\n   * @ignore\n   */\n\n  var REGEXP_FLAGS = /[gimuy]*$/;\n  /**\n   * Regular expression to match a list of tags.\n   *\n   * @see https://html.spec.whatwg.org/multipage/syntax.html#syntax-tag-name\n   * @type {RegExp}\n   * @ignore\n   */\n\n  var REGEXP_TAG_LIST = /<([A-Za-z0-9]+)>/g;\n  /**\n   * A regular expression to match the General Punctuation Unicode block\n   *\n   * @type {string}\n   * @ignore\n   */\n\n  var generalPunctuationBlock = '\\\\u2000-\\\\u206F';\n  /**\n   * A regular expression to match non characters from from Basic Latin and Latin-1 Supplement Unicode blocks\n   *\n   * @type {string}\n   * @ignore\n   */\n\n  var nonCharacter = '\\\\x00-\\\\x2F\\\\x3A-\\\\x40\\\\x5B-\\\\x60\\\\x7b-\\\\xBF\\\\xD7\\\\xF7';\n  /**\n   * A regular expression to match the dingbat Unicode block\n   *\n   * @type {string}\n   * @ignore\n   */\n\n  var dingbatBlock = '\\\\u2700-\\\\u27BF';\n  /**\n   * A regular expression string that matches lower case letters: LATIN\n   *\n   * @type {string}\n   * @ignore\n   */\n\n  var lowerCaseLetter = 'a-z\\\\xB5\\\\xDF-\\\\xF6\\\\xF8-\\\\xFF\\\\u0101\\\\u0103\\\\u0105\\\\u0107\\\\u0109\\\\u010B\\\\u010D\\\\u010F\\\\u0111\\\\u0113\\\\u0115\\\\u0117\\\\u0119\\\\u011B\\\\u011D\\\\u011F\\\\u0121\\\\u0123\\\\u0125\\\\u0127\\\\u0129\\\\u012B\\\\u012D\\\\u012F\\\\u0131\\\\u0133\\\\u0135\\\\u0137\\\\u0138\\\\u013A\\\\u013C\\\\u013E\\\\u0140\\\\u0142\\\\u0144\\\\u0146\\\\u0148\\\\u0149\\\\u014B\\\\u014D\\\\u014F\\\\u0151\\\\u0153\\\\u0155\\\\u0157\\\\u0159\\\\u015B\\\\u015D\\\\u015F\\\\u0161\\\\u0163\\\\u0165\\\\u0167\\\\u0169\\\\u016B\\\\u016D\\\\u016F\\\\u0171\\\\u0173\\\\u0175\\\\u0177\\\\u017A\\\\u017C\\\\u017E-\\\\u0180\\\\u0183\\\\u0185\\\\u0188\\\\u018C\\\\u018D\\\\u0192\\\\u0195\\\\u0199-\\\\u019B\\\\u019E\\\\u01A1\\\\u01A3\\\\u01A5\\\\u01A8\\\\u01AA\\\\u01AB\\\\u01AD\\\\u01B0\\\\u01B4\\\\u01B6\\\\u01B9\\\\u01BA\\\\u01BD-\\\\u01BF\\\\u01C6\\\\u01C9\\\\u01CC\\\\u01CE\\\\u01D0\\\\u01D2\\\\u01D4\\\\u01D6\\\\u01D8\\\\u01DA\\\\u01DC\\\\u01DD\\\\u01DF\\\\u01E1\\\\u01E3\\\\u01E5\\\\u01E7\\\\u01E9\\\\u01EB\\\\u01ED\\\\u01EF\\\\u01F0\\\\u01F3\\\\u01F5\\\\u01F9\\\\u01FB\\\\u01FD\\\\u01FF\\\\u0201\\\\u0203\\\\u0205\\\\u0207\\\\u0209\\\\u020B\\\\u020D\\\\u020F\\\\u0211\\\\u0213\\\\u0215\\\\u0217\\\\u0219\\\\u021B\\\\u021D\\\\u021F\\\\u0221\\\\u0223\\\\u0225\\\\u0227\\\\u0229\\\\u022B\\\\u022D\\\\u022F\\\\u0231\\\\u0233-\\\\u0239\\\\u023C\\\\u023F\\\\u0240\\\\u0242\\\\u0247\\\\u0249\\\\u024B\\\\u024D\\\\u024F';\n  /**\n   * A regular expression string that matches upper case letters: LATIN\n   *\n   * @type {string}\n   * @ignore\n   */\n\n  var upperCaseLetter = '\\\\x41-\\\\x5a\\\\xc0-\\\\xd6\\\\xd8-\\\\xde\\\\u0100\\\\u0102\\\\u0104\\\\u0106\\\\u0108\\\\u010a\\\\u010c\\\\u010e\\\\u0110\\\\u0112\\\\u0114\\\\u0116\\\\u0118\\\\u011a\\\\u011c\\\\u011e\\\\u0120\\\\u0122\\\\u0124\\\\u0126\\\\u0128\\\\u012a\\\\u012c\\\\u012e\\\\u0130\\\\u0132\\\\u0134\\\\u0136\\\\u0139\\\\u013b\\\\u013d\\\\u013f\\\\u0141\\\\u0143\\\\u0145\\\\u0147\\\\u014a\\\\u014c\\\\u014e\\\\u0150\\\\u0152\\\\u0154\\\\u0156\\\\u0158\\\\u015a\\\\u015c\\\\u015e\\\\u0160\\\\u0162\\\\u0164\\\\u0166\\\\u0168\\\\u016a\\\\u016c\\\\u016e\\\\u0170\\\\u0172\\\\u0174\\\\u0176\\\\u0178\\\\u0179\\\\u017b\\\\u017d\\\\u0181\\\\u0182\\\\u0184\\\\u0186\\\\u0187\\\\u0189-\\\\u018b\\\\u018e-\\\\u0191\\\\u0193\\\\u0194\\\\u0196-\\\\u0198\\\\u019c\\\\u019d\\\\u019f\\\\u01a0\\\\u01a2\\\\u01a4\\\\u01a6\\\\u01a7\\\\u01a9\\\\u01ac\\\\u01ae\\\\u01af\\\\u01b1-\\\\u01b3\\\\u01b5\\\\u01b7\\\\u01b8\\\\u01bc\\\\u01c4\\\\u01c5\\\\u01c7\\\\u01c8\\\\u01ca\\\\u01cb\\\\u01cd\\\\u01cf\\\\u01d1\\\\u01d3\\\\u01d5\\\\u01d7\\\\u01d9\\\\u01db\\\\u01de\\\\u01e0\\\\u01e2\\\\u01e4\\\\u01e6\\\\u01e8\\\\u01ea\\\\u01ec\\\\u01ee\\\\u01f1\\\\u01f2\\\\u01f4\\\\u01f6-\\\\u01f8\\\\u01fa\\\\u01fc\\\\u01fe\\\\u0200\\\\u0202\\\\u0204\\\\u0206\\\\u0208\\\\u020a\\\\u020c\\\\u020e\\\\u0210\\\\u0212\\\\u0214\\\\u0216\\\\u0218\\\\u021a\\\\u021c\\\\u021e\\\\u0220\\\\u0222\\\\u0224\\\\u0226\\\\u0228\\\\u022a\\\\u022c\\\\u022e\\\\u0230\\\\u0232\\\\u023a\\\\u023b\\\\u023d\\\\u023e\\\\u0241\\\\u0243-\\\\u0246\\\\u0248\\\\u024a\\\\u024c\\\\u024e';\n  /**\n   * Regular expression to match Unicode words\n   *\n   * @type {RegExp}\n   * @ignore\n   */\n\n  var REGEXP_WORD = new RegExp('(?:[' + upperCaseLetter + '][' + diacriticalMark + ']*)?(?:[' + lowerCaseLetter + '][' + diacriticalMark + ']*)+|\\\n(?:[' + upperCaseLetter + '][' + diacriticalMark + ']*)+(?![' + lowerCaseLetter + '])|\\\n[' + digit + ']+|\\\n[' + dingbatBlock + ']|\\\n[^' + nonCharacter + generalPunctuationBlock + whitespace + ']+', 'g');\n  /**\n   * Regular expression to match words from Basic Latin and Latin-1 Supplement blocks\n   *\n   * @type {RegExp}\n   * @ignore\n   */\n\n  var REGEXP_LATIN_WORD = /[A-Z\\xC0-\\xD6\\xD8-\\xDE]?[a-z\\xDF-\\xF6\\xF8-\\xFF]+|[A-Z\\xC0-\\xD6\\xD8-\\xDE]+(?![a-z\\xDF-\\xF6\\xF8-\\xFF])|\\d+/g;\n  /**\n   * Regular expression to match alpha characters\n   *\n   * @see http://stackoverflow.com/a/22075070/1894471\n   * @type {RegExp}\n   * @ignore\n   */\n\n  var REGEXP_ALPHA = new RegExp('^(?:[' + lowerCaseLetter + upperCaseLetter + '][' + diacriticalMark + ']*)+$');\n  /**\n   * Regular expression to match alpha and digit characters\n   *\n   * @see http://stackoverflow.com/a/22075070/1894471\n   * @type {RegExp}\n   * @ignore\n   */\n\n  var REGEXP_ALPHA_DIGIT = new RegExp('^((?:[' + lowerCaseLetter + upperCaseLetter + '][' + diacriticalMark + ']*)|[' + digit + '])+$');\n  /**\n   * Regular expression to match Extended ASCII characters, i.e. the first 255\n   *\n   * @type {RegExp}\n   * @ignore\n   */\n\n  var REGEXP_EXTENDED_ASCII = /^[\\x01-\\xFF]*$/;\n  /**\n   * Verifies if `value` is `undefined` or `null` and returns `defaultValue`. In other case returns `value`.\n   *\n   * @ignore\n   * @function nilDefault\n   * @param {*} value The value to verify.\n   * @param {*} defaultValue The default value.\n   * @return {*} Returns `defaultValue` if `value` is `undefined` or `null`, otherwise `defaultValue`.\n   */\n\n  function nilDefault(value, defaultValue) {\n    return value == null ? defaultValue : value;\n  }\n  /**\n   * Get the string representation of the `value`.\n   * Converts the `value` to string.\n   *\n   * @ignore\n   * @function toString\n   * @param {*} value             The value to convert.\n   * @return {string|null}        Returns the string representation of `value`.\n   */\n\n\n  function toString(value) {\n    if (isNil(value)) {\n      return null;\n    }\n\n    if (isString(value)) {\n      return value;\n    }\n\n    return String(value);\n  }\n  /**\n   * Splits `subject` into an array of words.\n   *\n   * @function words\n   * @static\n   * @since 1.0.0\n   * @memberOf Split\n   * @param {string} [subject=''] The string to split into words.\n   * @param {string|RegExp} [pattern] The pattern to watch words. If `pattern` is not RegExp, it is transformed to `new RegExp(pattern, flags)`.\n   * @param {string} [flags=''] The regular expression flags. Applies when `pattern` is string type.\n   * @return {Array} Returns the array of words.\n   * @example\n   * v.words('gravity can cross dimensions');\n   * // => ['gravity', 'can', 'cross', 'dimensions']\n   *\n   * v.words('GravityCanCrossDimensions');\n   * // => ['Gravity', 'Can', 'Cross', 'Dimensions']\n   *\n   * v.words('Gravity - can cross dimensions!');\n   * // => ['Gravity', 'can', 'cross', 'dimensions']\n   *\n   * v.words('Earth gravity', /[^\\s]+/g);\n   * // => ['Earth', 'gravity']\n   */\n\n\n  function words(subject, pattern, flags) {\n    var subjectString = coerceToString(subject);\n    var patternRegExp = void 0;\n\n    if (isNil(pattern)) {\n      patternRegExp = REGEXP_EXTENDED_ASCII.test(subjectString) ? REGEXP_LATIN_WORD : REGEXP_WORD;\n    } else if (pattern instanceof RegExp) {\n      patternRegExp = pattern;\n    } else {\n      var flagsString = toString(nilDefault(flags, ''));\n      patternRegExp = new RegExp(toString(pattern), flagsString);\n    }\n\n    return nilDefault(subjectString.match(patternRegExp), []);\n  }\n  /**\n   * Transforms the `word` into camel case chunk.\n   *\n   * @param  {string} word  The word string\n   * @param  {number} index The index of the word in phrase.\n   * @return {string}       The transformed word.\n   * @ignore\n   */\n\n\n  function wordToCamel(word, index) {\n    return index === 0 ? lowerCase(word) : capitalize(word, true);\n  }\n  /**\n   * Converts the `subject` to <a href=\"https://en.wikipedia.org/wiki/CamelCase\">camel case</a>.\n   *\n   * @function camelCase\n   * @static\n   * @since 1.0.0\n   * @memberOf Case\n   * @param  {string} [subject=''] The string to convert to camel case.\n   * @return {string}              The camel case string.\n   * @example\n   * v.camelCase('bird flight');\n   * // => 'birdFlight'\n   *\n   * v.camelCase('BirdFlight');\n   * // => 'birdFlight'\n   *\n   * v.camelCase('-BIRD-FLIGHT-');\n   * // => 'birdFlight'\n   */\n\n\n  function camelCase(subject) {\n    var subjectString = coerceToString(subject);\n\n    if (subjectString === '') {\n      return '';\n    }\n\n    return words(subjectString).map(wordToCamel).join('');\n  }\n  /**\n   * Converts the first character of `subject` to lower case.\n   *\n   * @function decapitalize\n   * @static\n   * @since 1.0.0\n   * @memberOf Case\n   * @param  {string} [subject=''] The string to decapitalize.\n   * @return {string}              Returns the decapitalized string.\n   * @example\n   * v.decapitalize('Sun');\n   * // => 'sun'\n   *\n   * v.decapitalize('moon');\n   * // => 'moon'\n   */\n\n\n  function decapitalize(subject) {\n    var subjectString = coerceToString(subject);\n\n    if (subjectString === '') {\n      return '';\n    }\n\n    return subjectString.substr(0, 1).toLowerCase() + subjectString.substr(1);\n  }\n  /**\n   * Converts the `subject` to <a href=\"https://en.wikipedia.org/wiki/Letter_case#cite_ref-13\">kebab case</a>,\n   * also called <i>spinal case</i> or <i>lisp case</i>.\n   *\n   * @function kebabCase\n   * @static\n   * @since 1.0.0\n   * @memberOf Case\n   * @param  {string} [subject=''] The string to convert to kebab case.\n   * @return {string}              Returns the kebab case string.\n   * @example\n   * v.kebabCase('goodbye blue sky');\n   * // => 'goodbye-blue-sky'\n   *\n   * v.kebabCase('GoodbyeBlueSky');\n   * // => 'goodbye-blue-sky'\n   *\n   * v.kebabCase('-Goodbye-Blue-Sky-');\n   * // => 'goodbye-blue-sky'\n   */\n\n\n  function kebabCase(subject) {\n    var subjectString = coerceToString(subject);\n\n    if (subjectString === '') {\n      return '';\n    }\n\n    return words(subjectString).map(lowerCase).join('-');\n  }\n  /**\n   * Converts the `subject` to <a href=\"https://en.wikipedia.org/wiki/Snake_case\">snake case</a>.\n   *\n   * @function snakeCase\n   * @static\n   * @since 1.0.0\n   * @memberOf Case\n   * @param  {string} [subject=''] The string to convert to snake case.\n   * @return {string}              Returns the snake case string.\n   * @example\n   * v.snakeCase('learning to fly');\n   * // => 'learning_to_fly'\n   *\n   * v.snakeCase('LearningToFly');\n   * // => 'learning_to_fly'\n   *\n   * v.snakeCase('-Learning-To-Fly-');\n   * // => 'learning_to_fly'\n   */\n\n\n  function snakeCase(subject) {\n    var subjectString = coerceToString(subject);\n\n    if (subjectString === '') {\n      return '';\n    }\n\n    return words(subjectString).map(lowerCase).join('_');\n  }\n  /**\n   * Converts the `subject` to upper case.\n   *\n   * @function upperCase\n   * @static\n   * @since 1.0.0\n   * @memberOf Case\n   * @param  {string} [subject=''] The string to convert to upper case.\n   * @return {string}              Returns the upper case string.\n   * @example\n   * v.upperCase('school');\n   * // => 'SCHOOL'\n   */\n\n\n  function upperCase(subject) {\n    var subjectString = coerceToString(subject);\n    return subjectString.toUpperCase();\n  }\n  /**\n   * Converts the uppercase alpha caracters of `subject` to lowercase and lowercase \n   * characters to uppercase.\n   *\n   * @function swapCase\n   * @static\n   * @since 1.3.0\n   * @memberOf Case\n   * @param  {string} [subject=''] The string to swap the case.\n   * @return {string}              Returns the converted string.\n   * @example\n   * v.swapCase('League of Shadows');\n   * // => 'lEAGUE OF sHADOWS'\n   *\n   * v.swapCase('2 Bees');\n   * // => '2 bEES'\n   */\n\n\n  function swapCase(subject) {\n    var subjectString = coerceToString(subject);\n    return subjectString.split('').reduce(swapAndConcat, '');\n  }\n\n  function swapAndConcat(swapped, character) {\n    var lowerCase = character.toLowerCase();\n    var upperCase = character.toUpperCase();\n    return swapped + (character === lowerCase ? upperCase : lowerCase);\n  }\n  /**\n   * Converts the subject to title case.\n   *\n   * @function titleCase\n   * @static\n   * @since 1.4.0\n   * @memberOf Case\n   * @param  {string} [subject=''] The string to convert to title case.\n   * @param  {Array}  [noSplit]    Do not split words at the specified characters.\n   * @return {string}              Returns the title case string.\n   * @example\n   * v.titleCase('learning to fly');\n   * // => 'Learning To Fly'\n   *\n   * v.titleCase('jean-luc is good-looking', ['-']);\n   * // => 'Jean-luc Is Good-looking'\n   */\n\n\n  function titleCase(subject, noSplit) {\n    var subjectString = coerceToString(subject);\n    var noSplitArray = Array.isArray(noSplit) ? noSplit : [];\n    var wordsRegExp = REGEXP_EXTENDED_ASCII.test(subjectString) ? REGEXP_LATIN_WORD : REGEXP_WORD;\n    return subjectString.replace(wordsRegExp, function (word, index) {\n      var isNoSplit = index > 0 && noSplitArray.indexOf(subjectString[index - 1]) >= 0;\n      return isNoSplit ? word.toLowerCase() : capitalize(word, true);\n    });\n  }\n  /**\n   * Clip the number to interval `downLimit` to `upLimit`.\n   *\n   * @ignore\n   * @function clipNumber\n   * @param {number} value The number to clip\n   * @param {number} downLimit The down limit\n   * @param {number} upLimit The upper limit\n   * @return {number} The clipped number\n   */\n\n\n  function clipNumber(value, downLimit, upLimit) {\n    if (value <= downLimit) {\n      return downLimit;\n    }\n\n    if (value >= upLimit) {\n      return upLimit;\n    }\n\n    return value;\n  }\n  /**\n   * Max save integer value\n   *\n   * @ignore\n   * @type {number}\n   */\n\n\n  var MAX_SAFE_INTEGER = 0x1fffffffffffff;\n  /**\n   * Transforms `value` to an integer.\n   *\n   * @ignore\n   * @function toInteger\n   * @param {number} value The number to transform.\n   * @returns {number} Returns the transformed integer.\n   */\n\n  function toInteger(value) {\n    if (value === Infinity) {\n      return MAX_SAFE_INTEGER;\n    }\n\n    if (value === -Infinity) {\n      return -MAX_SAFE_INTEGER;\n    }\n\n    return ~~value;\n  }\n  /**\n   * Truncates `subject` to a new `length`.\n   *\n   * @function truncate\n   * @static\n   * @since 1.0.0\n   * @memberOf Chop\n   * @param  {string} [subject=''] The string to truncate.\n   * @param  {int}    length       The length to truncate the string.\n   * @param  {string} [end='...']  The string to be added at the end.\n   * @return {string}              Returns the truncated string.\n   * @example\n   * v.truncate('Once upon a time', 7);\n   * // => 'Once...'\n   *\n   * v.truncate('Good day, Little Red Riding Hood', 14, ' (...)');\n   * // => 'Good day (...)'\n   *\n   * v.truncate('Once upon', 10);\n   * // => 'Once upon'\n   */\n\n\n  function truncate(subject, length, end) {\n    var subjectString = coerceToString(subject);\n    var lengthInt = isNil(length) ? subjectString.length : clipNumber(toInteger(length), 0, MAX_SAFE_INTEGER);\n    var endString = coerceToString(end, '...');\n\n    if (lengthInt >= subjectString.length) {\n      return subjectString;\n    }\n\n    return subjectString.substr(0, length - endString.length) + endString;\n  }\n  /**\n   * Access a character from `subject` at specified `position`.\n   *\n   * @function charAt\n   * @static\n   * @since 1.0.0\n   * @memberOf Chop\n   * @param  {string} [subject=''] The string to extract from.\n   * @param  {numbers} position The position to get the character.\n   * @return {string} Returns the character at specified position.\n   * @example\n   * v.charAt('helicopter', 0);\n   * // => 'h'\n   *\n   * v.charAt('helicopter', 1);\n   * // => 'e'\n   */\n\n\n  function charAt(subject, position) {\n    var subjectString = coerceToString(subject);\n    return subjectString.charAt(position);\n  }\n\n  var HIGH_SURROGATE_START = 0xD800;\n  var HIGH_SURROGATE_END = 0xDBFF;\n  var LOW_SURROGATE_START = 0xDC00;\n  var LOW_SURROGATE_END = 0xDFFF;\n  /**\n   * Checks if `codePoint` is a high-surrogate number from range 0xD800 to 0xDBFF.\n   *\n   * @ignore\n   * @param {number} codePoint The code point number to be verified\n   * @return {boolean} Returns a boolean whether `codePoint` is a high-surrogate number.\n   */\n\n  function isHighSurrogate(codePoint) {\n    return codePoint >= HIGH_SURROGATE_START && codePoint <= HIGH_SURROGATE_END;\n  }\n  /**\n   * Checks if `codePoint` is a low-surrogate number from range 0xDC00 to 0xDFFF.\n   *\n   * @ignore\n   * @param {number} codePoint The code point number to be verified\n   * @return {boolean} Returns a boolean whether `codePoint` is a low-surrogate number.\n   */\n\n\n  function isLowSurrogate(codePoint) {\n    return codePoint >= LOW_SURROGATE_START && codePoint <= LOW_SURROGATE_END;\n  }\n  /**\n   * Get the astral code point number based on surrogate pair numbers.\n   *\n   * @ignore\n   * @param {number} highSurrogate The high-surrogate code point number.\n   * @param {number} lowSurrogate The low-surrogate code point number.\n   * @return {number} Returns the astral symbol number.\n   */\n\n\n  function getAstralNumberFromSurrogatePair(highSurrogate, lowSurrogate) {\n    return (highSurrogate - HIGH_SURROGATE_START) * 0x400 + lowSurrogate - LOW_SURROGATE_START + 0x10000;\n  }\n  /**\n   * Get the number representation of the `value`.\n   * Converts the `value` to number.\n   * If `value` is `null` or `undefined`, return `defaultValue`.\n   *\n   * @ignore\n   * @function toString\n   * @param {*} value             The value to convert.\n   * @param {*} [defaultValue=''] The default value to return.\n   * @return {number|null}        Returns the number representation of `value`. Returns `defaultValue` if `value` is\n   *                              `null` or `undefined`.\n   */\n\n\n  function coerceToNumber(value) {\n    var defaultValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n\n    if (isNil(value)) {\n      return defaultValue;\n    }\n\n    if (typeof value === 'number') {\n      return value;\n    }\n\n    return Number(value);\n  }\n  /**\n   * If `value` is `NaN`, return `defaultValue`. In other case returns `value`.\n   *\n   * @ignore\n   * @function nanDefault\n   * @param {*} value The value to verify.\n   * @param {*} defaultValue The default value.\n   * @return {*} Returns `defaultValue` if `value` is `NaN`, otherwise `defaultValue`.\n   */\n\n\n  function nanDefault(value, defaultValue) {\n    return value !== value ? defaultValue : value;\n  }\n  /**\n   * Get the Unicode code point value of the character at `position`. <br/>\n   * If a valid UTF-16 <a href=\"https://rainsoft.io/what-every-javascript-developer-should-know-about-unicode/#24surrogatepairs\">\n   * surrogate pair</a> starts at `position`, the\n   * <a href=\"https://rainsoft.io/what-every-javascript-developer-should-know-about-unicode/#astralplanes\">astral code point</a>\n   * value at `position` is returned.\n   *\n   * @function codePointAt\n   * @static\n   * @since 1.0.0\n   * @memberOf Chop\n   * @param  {string} [subject=''] The string to extract from.\n   * @param  {number} position The position to get the code point number.\n   * @return {number} Returns a non-negative number less than or equal to `0x10FFFF`.\n   * @example\n   * v.codePointAt('rain', 1);\n   * // => 97, or 0x0061\n   *\n   * v.codePointAt('\\uD83D\\uDE00 is smile', 0); // or '😀 is smile'\n   * // => 128512, or 0x1F600\n   */\n\n\n  function codePointAt(subject, position) {\n    var subjectString = coerceToString(subject);\n    var subjectStringLength = subjectString.length;\n    var positionNumber = coerceToNumber(position);\n    positionNumber = nanDefault(positionNumber, 0);\n\n    if (positionNumber < 0 || positionNumber >= subjectStringLength) {\n      return undefined;\n    }\n\n    var firstCodePoint = subjectString.charCodeAt(positionNumber);\n    var secondCodePoint = void 0;\n\n    if (isHighSurrogate(firstCodePoint) && subjectStringLength > positionNumber + 1) {\n      secondCodePoint = subjectString.charCodeAt(positionNumber + 1);\n\n      if (isLowSurrogate(secondCodePoint)) {\n        return getAstralNumberFromSurrogatePair(firstCodePoint, secondCodePoint);\n      }\n    }\n\n    return firstCodePoint;\n  }\n  /**\n   * Extracts the first `length` characters from `subject`.\n   *\n   * @function first\n   * @static\n   * @since 1.0.0\n   * @memberOf Chop\n   * @param  {string} [subject=''] The string to extract from.\n   * @param  {int}    [length=1]   The number of characters to extract.\n   * @return {string}              Returns the first characters string.\n   * @example\n   * v.first('helicopter');\n   * // => 'h'\n   *\n   * v.first('vehicle', 2);\n   * // => 've'\n   *\n   * v.first('car', 5);\n   * // => 'car'\n   */\n\n\n  function first(subject, length) {\n    var subjectString = coerceToString(subject);\n    var lengthInt = isNil(length) ? 1 : clipNumber(toInteger(length), 0, MAX_SAFE_INTEGER);\n\n    if (subjectString.length <= lengthInt) {\n      return subjectString;\n    }\n\n    return subjectString.substr(0, lengthInt);\n  }\n  /**\n   * Get a grapheme from `subject` at specified `position` taking care of\n   * <a href=\"https://rainsoft.io/what-every-javascript-developer-should-know-about-unicode/#24surrogatepairs\">surrogate pairs</a> and\n   * <a href=\"https://rainsoft.io/what-every-javascript-developer-should-know-about-unicode/#25combiningmarks\">combining marks</a>.\n   *\n   * @function graphemeAt\n   * @static\n   * @since 1.0.0\n   * @memberOf Chop\n   * @param  {string} [subject=''] The string to extract from.\n   * @param  {number} position The position to get the grapheme.\n   * @return {string} Returns the grapheme at specified position.\n   * @example\n   * v.graphemeAt('\\uD835\\uDC00\\uD835\\uDC01', 0); // or '𝐀𝐁'\n   * // => 'A'\n   *\n   * v.graphemeAt('cafe\\u0301', 3); // or 'café'\n   * // => 'é'\n   */\n\n\n  function graphemeAt(subject, position) {\n    var subjectString = coerceToString(subject);\n    var positionNumber = coerceToNumber(position);\n    var graphemeMatch = void 0;\n    var graphemeMatchIndex = 0;\n    positionNumber = nanDefault(positionNumber, 0);\n\n    while ((graphemeMatch = REGEXP_UNICODE_CHARACTER.exec(subjectString)) !== null) {\n      if (graphemeMatchIndex === positionNumber) {\n        REGEXP_UNICODE_CHARACTER.lastIndex = 0;\n        return graphemeMatch[0];\n      }\n\n      graphemeMatchIndex++;\n    }\n\n    return '';\n  }\n  /**\n   * Extracts the last `length` characters from `subject`.\n   *\n   * @function last\n   * @static\n   * @since 1.0.0\n   * @memberOf Chop\n   * @param  {string} [subject=''] The string to extract from.\n   * @param  {int}    [length=1]   The number of characters to extract.\n   * @return {string}              Returns the last characters string.\n   * @example\n   * v.last('helicopter');\n   * // => 'r'\n   *\n   * v.last('vehicle', 2);\n   * // => 'le'\n   *\n   * v.last('car', 5);\n   * // => 'car'\n   */\n\n\n  function last(subject, length) {\n    var subjectString = coerceToString(subject);\n    var lengthInt = isNil(length) ? 1 : clipNumber(toInteger(length), 0, MAX_SAFE_INTEGER);\n\n    if (subjectString.length <= lengthInt) {\n      return subjectString;\n    }\n\n    return subjectString.substr(subjectString.length - lengthInt, lengthInt);\n  }\n  /**\n   * Truncates `subject` to a new `length` and does not break the words. Guarantees that the truncated string is no longer\n   * than `length`.\n   *\n   * @static\n   * @function prune\n   * @since 1.0.0\n   * @memberOf Chop\n   * @param  {string} [subject=''] The string to prune.\n   * @param  {int}    length       The length to prune the string.\n   * @param  {string} [end='...']  The string to be added at the end.\n   * @return {string}              Returns the pruned string.\n   * @example\n   * v.prune('Once upon a time', 7);\n   * // => 'Once...'\n   *\n   * v.prune('Good day, Little Red Riding Hood', 16, ' (more)');\n   * // => 'Good day (more)'\n   *\n   * v.prune('Once upon', 10);\n   * // => 'Once upon'\n   */\n\n\n  function prune(subject, length, end) {\n    var subjectString = coerceToString(subject);\n    var lengthInt = isNil(length) ? subjectString.length : clipNumber(toInteger(length), 0, MAX_SAFE_INTEGER);\n    var endString = coerceToString(end, '...');\n\n    if (lengthInt >= subjectString.length) {\n      return subjectString;\n    }\n\n    var pattern = REGEXP_EXTENDED_ASCII.test(subjectString) ? REGEXP_LATIN_WORD : REGEXP_WORD;\n    var truncatedLength = 0;\n    subjectString.replace(pattern, function (word, offset) {\n      var wordInsertLength = offset + word.length;\n\n      if (wordInsertLength <= lengthInt - endString.length) {\n        truncatedLength = wordInsertLength;\n      }\n    });\n    return subjectString.substr(0, truncatedLength) + endString;\n  }\n  /**\n   * Extracts from `subject` a string from `start` position up to `end` position. The character at `end` position is not\n   * included.\n   *\n   * @function slice\n   * @static\n   * @since 1.0.0\n   * @memberOf Chop\n   * @param  {string} [subject='']         The string to extract from.\n   * @param  {number} start                The position to start extraction. If negative use `subject.length + start`.\n   * @param  {number} [end=subject.length] The position to end extraction. If negative use `subject.length + end`.\n   * @return {string}                      Returns the extracted string.\n   * @note Uses native `String.prototype.slice()`\n   * @example\n   * v.slice('miami', 1);\n   * // => 'iami'\n   *\n   * v.slice('florida', -4);\n   * // => 'rida'\n   *\n   * v.slice('florida', 1, 4);\n   * // => \"lor\"\n   */\n\n\n  function slice(subject, start, end) {\n    return coerceToString(subject).slice(start, end);\n  }\n  /**\n   * Extracts from `subject` a string from `start` position a number of `length` characters.\n   *\n   * @function substr\n   * @static\n   * @since 1.0.0\n   * @memberOf Chop\n   * @param  {string} [subject='']                 The string to extract from.\n   * @param  {number} start                        The position to start extraction.\n   * @param  {number} [length=subject.endOfString] The number of characters to extract. If omitted, extract to the end of `subject`.\n   * @return {string}                              Returns the extracted string.\n   * @note Uses native `String.prototype.substr()`\n   * @example\n   * v.substr('infinite loop', 9);\n   * // => 'loop'\n   *\n   * v.substr('dreams', 2, 2);\n   * // => 'ea'\n   */\n\n\n  function substr(subject, start, length) {\n    return coerceToString(subject).substr(start, length);\n  }\n  /**\n   * Extracts from `subject` a string from `start` position up to `end` position. The character at `end` position is not\n   * included.\n   *\n   * @function substring\n   * @static\n   * @since 1.0.0\n   * @memberOf Chop\n   * @param  {string} [subject='']         The string to extract from.\n   * @param  {number} start                The position to start extraction.\n   * @param  {number} [end=subject.length] The position to end extraction.\n   * @return {string}                      Returns the extracted string.\n   * @note Uses native `String.prototype.substring()`\n   * @example\n   * v.substring('beach', 1);\n   * // => 'each'\n   *\n   * v.substring('ocean', 1, 3);\n   * // => 'ea'\n   */\n\n\n  function substring(subject, start, end) {\n    return coerceToString(subject).substring(start, end);\n  }\n  /**\n   * Counts the characters in `subject`.<br/>\n   *\n   * @function count\n   * @static\n   * @since 1.0.0\n   * @memberOf Count\n   * @param  {string} [subject=''] The string to count characters.\n   * @return {number}              Returns the number of characters in `subject`.\n   * @example\n   * v.count('rain');\n   * // => 4\n   */\n\n\n  function count(subject) {\n    return coerceToString(subject).length;\n  }\n  /**\n   * Counts the graphemes in `subject` taking care of\n   * <a href=\"https://rainsoft.io/what-every-javascript-developer-should-know-about-unicode/#24surrogatepairs\">surrogate pairs</a> and\n   * <a href=\"https://rainsoft.io/what-every-javascript-developer-should-know-about-unicode/#25combiningmarks\">combining marks</a>.\n   *\n   * @function  countGraphemes\n   * @static\n   * @since 1.0.0\n   * @memberOf Count\n   * @param  {string} [subject=''] The string to count graphemes.\n   * @return {number}              Returns the number of graphemes in `subject`.\n   * @example\n   * v.countGraphemes('cafe\\u0301'); // or 'café'\n   * // => 4\n   *\n   * v.countGraphemes('\\uD835\\uDC00\\uD835\\uDC01'); // or '𝐀𝐁'\n   * // => 2\n   *\n   * v.countGraphemes('rain');\n   * // => 4\n   */\n\n\n  function countGrapheme(subject) {\n    return coerceToString(subject).replace(REGEXP_COMBINING_MARKS, '*').replace(REGEXP_SURROGATE_PAIRS, '*').length;\n  }\n  /**\n   * Counts the number of `substring` appearances in `subject`.\n   *\n   * @function countSubstrings\n   * @static\n   * @since 1.0.0\n   * @memberOf Count\n   * @param  {string} [subject=''] The string where to count.\n   * @param  {string} substring    The substring to be counted.\n   * @return {number}              Returns the number of `substring` appearances.\n   * @example\n   * v.countSubstrings('bad boys, bad boys whatcha gonna do?', 'boys');\n   * // => 2\n   *\n   * v.countSubstrings('every dog has its day', 'cat');\n   * // => 0\n   */\n\n\n  function countSubstrings(subject, substring) {\n    var subjectString = coerceToString(subject);\n    var substringString = coerceToString(substring);\n    var substringLength = substringString.length;\n    var count = 0;\n    var matchIndex = 0;\n\n    if (subjectString === '' || substringString === '') {\n      return count;\n    }\n\n    do {\n      matchIndex = subjectString.indexOf(substringString, matchIndex);\n\n      if (matchIndex !== -1) {\n        count++;\n        matchIndex += substringLength;\n      }\n    } while (matchIndex !== -1);\n\n    return count;\n  }\n\n  var reduce = Array.prototype.reduce;\n  /**\n   * Counts the characters in `subject` for which `predicate` returns truthy.\n   *\n   * @function  countWhere\n   * @static\n   * @since 1.0.0\n   * @memberOf Count\n   * @param  {string}   [subject=''] The string to count characters.\n   * @param  {Function} predicate    The predicate function invoked on each character with parameters `(character, index, string)`.\n   * @param  {Object}   [context]    The context to invoke the `predicate`.\n   * @return {number}                Returns the number of characters for which `predicate` returns truthy.\n   * @example\n   * v.countWhere('hola!', v.isAlpha);\n   * // => 4\n   *\n   * v.countWhere('2022', function(character, index, str) {\n   *   return character === '2';\n   * });\n   * // => 3\n   */\n\n  function countWhere(subject, predicate, context) {\n    var subjectString = coerceToString(subject);\n\n    if (subjectString === '' || typeof predicate !== 'function') {\n      return 0;\n    }\n\n    var predicateWithContext = predicate.bind(context);\n    return reduce.call(subjectString, function (countTruthy, character, index) {\n      return predicateWithContext(character, index, subjectString) ? countTruthy + 1 : countTruthy;\n    }, 0);\n  }\n  /**\n   * Counts the number of words in `subject`.\n   *\n   * @function countWords\n   * @static\n   * @since 1.0.0\n   * @memberOf Count\n   * @param {string} [subject=''] The string to split into words.\n   * @param {string|RegExp} [pattern] The pattern to watch words. If `pattern` is not RegExp, it is transformed to `new RegExp(pattern, flags)`.\n   * @param {string} [flags=''] The regular expression flags. Applies when `pattern` is string type.\n   * @return {number} Returns the number of words.\n   * @example\n   * v.countWords('gravity can cross dimensions');\n   * // => 4\n   *\n   * v.countWords('GravityCanCrossDimensions');\n   * // => 4\n   *\n   * v.countWords('Gravity - can cross dimensions!');\n   * // => 4\n   *\n   * v.words('Earth gravity', /[^\\s]+/g);\n   * // => 2\n   */\n\n\n  function countWords(subject, pattern, flags) {\n    return words(subject, pattern, flags).length;\n  }\n  /**\n   * The current index.\n   *\n   * @ignore\n   * @name ReplacementIndex#index\n   * @type {number}\n   * @return {ReplacementIndex} ReplacementIndex instance.\n   */\n\n\n  function ReplacementIndex() {\n    this.index = 0;\n  }\n  /**\n   * Increment the current index.\n   *\n   * @ignore\n   * @return {undefined}\n   */\n\n\n  ReplacementIndex.prototype.increment = function () {\n    this.index++;\n  };\n  /**\n   * Increment the current index by position.\n   *\n   * @ignore\n   * @param {number} [position] The replacement position.\n   * @return {undefined}\n   */\n\n\n  ReplacementIndex.prototype.incrementOnEmptyPosition = function (position) {\n    if (isNil(position)) {\n      this.increment();\n    }\n  };\n  /**\n   * Get the replacement index by position.\n   *\n   * @ignore\n   * @param {number} [position] The replacement position.\n   * @return {number} The replacement index.\n   */\n\n\n  ReplacementIndex.prototype.getIndexByPosition = function (position) {\n    return isNil(position) ? this.index : position - 1;\n  }; // Type specifiers\n\n\n  var TYPE_INTEGER = 'i';\n  var TYPE_INTEGER_BINARY = 'b';\n  var TYPE_INTEGER_ASCII_CHARACTER = 'c';\n  var TYPE_INTEGER_DECIMAL = 'd';\n  var TYPE_INTEGER_OCTAL = 'o';\n  var TYPE_INTEGER_UNSIGNED_DECIMAL = 'u';\n  var TYPE_INTEGER_HEXADECIMAL = 'x';\n  var TYPE_INTEGER_HEXADECIMAL_UPPERCASE = 'X';\n  var TYPE_FLOAT_SCIENTIFIC = 'e';\n  var TYPE_FLOAT_SCIENTIFIC_UPPERCASE = 'E';\n  var TYPE_FLOAT = 'f';\n  var TYPE_FLOAT_SHORT = 'g';\n  var TYPE_FLOAT_SHORT_UPPERCASE = 'G';\n  var TYPE_STRING = 's'; // Simple literals\n\n  var LITERAL_SINGLE_QUOTE = \"'\";\n  var LITERAL_PLUS = '+';\n  var LITERAL_MINUS = '-';\n  var LITERAL_PERCENT_SPECIFIER = '%%'; // Radix constants to format numbers\n\n  var RADIX_BINARY = 2;\n  var RADIX_OCTAL = 8;\n  var RADIX_HEXADECIMAL = 16;\n  /**\n   * Repeats the `subject` number of `times`.\n   *\n   * @function repeat\n   * @static\n   * @since 1.0.0\n   * @memberOf Manipulate\n   * @param {string} [subject=''] The string to repeat.\n   * @param {number} [times=1] The number of times to repeat.\n   * @return {string} Returns the repeated string.\n   * @example\n   * v.repeat('w', 3);\n   * // => 'www'\n   *\n   * v.repeat('world', 0);\n   * // => ''\n   */\n\n  function repeat(subject, times) {\n    var subjectString = coerceToString(subject);\n    var timesInt = isNil(times) ? 1 : clipNumber(toInteger(times), 0, MAX_SAFE_INTEGER);\n    var repeatString = '';\n\n    while (timesInt) {\n      if (timesInt & 1) {\n        repeatString += subjectString;\n      }\n\n      if (timesInt > 1) {\n        subjectString += subjectString;\n      }\n\n      timesInt >>= 1;\n    }\n\n    return repeatString;\n  }\n  /**\n   * Creates the padding string.\n   *\n   * @ignore\n   * @param {string} padCharacters The characters to create padding string.\n   * @param {number} length The padding string length.\n   * @return {string} The padding string.\n   */\n\n\n  function buildPadding(padCharacters, length) {\n    var padStringRepeat = toInteger(length / padCharacters.length);\n    var padStringRest = length % padCharacters.length;\n    return repeat(padCharacters, padStringRepeat + padStringRest).substr(0, length);\n  }\n  /**\n   * Pads `subject` from left to a new `length`.\n   *\n   * @function padLeft\n   * @static\n   * @since 1.0.0\n   * @memberOf Manipulate\n   * @param {string} [subject=''] The string to pad.\n   * @param {int} [length=0] The length to left pad the string. No changes are made if `length` is less than `subject.length`.\n   * @param {string} [pad=' '] The string to be used for padding.\n   * @return {string} Returns the left padded string.\n   * @example\n   * v.padLeft('dog', 5);\n   * // => '  dog'\n   *\n   * v.padLeft('bird', 6, '-');\n   * // => '--bird'\n   *\n   * v.padLeft('cat', 6, '-=');\n   * // => '-=-cat'\n   */\n\n\n  function padLeft(subject, length, pad) {\n    var subjectString = coerceToString(subject);\n    var lengthInt = isNil(length) ? 0 : clipNumber(toInteger(length), 0, MAX_SAFE_INTEGER);\n    var padString = coerceToString(pad, ' ');\n\n    if (lengthInt <= subjectString.length) {\n      return subjectString;\n    }\n\n    return buildPadding(padString, lengthInt - subjectString.length) + subjectString;\n  }\n  /**\n   * Pads `subject` from right to a new `length`.\n   *\n   * @function padRight\n   * @static\n   * @since 1.0.0\n   * @memberOf Manipulate\n   * @param {string} [subject=''] The string to pad.\n   * @param {int} [length=0] The length to right pad the string. No changes are made if `length` is less than `subject.length`.\n   * @param {string} [pad=' '] The string to be used for padding.\n   * @return {string} Returns the right padded string.\n   * @example\n   * v.padRight('dog', 5);\n   * // => 'dog  '\n   *\n   * v.padRight('bird', 6, '-');\n   * // => 'bird--'\n   *\n   * v.padRight('cat', 6, '-=');\n   * // => 'cat-=-'\n   */\n\n\n  function padRight(subject, length, pad) {\n    var subjectString = coerceToString(subject);\n    var lengthInt = isNil(length) ? 0 : clipNumber(toInteger(length), 0, MAX_SAFE_INTEGER);\n    var padString = coerceToString(pad, ' ');\n\n    if (lengthInt <= subjectString.length) {\n      return subjectString;\n    }\n\n    return subjectString + buildPadding(padString, lengthInt - subjectString.length);\n  }\n  /**\n   * Aligns and pads `subject` string.\n   *\n   * @ignore\n   * @param {string} subject The subject string.\n   * @param {ConversionSpecification} conversion The conversion specification object.\n   * @return {string} Returns the aligned and padded string.\n   */\n\n\n  function alignAndPad(subject, conversion) {\n    var width = conversion.width;\n\n    if (isNil(width) || subject.length >= width) {\n      return subject;\n    }\n\n    var padType = conversion.alignmentSpecifier === LITERAL_MINUS ? padRight : padLeft;\n    return padType(subject, width, conversion.getPaddingCharacter());\n  }\n  /**\n   * Add sign to the formatted number.\n   *\n   * @ignore\n   * @name addSignToFormattedNumber\n   * @param  {number} replacementNumber The number to be replaced.\n   * @param  {string} formattedReplacement The formatted version of number.\n   * @param  {ConversionSpecification} conversion The conversion specification object.\n   * @return {string} Returns the formatted number string with a sign.\n   */\n\n\n  function addSignToFormattedNumber(replacementNumber, formattedReplacement, conversion) {\n    if (conversion.signSpecifier === LITERAL_PLUS && replacementNumber >= 0) {\n      formattedReplacement = LITERAL_PLUS + formattedReplacement;\n    }\n\n    return formattedReplacement;\n  }\n  /**\n   * Formats a float type according to specifiers.\n   *\n   * @ignore\n   * @param  {string} replacement The string to be formatted.\n   * @param  {ConversionSpecification} conversion The conversion specification object.\n   * @return {string} Returns the formatted string.\n   */\n\n\n  function float(replacement, conversion) {\n    var replacementNumber = parseFloat(replacement);\n    var formattedReplacement = void 0;\n\n    if (isNaN(replacementNumber)) {\n      replacementNumber = 0;\n    }\n\n    var precision = coerceToNumber(conversion.precision, 6);\n\n    switch (conversion.typeSpecifier) {\n      case TYPE_FLOAT:\n        formattedReplacement = replacementNumber.toFixed(precision);\n        break;\n\n      case TYPE_FLOAT_SCIENTIFIC:\n        formattedReplacement = replacementNumber.toExponential(precision);\n        break;\n\n      case TYPE_FLOAT_SCIENTIFIC_UPPERCASE:\n        formattedReplacement = replacementNumber.toExponential(precision).toUpperCase();\n        break;\n\n      case TYPE_FLOAT_SHORT:\n      case TYPE_FLOAT_SHORT_UPPERCASE:\n        formattedReplacement = formatFloatAsShort(replacementNumber, precision, conversion);\n        break;\n    }\n\n    formattedReplacement = addSignToFormattedNumber(replacementNumber, formattedReplacement, conversion);\n    return coerceToString(formattedReplacement);\n  }\n  /**\n   * Formats the short float.\n   *\n   * @ignore\n   * @param  {number} replacementNumber The number to format.\n   * @param  {number} precision The precision to format the float.\n   * @param  {ConversionSpecification} conversion The conversion specification object.\n   * @return {string}  Returns the formatted short float.\n   */\n\n\n  function formatFloatAsShort(replacementNumber, precision, conversion) {\n    if (replacementNumber === 0) {\n      return '0';\n    }\n\n    var nonZeroPrecision = precision === 0 ? 1 : precision;\n    var formattedReplacement = replacementNumber.toPrecision(nonZeroPrecision).replace(REGEXP_TRAILING_ZEROS, '');\n\n    if (conversion.typeSpecifier === TYPE_FLOAT_SHORT_UPPERCASE) {\n      formattedReplacement = formattedReplacement.toUpperCase();\n    }\n\n    return formattedReplacement;\n  }\n  /**\n   * Formats an integer type according to specifiers.\n   *\n   * @ignore\n   * @param  {string} replacement The string to be formatted.\n   * @param  {ConversionSpecification} conversion The conversion specification object.\n   * @return {string} Returns the formatted string.\n   */\n\n\n  function integerBase(replacement, conversion) {\n    var integer = parseInt(replacement);\n\n    if (isNaN(integer)) {\n      integer = 0;\n    }\n\n    integer = integer >>> 0;\n\n    switch (conversion.typeSpecifier) {\n      case TYPE_INTEGER_ASCII_CHARACTER:\n        integer = String.fromCharCode(integer);\n        break;\n\n      case TYPE_INTEGER_BINARY:\n        integer = integer.toString(RADIX_BINARY);\n        break;\n\n      case TYPE_INTEGER_OCTAL:\n        integer = integer.toString(RADIX_OCTAL);\n        break;\n\n      case TYPE_INTEGER_HEXADECIMAL:\n        integer = integer.toString(RADIX_HEXADECIMAL);\n        break;\n\n      case TYPE_INTEGER_HEXADECIMAL_UPPERCASE:\n        integer = integer.toString(RADIX_HEXADECIMAL).toUpperCase();\n        break;\n    }\n\n    return coerceToString(integer);\n  }\n  /**\n   * Formats a decimal integer type according to specifiers.\n   *\n   * @ignore\n   * @param  {string} replacement The string to be formatted.\n   * @param  {ConversionSpecification} conversion The conversion specification object.\n   * @return {string} Returns the formatted string.\n   */\n\n\n  function integerDecimal(replacement, conversion) {\n    var integer = parseInt(replacement);\n\n    if (isNaN(integer)) {\n      integer = 0;\n    }\n\n    return addSignToFormattedNumber(integer, toString(integer), conversion);\n  }\n  /**\n   * Formats a string type according to specifiers.\n   *\n   * @ignore\n   * @param {string} replacement The string to be formatted.\n   * @param {ConversionSpecification} conversion The conversion specification object.\n   * @return {string} Returns the formatted string.\n   */\n\n\n  function stringFormat(replacement, conversion) {\n    var formattedReplacement = replacement;\n    var precision = conversion.precision;\n\n    if (!isNil(precision) && formattedReplacement.length > precision) {\n      formattedReplacement = truncate(formattedReplacement, precision, '');\n    }\n\n    return formattedReplacement;\n  }\n  /**\n   * Returns the computed string based on format specifiers.\n   *\n   * @ignore\n   * @name computeReplacement\n   * @param {string} replacement The replacement value.\n   * @param {ConversionSpecification} conversion The conversion specification object.\n   * @return {string} Returns the computed string.\n   */\n\n\n  function compute(replacement, conversion) {\n    var formatFunction = void 0;\n\n    switch (conversion.typeSpecifier) {\n      case TYPE_STRING:\n        formatFunction = stringFormat;\n        break;\n\n      case TYPE_INTEGER_DECIMAL:\n      case TYPE_INTEGER:\n        formatFunction = integerDecimal;\n        break;\n\n      case TYPE_INTEGER_ASCII_CHARACTER:\n      case TYPE_INTEGER_BINARY:\n      case TYPE_INTEGER_OCTAL:\n      case TYPE_INTEGER_HEXADECIMAL:\n      case TYPE_INTEGER_HEXADECIMAL_UPPERCASE:\n      case TYPE_INTEGER_UNSIGNED_DECIMAL:\n        formatFunction = integerBase;\n        break;\n\n      case TYPE_FLOAT:\n      case TYPE_FLOAT_SCIENTIFIC:\n      case TYPE_FLOAT_SCIENTIFIC_UPPERCASE:\n      case TYPE_FLOAT_SHORT:\n      case TYPE_FLOAT_SHORT_UPPERCASE:\n        formatFunction = float;\n        break;\n    }\n\n    var formattedString = formatFunction(replacement, conversion);\n    return alignAndPad(formattedString, conversion);\n  }\n  /**\n   * Construct the new conversion specification object.\n   *\n   * @ignore\n   * @param {Object} properties An object with properties to initialize.\n   * @return {ConversionSpecification} ConversionSpecification instance.\n   */\n\n\n  function ConversionSpecification(properties) {\n    /**\n     * The percent characters from conversion specification.\n     *\n     * @ignore\n     * @name ConversionSpecification#percent\n     * @type {string}\n     */\n    this.percent = properties.percent;\n    /**\n     *  The sign specifier to force a sign to be used on a number.\n     *\n     * @ignore\n     * @name ConversionSpecification#signSpecifier\n     * @type {string}\n     */\n\n    this.signSpecifier = properties.signSpecifier;\n    /**\n     * The padding specifier that says what padding character will be used.\n     *\n     * @ignore\n     * @name ConversionSpecification#paddingSpecifier\n     * @type {string}\n     */\n\n    this.paddingSpecifier = properties.paddingSpecifier;\n    /**\n     * The alignment specifier that says if the result should be left-justified or right-justified.\n     *\n     * @ignore\n     * @name ConversionSpecification#alignmentSpecifier\n     * @type {string}\n     */\n\n    this.alignmentSpecifier = properties.alignmentSpecifier;\n    /**\n     * The width specifier how many characters this conversion should result in.\n     *\n     * @ignore\n     * @name ConversionSpecification#width\n     * @type {number}\n     */\n\n    this.width = properties.width;\n    /**\n     * The precision specifier says how many decimal digits should be displayed for floating-point numbers.\n     *\n     * @ignore\n     * @name ConversionSpecification#precision\n     * @type {number}\n     */\n\n    this.precision = properties.precision;\n    /**\n     * The type specifier says what type the argument data should be treated as.\n     *\n     * @ignore\n     * @name ConversionSpecification#typeSpecifier\n     * @type {string}\n     */\n\n    this.typeSpecifier = properties.typeSpecifier;\n  }\n  /**\n   * Check if the conversion specification is a percent literal \"%%\".\n   *\n   * @ignore\n   * @return {boolean} Returns true if the conversion is a percent literal, false otherwise.\n   */\n\n\n  ConversionSpecification.prototype.isPercentLiteral = function () {\n    return LITERAL_PERCENT_SPECIFIER === this.percent;\n  };\n  /**\n   * Get the padding character from padding specifier.\n   *\n   * @ignore\n   * @returns {string} Returns the padding character.\n   */\n\n\n  ConversionSpecification.prototype.getPaddingCharacter = function () {\n    var paddingCharacter = nilDefault(this.paddingSpecifier, ' ');\n\n    if (paddingCharacter.length === 2 && paddingCharacter[0] === LITERAL_SINGLE_QUOTE) {\n      paddingCharacter = paddingCharacter[1];\n    }\n\n    return paddingCharacter;\n  };\n  /**\n   * Validates the specifier type and replacement position.\n   *\n   * @ignore\n   * @throws {Error} Throws an exception on insufficient arguments or unknown specifier.\n   * @param  {number} index The index of the matched specifier.\n   * @param  {number} replacementsLength The number of replacements.\n   * @param  {ConversionSpecification} conversion The conversion specification object.\n   * @return {undefined}\n   */\n\n\n  function validate(index, replacementsLength, conversion) {\n    if (isNil(conversion.typeSpecifier)) {\n      throw new Error('sprintf(): Unknown type specifier');\n    }\n\n    if (index > replacementsLength - 1) {\n      throw new Error('sprintf(): Too few arguments');\n    }\n\n    if (index < 0) {\n      throw new Error('sprintf(): Argument number must be greater than zero');\n    }\n  }\n  /**\n   * Return the replacement for regular expression match of the conversion specification.\n   *\n   * @ignore\n   * @name matchReplacement\n   * @param {ReplacementIndex} replacementIndex The replacement index object.\n   * @param {string[]} replacements The array of replacements.\n   * @param {string} conversionSpecification The conversion specification.\n   * @param {string} percent The percent characters from conversion specification.\n   * @param {string} position The position to insert the replacement.\n   * @param {string} signSpecifier The sign specifier to force a sign to be used on a number.\n   * @param {string} paddingSpecifier The padding specifier that says what padding character will be used.\n   * @param {string} alignmentSpecifier The alignment specifier that says if the result should be left-justified or right-justified.\n   * @param {string} widthSpecifier The width specifier how many characters this conversion should result in.\n   * @param {string} precisionSpecifier The precision specifier says how many decimal digits should be displayed for floating-point numbers.\n   * @param {string} typeSpecifier The type specifier says what type the argument data should be treated as.\n   * @return {string} Returns the computed replacement.\n   */\n\n\n  function match(replacementIndex, replacements, conversionSpecification, percent, position, signSpecifier, paddingSpecifier, alignmentSpecifier, widthSpecifier, precisionSpecifier, typeSpecifier) {\n    var conversion = new ConversionSpecification({\n      percent: percent,\n      signSpecifier: signSpecifier,\n      paddingSpecifier: paddingSpecifier,\n      alignmentSpecifier: alignmentSpecifier,\n      width: coerceToNumber(widthSpecifier, null),\n      precision: coerceToNumber(precisionSpecifier, null),\n      typeSpecifier: typeSpecifier\n    });\n\n    if (conversion.isPercentLiteral()) {\n      return conversionSpecification.slice(1);\n    }\n\n    var actualReplacementIndex = replacementIndex.getIndexByPosition(position);\n    replacementIndex.incrementOnEmptyPosition(position);\n    validate(actualReplacementIndex, replacements.length, conversion);\n    return compute(replacements[actualReplacementIndex], conversion);\n  }\n  /**\n   * Produces a string according to `format`.\n   *\n   * <div id=\"sprintf-format\" class=\"smaller\">\n   * `format` string is composed of zero or more directives: ordinary characters (not <code>%</code>), which are  copied  unchanged\n   * to  the  output string and <i>conversion specifications</i>, each of which results in fetching zero or more subsequent\n   * arguments. <br/> <br/>\n   *\n   * Each <b>conversion specification</b> is introduced by the character <code>%</code>, and ends with a <b>conversion\n   * specifier</b>. In between there may be (in this order) zero or more <b>flags</b>, an optional <b>minimum field width</b>\n   * and an optional <b>precision</b>.<br/>\n   * The syntax is: <b>ConversionSpecification</b> = <b>\"%\"</b> { <b>Flags</b> }\n   * [ <b>MinimumFieldWidth</b> ] [ <b>Precision</b> ] <b>ConversionSpecifier</b>, where curly braces { } denote repetition\n   * and square brackets [ ] optionality. <br/><br/>\n   *\n   * By default, the arguments are used in the given order.<br/>\n   * For argument numbering and swapping, `%m$` (where `m` is a number indicating the argument order)\n   * is used instead of `%` to specify explicitly which argument is taken. For instance `%1$s` fetches the 1st argument,\n   * `%2$s` the 2nd and so on, no matter what position  the conversion specification has in `format`.\n   * <br/><br/>\n   *\n   * <b>The flags</b><br/>\n   * The character <code>%</code> is followed by zero or more of the following flags:<br/>\n   * <table class=\"light-params\">\n   *   <tr>\n   *     <td><code>+</code></td>\n   *     <td>\n   *       A  sign (<code>+</code> or <code>-</code>) should always be placed before a number produced by a\n   *       signed conversion. By default a sign is used only for negative numbers.\n   *     </td>\n   *   </tr>\n   *   <tr>\n   *     <td><code>0</code></td>\n   *     <td>The value should be zero padded.</td>\n   *   </tr>\n   *   <tr>\n   *     <td><code>&blank;</code></td>\n   *     <td>(a space) The value should be space padded.</td>\n   *   </tr>\n   *   <tr>\n   *    <td><code>'</code></td>\n   *    <td>Indicates alternate padding character, specified by prefixing it with a single quote <code>'</code>.</td>\n   *   </tr>\n   *   <tr>\n   *     <td><code>-</code></td>\n   *     <td>The converted value is to be left adjusted on the field boundary (the default is right justification).</td>\n   *   </tr>\n   * </table>\n   *\n   * <b>The minimum field width</b><br/>\n   * An  optional decimal digit string (with nonzero first digit) specifying a minimum field width.  If the converted\n   * value has fewer characters than the field width, it will be padded with spaces on the left (or right, if the\n   * left-adjustment flag has been given).<br/><br/>\n   *\n   * <b>The precision</b><br/>\n   * An optional precision, in the form of a period `.` followed by an optional decimal digit string.<br/>\n   * This gives the number of digits to appear after the radix character for `e`, `E`, `f` and `F` conversions, the\n   * maximum number of significant digits for `g` and `G` conversions or the maximum number of characters to be printed\n   * from a string for `s` conversion.<br/><br/>\n   *\n   * <b>The conversion specifier</b><br/>\n   * A specifier that mentions what type the argument should be treated as:\n   *\n   * <table class=\"light-params\">\n   *   <tr>\n   *     <td>`s`</td>\n   *     <td>The string argument is treated as and presented as a string.</td>\n   *   </tr>\n   *   <tr>\n   *     <td>`d` `i`</td>\n   *     <td>The integer argument is converted to signed decimal notation.</td>\n   *   </tr>\n   *   <tr>\n   *     <td>`b`</td>\n   *     <td>The unsigned integer argument is converted to unsigned binary.</td>\n   *   </tr>\n   *   <tr>\n   *     <td>`c`</td>\n   *     <td>The unsigned integer argument is converted to an ASCII character with that number.</td>\n   *   </tr>\n   *   <tr>\n   *     <td>`o`</td>\n   *     <td>The unsigned integer argument is converted to unsigned octal.</td>\n   *   </tr>\n   *   <tr>\n   *     <td>`u`</td>\n   *     <td>The unsigned integer argument is converted to unsigned decimal.</td>\n   *   </tr>\n   *   <tr>\n   *     <td>`x` `X`</td>\n   *     <td>The unsigned integer argument is converted to unsigned hexadecimal. The letters `abcdef` are used for `x`\n   *     conversions; the letters `ABCDEF` are used for `X` conversions.</td>\n   *   </tr>\n   *   <tr>\n   *     <td>`f`</td>\n   *     <td>\n   *      The float argument is rounded and converted to decimal notation in the style `[-]ddd.ddd`, where the number of\n   *      digits after the decimal-point character is equal to the precision specification. If the precision is missing,\n   *      it is taken as 6; if the precision is explicitly zero, no decimal-point character appears.\n   *      If a decimal point appears, at least one digit appears before it.\n   *     </td>\n   *   </tr>\n   *   <tr>\n   *     <td>`e` `E`</td>\n   *     <td>\n   *       The float argument is rounded and converted in the style `[-]d.ddde±dd`, where there is one digit\n   *       before the decimal-point character and the number of digits after it is equal to the precision. If\n   *       the precision is missing, it is taken as `6`; if the precision is zero, no decimal-point character\n   *       appears. An `E` conversion uses the letter `E` (rather than `e`) to introduce the exponent.\n   *     </td>\n   *   </tr>\n   *   <tr>\n   *     <td>`g` `G`</td>\n   *     <td>\n   *       The float argument is converted in style `f` or `e` (or `F` or `E` for `G` conversions). The precision specifies\n   *       the number of significant digits. If the precision is missing, `6` digits are given; if the\n   *       precision is zero, it is treated as `1`. Style `e` is used if the exponent from its conversion is less\n   *       than `-6` or greater than or equal to the precision. Trailing zeros are removed from the fractional\n   *       part of the result; a decimal point appears only if it is followed by at least one digit.\n   *     </td>\n   *   </tr>\n   *   <tr>\n   *     <td>`%`</td>\n   *     <td>A literal `%` is written. No argument is converted. The complete conversion specification is `%%`.</td>\n   *   </tr>\n   *\n   * </table>\n   * </div>\n   *\n   * @function sprintf\n   * @static\n   * @since 1.0.0\n   * @memberOf Format\n   * @param  {string} [format=''] The format string.\n   * @param  {...*}               replacements The replacements to produce the string.\n   * @return {string}             Returns the produced string.\n   * @example\n   * v.sprintf('%s, %s!', 'Hello', 'World');\n   * // => 'Hello World!'\n   *\n   * v.sprintf('%s costs $%d', 'coffee', 2);\n   * // => 'coffee costs $2'\n   *\n   * v.sprintf('%1$s %2$s %1$s %2$s, watcha gonna %3$s', 'bad', 'boys', 'do')\n   * // => 'bad boys bad boys, watcha gonna do'\n   *\n   * v.sprintf('% 6s', 'bird');\n   * // => '  bird'\n   *\n   * v.sprintf('% -6s', 'crab');\n   * // => 'crab  '\n   *\n   * v.sprintf(\"%'*5s\", 'cat');\n   * // => '**cat'\n   *\n   * v.sprintf(\"%'*-6s\", 'duck');\n   * // => 'duck**'\n   *\n   * v.sprintf('%d %i %+d', 15, -2, 25);\n   * // => '15 -2 +25'\n   *\n   * v.sprintf(\"%06d\", 15);\n   * // => '000015'\n   *\n   * v.sprintf('0b%b 0o%o 0x%X', 12, 9, 155);\n   * // => '0b1100 0o11 0x9B'\n   *\n   * v.sprintf('%.2f', 10.469);\n   * // => '10.47'\n   *\n   * v.sprintf('%.2e %g', 100.5, 0.455);\n   * // => '1.01e+2 0.455'\n   * \n   */\n\n\n  function sprintf(format) {\n    var formatString = coerceToString(format);\n\n    if (formatString === '') {\n      return formatString;\n    }\n\n    for (var _len = arguments.length, replacements = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      replacements[_key - 1] = arguments[_key];\n    }\n\n    var boundReplacementMatch = match.bind(undefined, new ReplacementIndex(), replacements);\n    return formatString.replace(REGEXP_CONVERSION_SPECIFICATION, boundReplacementMatch);\n  }\n\n  function _toConsumableArray(arr) {\n    if (Array.isArray(arr)) {\n      for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {\n        arr2[i] = arr[i];\n      }\n\n      return arr2;\n    } else {\n      return Array.from(arr);\n    }\n  }\n  /**\n   * Produces a string according to `format`. Works exactly like <a href=\"#sprintf\"><code>sprintf()</code></a>,\n   * with the only difference that accepts the formatting arguments in an array `values`.<br/>\n   * See <a href=\"#sprintf-format\">here</a> `format` string specifications.\n   *\n   * @function vprintf\n   * @static\n   * @since 1.0.0\n   * @memberOf Format\n   * @param  {string} format='']  The format string.\n   * @param  {Array} replacements The array of replacements to produce the string.\n   * @return {string}             Returns the produced string.\n   * @example\n   * v.vprintf('%s', ['Welcome'])\n   * // => 'Welcome'\n   *\n   * v.vprintf('%s has %d apples', ['Alexandra', 3]);\n   * // => 'Alexandra has 3 apples'\n   */\n\n\n  function vprintf(format, replacements) {\n    return sprintf.apply(undefined, [format].concat(_toConsumableArray(nilDefault(replacements, []))));\n  }\n\n  var escapeCharactersMap = {\n    '<': '&lt;',\n    '>': '&gt;',\n    '&': '&amp;',\n    '\"': '&quot;',\n    \"'\": '&#x27;',\n    '`': '&#x60;'\n  };\n  /**\n   * Return the escaped version of `character`.\n   *\n   * @ignore\n   * @param  {string} character The character to be escape.\n   * @return {string}           The escaped version of character.\n   */\n\n  function replaceSpecialCharacter(character) {\n    return escapeCharactersMap[character];\n  }\n  /**\n   * Escapes HTML special characters  <code>< > & ' \" `</code> in <code>subject</code>.\n   *\n   * @function escapeHtml\n   * @static\n   * @since 1.0.0         \n   * @memberOf Escape\n   * @param {string} [subject=''] The string to escape.\n   * @return {string} Returns the escaped string.\n   * @example\n   * v.escapeHtml('<p>wonderful world</p>');\n   * // => '&lt;p&gt;wonderful world&lt;/p&gt;'\n   */\n\n\n  function escapeHtml(subject) {\n    return coerceToString(subject).replace(REGEXP_HTML_SPECIAL_CHARACTERS, replaceSpecialCharacter);\n  }\n  /**\n   * Escapes the regular expression special characters `- [ ] / { } ( ) * + ? . \\ ^ $ |` in `subject`.\n   *\n   * @function escapeRegExp\n   * @static\n   * @since 1.0.0\n   * @memberOf Escape\n   * @param {string} [subject=''] The string to escape.\n   * @return {string} Returns the escaped string.\n   * @example\n   * v.escapeRegExp('(hours)[minutes]{seconds}');\n   * // => '\\(hours\\)\\[minutes\\]\\{seconds\\}'\n   */\n\n\n  function escapeRegExp(subject) {\n    return coerceToString(subject).replace(REGEXP_SPECIAL_CHARACTERS, '\\\\$&');\n  }\n\n  var unescapeCharactersMap = {\n    '<': /(&lt;)|(&#x0*3c;)|(&#0*60;)/gi,\n    '>': /(&gt;)|(&#x0*3e;)|(&#0*62;)/gi,\n    '&': /(&amp;)|(&#x0*26;)|(&#0*38;)/gi,\n    '\"': /(&quot;)|(&#x0*22;)|(&#0*34;)/gi,\n    \"'\": /(&#x0*27;)|(&#0*39;)/gi,\n    '`': /(&#x0*60;)|(&#0*96;)/gi\n  };\n  var characters = Object.keys(unescapeCharactersMap);\n  /**\n   * Replaces the HTML entities with corresponding characters.\n   *\n   * @ignore\n   * @param  {string} string The accumulator string.\n   * @param  {string} key    The character.\n   * @return {string}        The string with replaced HTML entity\n   */\n\n  function reduceUnescapedString(string, key) {\n    return string.replace(unescapeCharactersMap[key], key);\n  }\n  /**\n   * Unescapes HTML special characters from <code>&amp;lt; &amp;gt; &amp;amp; &amp;quot; &amp;#x27; &amp;#x60;</code>\n   * to corresponding <code>< > & ' \" `</code> in <code>subject</code>.\n   *\n   * @function unescapeHtml\n   * @static\n   * @since 1.0.0\n   * @memberOf Escape\n   * @param  {string} [subject=''] The string to unescape.\n   * @return {string}              Returns the unescaped string.\n   * @example\n   * v.unescapeHtml('&lt;p&gt;wonderful world&lt;/p&gt;');\n   * // => '<p>wonderful world</p>'\n   */\n\n\n  function unescapeHtml(subject) {\n    var subjectString = coerceToString(subject);\n    return characters.reduce(reduceUnescapedString, subjectString);\n  }\n  /**\n   * Returns the first occurrence index of `search` in `subject`.\n   *\n   * @function indexOf\n   * @static\n   * @since 1.0.0\n   * @memberOf Index\n   * @param {string} [subject=''] The string where to search.\n   * @param {string} search The string to search.\n   * @param {number} [fromIndex=0] The index to start searching.\n   * @return {number} Returns the first occurrence index or `-1` if not found.\n   * @example\n   * v.indexOf('morning', 'n');\n   * // => 3\n   *\n   * v.indexOf('evening', 'o');\n   * // => -1\n   */\n\n\n  function indexOf(subject, search, fromIndex) {\n    var subjectString = coerceToString(subject);\n    return subjectString.indexOf(search, fromIndex);\n  }\n  /**\n   * Returns the last occurrence index of `search` in `subject`.\n   *\n   * @function lastIndexOf\n   * @static\n   * @since 1.0.0\n   * @memberOf Index\n   * @param {string} [subject=''] The string where to search.\n   * @param {string} search The string to search.\n   * @param {number} [fromIndex=subject.length - 1] The index to start searching backward in the string.\n   * @return {number} Returns the last occurrence index or `-1` if not found.\n   * @example\n   * v.lastIndexOf('morning', 'n');\n   * // => 5\n   *\n   * v.lastIndexOf('evening', 'o');\n   * // => -1\n   */\n\n\n  function lastIndexOf(subject, search, fromIndex) {\n    var subjectString = coerceToString(subject);\n    return subjectString.lastIndexOf(search, fromIndex);\n  }\n  /**\n   * Returns the first index of a `pattern` match in `subject`.\n   *\n   * @function search\n   * @static\n   * @since 1.0.0\n   * @memberOf Index\n   * @param {string} [subject=''] The string where to search.\n   * @param {string|RegExp} pattern The pattern to match. If `pattern` is not RegExp, it is transformed to `new RegExp(pattern)`.\n   * @param {number} [fromIndex=0] The index to start searching.\n   * @return {number} Returns the first match index or `-1` if not found.\n   * @example\n   * v.search('morning', /rn/);\n   * // => 2\n   *\n   * v.search('evening', '/\\d/');\n   * // => -1\n   */\n\n\n  function search(subject, pattern, fromIndex) {\n    var subjectString = coerceToString(subject);\n    var fromIndexNumber = isNil(fromIndex) ? 0 : clipNumber(toInteger(fromIndex), 0, subjectString.length);\n    var matchIndex = subjectString.substr(fromIndexNumber).search(pattern);\n\n    if (matchIndex !== -1 && !isNaN(fromIndexNumber)) {\n      matchIndex += fromIndexNumber;\n    }\n\n    return matchIndex;\n  }\n  /**\n   * Inserts into `subject` a string `toInsert` at specified `position`.\n   *\n   * @function insert\n   * @static\n   * @since 1.0.0\n   * @memberOf Manipulate\n   * @param {string} [subject=''] The string where to insert.\n   * @param {string} [toInsert=''] The string to be inserted.\n   * @param {number} [position=0] The position to insert.\n   * @return {string} Returns the string after insertion.\n   * @example\n   * v.insert('ct', 'a', 1);\n   * // => 'cat'\n   *\n   * v.insert('sunny', ' day', 5);\n   * // => 'sunny day'\n   */\n\n\n  function insert(subject, toInsert, position) {\n    var subjectString = coerceToString(subject);\n    var toInsertString = coerceToString(toInsert);\n    var positionNumber = coerceToNumber(position);\n\n    if (positionNumber < 0 || positionNumber > subjectString.length || toInsertString === '') {\n      return subjectString;\n    }\n\n    return subjectString.slice(0, positionNumber) + toInsertString + subjectString.slice(positionNumber);\n  }\n  /**\n   * Generated diacritics map. See bellow the base code.\n   * @ignore\n   * @see http://stackoverflow.com/a/18391901/1894471\n   * @type Object\n   */\n\n\n  var diacritics = {\n    \"3\": \"\\u039e\\u03be\",\n    \"8\": \"\\u0398\\u03b8\",\n    \"A\": \"\\x41\\xc0\\xc1\\xc2\\xc3\\xc4\\xc5\\u0100\\u0102\\u0104\\u01cd\\u01de\\u01e0\\u01fa\\u0200\\u0202\\u0226\\u023a\\u1e00\\u1ea0\\u1ea2\\u1ea4\\u1ea6\\u1ea8\\u1eaa\\u1eac\\u1eae\\u1eb0\\u1eb2\\u1eb4\\u1eb6\\u24b6\\u2c6f\\uff21\\u0386\\u0391\\u0410\",\n    \"B\": \"\\x42\\u0181\\u0182\\u0243\\u1e02\\u1e04\\u1e06\\u24b7\\uff22\\u0392\\u0411\",\n    \"C\": \"\\x43\\xc7\\u0106\\u0108\\u010a\\u010c\\u0187\\u023b\\u1e08\\u24b8\\ua73e\\uff23\\u0426\",\n    \"D\": \"\\x44\\u010e\\u0110\\u0189\\u018a\\u018b\\u1e0a\\u1e0c\\u1e0e\\u1e10\\u1e12\\u24b9\\ua779\\uff24\\xd0\\u0394\\u0414\",\n    \"E\": \"\\x45\\xc8\\xc9\\xca\\xcb\\u0112\\u0114\\u0116\\u0118\\u011a\\u018e\\u0190\\u0204\\u0206\\u0228\\u1e14\\u1e16\\u1e18\\u1e1a\\u1e1c\\u1eb8\\u1eba\\u1ebc\\u1ebe\\u1ec0\\u1ec2\\u1ec4\\u1ec6\\u24ba\\uff25\\u0388\\u0395\\u0415\\u042d\",\n    \"F\": \"\\x46\\u0191\\u1e1e\\u24bb\\ua77b\\uff26\\u03a6\\u0424\",\n    \"G\": \"\\x47\\u011c\\u011e\\u0120\\u0122\\u0193\\u01e4\\u01e6\\u01f4\\u1e20\\u24bc\\ua77d\\ua77e\\ua7a0\\uff27\\u0393\\u0413\\u0490\",\n    \"H\": \"\\x48\\u0124\\u0126\\u021e\\u1e22\\u1e24\\u1e26\\u1e28\\u1e2a\\u24bd\\u2c67\\u2c75\\ua78d\\uff28\\u0389\\u0397\\u0425\",\n    \"I\": \"\\x49\\xcc\\xcd\\xce\\xcf\\u0128\\u012a\\u012c\\u012e\\u0130\\u0197\\u01cf\\u0208\\u020a\\u1e2c\\u1e2e\\u1ec8\\u1eca\\u24be\\uff29\\u038a\\u0399\\u03aa\\u0406\\u0418\",\n    \"J\": \"\\x4a\\u0134\\u0248\\u24bf\\uff2a\\u0419\",\n    \"K\": \"\\x4b\\u0136\\u0198\\u01e8\\u1e30\\u1e32\\u1e34\\u24c0\\u2c69\\ua740\\ua742\\ua744\\ua7a2\\uff2b\\u039a\\u041a\",\n    \"L\": \"\\x4c\\u0139\\u013b\\u013d\\u013f\\u0141\\u023d\\u1e36\\u1e38\\u1e3a\\u1e3c\\u24c1\\u2c60\\u2c62\\ua746\\ua748\\ua780\\uff2c\\u039b\\u041b\",\n    \"M\": \"\\x4d\\u019c\\u1e3e\\u1e40\\u1e42\\u24c2\\u2c6e\\uff2d\\u039c\\u041c\",\n    \"N\": \"\\x4e\\xd1\\u0143\\u0145\\u0147\\u019d\\u01f8\\u0220\\u1e44\\u1e46\\u1e48\\u1e4a\\u24c3\\ua790\\ua7a4\\uff2e\\u039d\\u041d\",\n    \"O\": \"\\x4f\\xd2\\xd3\\xd4\\xd5\\xd6\\xd8\\u014c\\u014e\\u0150\\u0186\\u019f\\u01a0\\u01d1\\u01ea\\u01ec\\u01fe\\u020c\\u020e\\u022a\\u022c\\u022e\\u0230\\u1e4c\\u1e4e\\u1e50\\u1e52\\u1ecc\\u1ece\\u1ed0\\u1ed2\\u1ed4\\u1ed6\\u1ed8\\u1eda\\u1edc\\u1ede\\u1ee0\\u1ee2\\u24c4\\ua74a\\ua74c\\uff2f\\u038c\\u039f\\u041e\",\n    \"P\": \"\\x50\\u01a4\\u1e54\\u1e56\\u24c5\\u2c63\\ua750\\ua752\\ua754\\uff30\\u03a0\\u041f\",\n    \"Q\": \"\\x51\\u024a\\u24c6\\ua756\\ua758\\uff31\",\n    \"R\": \"\\x52\\u0154\\u0156\\u0158\\u0210\\u0212\\u024c\\u1e58\\u1e5a\\u1e5c\\u1e5e\\u24c7\\u2c64\\ua75a\\ua782\\ua7a6\\uff32\\u03a1\\u0420\",\n    \"S\": \"\\x53\\u015a\\u015c\\u015e\\u0160\\u0218\\u1e60\\u1e62\\u1e64\\u1e66\\u1e68\\u1e9e\\u24c8\\u2c7e\\ua784\\ua7a8\\uff33\\u03a3\\u0421\",\n    \"T\": \"\\x54\\u0162\\u0164\\u0166\\u01ac\\u01ae\\u021a\\u023e\\u1e6a\\u1e6c\\u1e6e\\u1e70\\u24c9\\ua786\\uff34\\u03a4\\u0422\",\n    \"U\": \"\\x55\\xd9\\xda\\xdb\\xdc\\u0168\\u016a\\u016c\\u016e\\u0170\\u0172\\u01af\\u01d3\\u01d5\\u01d7\\u01d9\\u01db\\u0214\\u0216\\u0244\\u1e72\\u1e74\\u1e76\\u1e78\\u1e7a\\u1ee4\\u1ee6\\u1ee8\\u1eea\\u1eec\\u1eee\\u1ef0\\u24ca\\uff35\\u0423\\u042a\",\n    \"V\": \"\\x56\\u01b2\\u0245\\u1e7c\\u1e7e\\u24cb\\ua75e\\uff36\\u0412\",\n    \"W\": \"\\x57\\u0174\\u1e80\\u1e82\\u1e84\\u1e86\\u1e88\\u24cc\\u2c72\\uff37\\u038f\\u03a9\",\n    \"X\": \"\\x58\\u1e8a\\u1e8c\\u24cd\\uff38\\u03a7\",\n    \"Y\": \"\\x59\\xdd\\u0176\\u0178\\u01b3\\u0232\\u024e\\u1e8e\\u1ef2\\u1ef4\\u1ef6\\u1ef8\\u1efe\\u24ce\\uff39\\u038e\\u03a5\\u03ab\\u042b\",\n    \"Z\": \"\\x5a\\u0179\\u017b\\u017d\\u01b5\\u0224\\u1e90\\u1e92\\u1e94\\u24cf\\u2c6b\\u2c7f\\ua762\\uff3a\\u0396\\u0417\",\n    \"a\": \"\\x61\\xe0\\xe1\\xe2\\xe3\\xe4\\xe5\\u0101\\u0103\\u0105\\u01ce\\u01df\\u01e1\\u01fb\\u0201\\u0203\\u0227\\u0250\\u1e01\\u1e9a\\u1ea1\\u1ea3\\u1ea5\\u1ea7\\u1ea9\\u1eab\\u1ead\\u1eaf\\u1eb1\\u1eb3\\u1eb5\\u1eb7\\u24d0\\u2c65\\uff41\\u03ac\\u03b1\\u0430\",\n    \"b\": \"\\x62\\u0180\\u0183\\u0253\\u1e03\\u1e05\\u1e07\\u24d1\\uff42\\u03b2\\u0431\",\n    \"c\": \"\\x63\\xe7\\u0107\\u0109\\u010b\\u010d\\u0188\\u023c\\u1e09\\u2184\\u24d2\\ua73f\\uff43\\u0446\",\n    \"d\": \"\\x64\\u010f\\u0111\\u018c\\u0256\\u0257\\u1e0b\\u1e0d\\u1e0f\\u1e11\\u1e13\\u24d3\\ua77a\\uff44\\xf0\\u03b4\\u0434\",\n    \"e\": \"\\x65\\xe8\\xe9\\xea\\xeb\\u0113\\u0115\\u0117\\u0119\\u011b\\u01dd\\u0205\\u0207\\u0229\\u0247\\u025b\\u1e15\\u1e17\\u1e19\\u1e1b\\u1e1d\\u1eb9\\u1ebb\\u1ebd\\u1ebf\\u1ec1\\u1ec3\\u1ec5\\u1ec7\\u24d4\\uff45\\u03ad\\u03b5\\u0435\\u044d\",\n    \"f\": \"\\x66\\u0192\\u1e1f\\u24d5\\ua77c\\uff46\\u03c6\\u0444\",\n    \"g\": \"\\x67\\u011d\\u011f\\u0121\\u0123\\u01e5\\u01e7\\u01f5\\u0260\\u1d79\\u1e21\\u24d6\\ua77f\\ua7a1\\uff47\\u03b3\\u0433\\u0491\",\n    \"h\": \"\\x68\\u0125\\u0127\\u021f\\u0265\\u1e23\\u1e25\\u1e27\\u1e29\\u1e2b\\u1e96\\u24d7\\u2c68\\u2c76\\uff48\\u03ae\\u03b7\\u0445\",\n    \"i\": \"\\x69\\xec\\xed\\xee\\xef\\u0129\\u012b\\u012d\\u012f\\u0131\\u01d0\\u0209\\u020b\\u0268\\u1e2d\\u1e2f\\u1ec9\\u1ecb\\u24d8\\uff49\\u0390\\u03af\\u03b9\\u03ca\\u0438\\u0456\",\n    \"j\": \"\\x6a\\u0135\\u01f0\\u0249\\u24d9\\uff4a\\u0439\",\n    \"k\": \"\\x6b\\u0137\\u0199\\u01e9\\u1e31\\u1e33\\u1e35\\u24da\\u2c6a\\ua741\\ua743\\ua745\\ua7a3\\uff4b\\u03ba\\u043a\",\n    \"l\": \"\\x6c\\u013a\\u013c\\u013e\\u0140\\u0142\\u017f\\u019a\\u026b\\u1e37\\u1e39\\u1e3b\\u1e3d\\u24db\\u2c61\\ua747\\ua749\\ua781\\uff4c\\u03bb\\u043b\",\n    \"m\": \"\\x6d\\u026f\\u0271\\u1e3f\\u1e41\\u1e43\\u24dc\\uff4d\\u03bc\\u043c\",\n    \"n\": \"\\x6e\\xf1\\u0144\\u0146\\u0148\\u0149\\u019e\\u01f9\\u0272\\u1e45\\u1e47\\u1e49\\u1e4b\\u24dd\\ua791\\ua7a5\\uff4e\\u03bd\\u043d\",\n    \"o\": \"\\x6f\\xf2\\xf3\\xf4\\xf5\\xf6\\xf8\\u014d\\u014f\\u0151\\u01a1\\u01d2\\u01eb\\u01ed\\u01ff\\u020d\\u020f\\u022b\\u022d\\u022f\\u0231\\u0254\\u0275\\u1e4d\\u1e4f\\u1e51\\u1e53\\u1ecd\\u1ecf\\u1ed1\\u1ed3\\u1ed5\\u1ed7\\u1ed9\\u1edb\\u1edd\\u1edf\\u1ee1\\u1ee3\\u24de\\ua74b\\ua74d\\uff4f\\u03bf\\u03cc\\u043e\",\n    \"p\": \"\\x70\\u01a5\\u1d7d\\u1e55\\u1e57\\u24df\\ua751\\ua753\\ua755\\uff50\\u03c0\\u043f\",\n    \"q\": \"\\x71\\u024b\\u24e0\\ua757\\ua759\\uff51\",\n    \"r\": \"\\x72\\u0155\\u0157\\u0159\\u0211\\u0213\\u024d\\u027d\\u1e59\\u1e5b\\u1e5d\\u1e5f\\u24e1\\ua75b\\ua783\\ua7a7\\uff52\\u03c1\\u0440\",\n    \"s\": \"\\x73\\xdf\\u015b\\u015d\\u015f\\u0161\\u0219\\u023f\\u1e61\\u1e63\\u1e65\\u1e67\\u1e69\\u1e9b\\u24e2\\ua785\\ua7a9\\uff53\\u03c2\\u03c3\\u0441\",\n    \"t\": \"\\x74\\u0163\\u0165\\u0167\\u01ad\\u021b\\u0288\\u1e6b\\u1e6d\\u1e6f\\u1e71\\u1e97\\u24e3\\u2c66\\ua787\\uff54\\u03c4\\u0442\",\n    \"u\": \"\\x75\\xf9\\xfa\\xfb\\xfc\\u0169\\u016b\\u016d\\u016f\\u0171\\u0173\\u01b0\\u01d4\\u01d6\\u01d8\\u01da\\u01dc\\u0215\\u0217\\u0289\\u1e73\\u1e75\\u1e77\\u1e79\\u1e7b\\u1ee5\\u1ee7\\u1ee9\\u1eeb\\u1eed\\u1eef\\u1ef1\\u24e4\\uff55\\u0443\\u044a\",\n    \"v\": \"\\x76\\u028b\\u028c\\u1e7d\\u1e7f\\u24e5\\ua75f\\uff56\\u0432\",\n    \"w\": \"\\x77\\u0175\\u1e81\\u1e83\\u1e85\\u1e87\\u1e89\\u1e98\\u24e6\\u2c73\\uff57\\u03c9\\u03ce\",\n    \"x\": \"\\x78\\u1e8b\\u1e8d\\u24e7\\uff58\\u03c7\",\n    \"y\": \"\\x79\\xfd\\xff\\u0177\\u01b4\\u0233\\u024f\\u1e8f\\u1e99\\u1ef3\\u1ef5\\u1ef7\\u1ef9\\u1eff\\u24e8\\uff59\\u03b0\\u03c5\\u03cb\\u03cd\\u044b\",\n    \"z\": \"\\x7a\\u017a\\u017c\\u017e\\u01b6\\u0225\\u0240\\u1e91\\u1e93\\u1e95\\u24e9\\u2c6c\\ua763\\uff5a\\u03b6\\u0437\",\n    \"OE\": \"\\x8c\\u0152\",\n    \"oe\": \"\\x9c\\u0153\",\n    \"AE\": \"\\xc6\\u01e2\\u01fc\",\n    \"ae\": \"\\xe6\\u01e3\\u01fd\",\n    \"hv\": \"\\u0195\",\n    \"OI\": \"\\u01a2\",\n    \"oi\": \"\\u01a3\",\n    \"DZ\": \"\\u01c4\\u01f1\",\n    \"Dz\": \"\\u01c5\\u01f2\",\n    \"dz\": \"\\u01c6\\u01f3\",\n    \"LJ\": \"\\u01c7\",\n    \"Lj\": \"\\u01c8\",\n    \"lj\": \"\\u01c9\",\n    \"NJ\": \"\\u01ca\",\n    \"Nj\": \"\\u01cb\",\n    \"nj\": \"\\u01cc\",\n    \"OU\": \"\\u0222\",\n    \"ou\": \"\\u0223\",\n    \"TZ\": \"\\ua728\",\n    \"tz\": \"\\ua729\",\n    \"AA\": \"\\ua732\",\n    \"aa\": \"\\ua733\",\n    \"AO\": \"\\ua734\",\n    \"ao\": \"\\ua735\",\n    \"AU\": \"\\ua736\",\n    \"au\": \"\\ua737\",\n    \"AV\": \"\\ua738\\ua73a\",\n    \"av\": \"\\ua739\\ua73b\",\n    \"AY\": \"\\ua73c\",\n    \"ay\": \"\\ua73d\",\n    \"OO\": \"\\ua74e\",\n    \"oo\": \"\\ua74f\",\n    \"VY\": \"\\ua760\",\n    \"vy\": \"\\ua761\",\n    \"TH\": \"\\xde\",\n    \"th\": \"\\xfe\",\n    \"PS\": \"\\u03a8\",\n    \"ps\": \"\\u03c8\",\n    \"Yo\": \"\\u0401\",\n    \"Ye\": \"\\u0404\",\n    \"Yi\": \"\\u0407\",\n    \"Zh\": \"\\u0416\",\n    \"Ch\": \"\\u0427\",\n    \"Sh\": \"\\u0428\\u0429\",\n    \"\": \"\\u042c\\u044c\",\n    \"Yu\": \"\\u042e\",\n    \"Ya\": \"\\u042f\",\n    \"zh\": \"\\u0436\",\n    \"ch\": \"\\u0447\",\n    \"sh\": \"\\u0448\\u0449\",\n    \"yu\": \"\\u044e\",\n    \"ya\": \"\\u044f\",\n    \"yo\": \"\\u0451\",\n    \"ye\": \"\\u0454\",\n    \"yi\": \"\\u0457\"\n  };\n  var diacriticsMap = null;\n  /**\n   * Creates a map of the diacritics.\n   *\n   * @ignore\n   * @returns {Object} Returns the diacritics map.\n   */\n\n  function getDiacriticsMap() {\n    if (diacriticsMap !== null) {\n      return diacriticsMap;\n    }\n\n    diacriticsMap = {};\n    Object.keys(diacritics).forEach(function (key) {\n      var characters = diacritics[key];\n\n      for (var index = 0; index < characters.length; index++) {\n        var character = characters[index];\n        diacriticsMap[character] = key;\n      }\n    });\n    return diacriticsMap;\n  }\n  /**\n   * Get the latin character from character with diacritics.\n   *\n   * @ignore\n   * @param   {string} character The character with diacritics.\n   * @returns {string}           Returns the character without diacritics.\n   */\n\n\n  function getLatinCharacter(character) {\n    var characterWithoutDiacritic = getDiacriticsMap()[character];\n    return characterWithoutDiacritic ? characterWithoutDiacritic : character;\n  }\n  /**\n   * Returns the `cleanCharacter` from combining marks regular expression match.\n   *\n   * @ignore\n   * @param {string} character The character with combining marks\n   * @param {string} cleanCharacter The character without combining marks.\n   * @return {string} The character without combining marks.\n   */\n\n\n  function removeCombiningMarks(character, cleanCharacter) {\n    return cleanCharacter;\n  }\n  /**\n   * Latinises the `subject` by removing diacritic characters.\n   *\n   * @function latinise\n   * @static\n   * @since 1.0.0\n   * @memberOf Manipulate\n   * @param {string} [subject=''] The string to latinise.\n   * @return {string} Returns the latinised string.\n   * @example\n   * v.latinise('cafe\\u0301'); // or 'café'\n   * // => 'cafe'\n   *\n   * v.latinise('août décembre');\n   * // => 'aout decembre'\n   *\n   * v.latinise('как прекрасен этот мир');\n   * // => 'kak prekrasen etot mir'\n   */\n\n\n  function latinise(subject) {\n    var subjectString = coerceToString(subject);\n\n    if (subjectString === '') {\n      return '';\n    }\n\n    return subjectString.replace(REGEXP_NON_LATIN, getLatinCharacter).replace(REGEXP_COMBINING_MARKS, removeCombiningMarks);\n  }\n  /**\n   * Pads `subject` to a new `length`.\n   *\n   * @function pad\n   * @static\n   * @since 1.0.0\n   * @memberOf Manipulate\n   * @param {string} [subject=''] The string to pad.\n   * @param {int} [length=0] The length to pad the string. No changes are made if `length` is less than `subject.length`.\n   * @param {string} [pad=' '] The string to be used for padding.\n   * @return {string} Returns the padded string.\n   * @example\n   * v.pad('dog', 5);\n   * // => ' dog '\n   *\n   * v.pad('bird', 6, '-');\n   * // => '-bird-'\n   *\n   * v.pad('cat', 6, '-=');\n   * // => '-cat-='\n   */\n\n\n  function pad(subject, length, pad) {\n    var subjectString = coerceToString(subject);\n    var lengthInt = isNil(length) ? 0 : clipNumber(toInteger(length), 0, MAX_SAFE_INTEGER);\n    var padString = coerceToString(pad, ' ');\n\n    if (lengthInt <= subjectString.length) {\n      return subjectString;\n    }\n\n    var paddingLength = lengthInt - subjectString.length;\n    var paddingSideLength = toInteger(paddingLength / 2);\n    var paddingSideRemainingLength = paddingLength % 2;\n    return buildPadding(padString, paddingSideLength) + subjectString + buildPadding(padString, paddingSideLength + paddingSideRemainingLength);\n  }\n  /**\n   * Replaces the matches of `pattern` with `replacement`. <br/>\n   *\n   * @function replace\n   * @static\n   * @since 1.0.0\n   * @memberOf Manipulate\n   * @param {string} [subject=''] The string to verify.\n   * @param {string|RegExp} pattern The pattern which match is replaced. If `pattern` is a string,\n   * a simple string match is evaluated and only the first occurrence replaced.\n   * @param {string|Function} replacement The string or function which invocation result replaces `pattern` match.\n   * @return {string} Returns the replacement result.\n   * @example\n   * v.replace('swan', 'wa', 'u');\n   * // => 'sun'\n   *\n   * v.replace('domestic duck', /domestic\\s/, '');\n   * // => 'duck'\n   *\n   * v.replace('nice duck', /(nice)(duck)/, function(match, nice, duck) {\n   *   return 'the ' + duck + ' is ' + nice;\n   * });\n   * // => 'the duck is nice'\n   */\n\n\n  function replace(subject, pattern, replacement) {\n    var subjectString = coerceToString(subject);\n    return subjectString.replace(pattern, replacement);\n  }\n  /**\n   * Get the flags string from a regular expression object.\n   *\n   * @ignore\n   * @param {RegExp} regExp The regular expression object.\n   * @return {string} Returns the string with flags chars.\n   */\n\n\n  function getRegExpFlags(regExp) {\n    return regExp.toString().match(REGEXP_FLAGS)[0];\n  }\n  /**\n   * Checks whether `subject` includes `search` starting from `position`.\n   *\n   * @function includes\n   * @static\n   * @since 1.0.0\n   * @memberOf Query\n   * @param {string} [subject=''] The string where to search.\n   * @param {string} search The string to search.\n   * @param {number} [position=0] The position to start searching.\n   * @return {boolean} Returns `true` if `subject` includes `search` or `false` otherwise.\n   * @example\n   * v.includes('starship', 'star');\n   * // => true\n   *\n   * v.includes('galaxy', 'g', 1);\n   * // => false\n   */\n\n\n  function includes(subject, search, position) {\n    var subjectString = coerceToString(subject);\n    var searchString = toString(search);\n\n    if (searchString === null) {\n      return false;\n    }\n\n    if (searchString === '') {\n      return true;\n    }\n\n    position = isNil(position) ? 0 : clipNumber(toInteger(position), 0, subjectString.length);\n    return subjectString.indexOf(searchString, position) !== -1;\n  }\n  /**\n   * Append flag to a regular expression.\n   *\n   * @ignore\n   * @param {RegExp} pattern The pattern to coerce.\n   * @param {string} appendFlag The flag to append to regular expression.\n   * @return {RegExp} The regular expression with added flag.\n   */\n\n\n  function appendFlagToRegExp(pattern, appendFlag) {\n    var regularExpressionFlags = getRegExpFlags(pattern);\n\n    if (!includes(regularExpressionFlags, appendFlag)) {\n      return new RegExp(pattern.source, regularExpressionFlags + appendFlag);\n    }\n\n    return pattern;\n  }\n  /**\n   * Replaces all matches of `pattern` with `replacement`. <br/>\n   *\n   * @function replaceAll\n   * @static\n   * @since 1.0.0\n   * @memberOf Manipulate\n   * @param {string} [subject=''] The string to verify.\n   * @param {string|RegExp} pattern The pattern which match is replaced. If `pattern` is a string, a simple string match is evaluated.\n   * All matches are replaced.\n   * @param {string|Function} replacement The string or function which invocation result replaces `pattern` match.\n   * @return {string} Returns the replacement result.\n   * @example\n   * v.replaceAll('good morning', 'o', '*');\n   * // => 'g**d m*rning'\n   * v.replaceAll('evening', /n/, 's');\n   * // => 'evesisg'\n   *\n   */\n\n\n  function replaceAll(subject, pattern, replacement) {\n    var subjectString = coerceToString(subject);\n    var regExp = pattern;\n\n    if (!(pattern instanceof RegExp)) {\n      regExp = new RegExp(escapeRegExp(pattern), 'g');\n    } else if (!pattern.global) {\n      regExp = appendFlagToRegExp(pattern, 'g');\n    }\n\n    return subjectString.replace(regExp, replacement);\n  }\n  /**\n   * Reverses the `subject`.\n   *\n   * @function reverse\n   * @static\n   * @since 1.0.0\n   * @memberOf Manipulate\n   * @param {string} [subject=''] The string to reverse.\n   * @return {string} Returns the reversed string.\n   * @example\n   * v.reverse('winter');\n   * // => 'retniw'\n   */\n\n\n  function reverse(subject) {\n    var subjectString = coerceToString(subject);\n    return subjectString.split('').reverse().join('');\n  }\n  /**\n   * Reverses the `subject` taking care of\n   * <a href=\"https://rainsoft.io/what-every-javascript-developer-should-know-about-unicode/#24surrogatepairs\">surrogate pairs</a> and\n   * <a href=\"https://rainsoft.io/what-every-javascript-developer-should-know-about-unicode/#25combiningmarks\">combining marks</a>.\n   *\n   * @function reverseGrapheme\n   * @static\n   * @since 1.0.0\n   * @memberOf Manipulate\n   * @param {string} [subject=''] The string to reverse.\n   * @return {string} Returns the reversed string.\n   * @example\n   * v.reverseGrapheme('summer');\n   * // => 'remmus'\n   *\n   * v.reverseGrapheme('𝌆 bar mañana mañana');\n   * // => 'anañam anañam rab 𝌆'\n   */\n\n\n  function reverseGrapheme(subject) {\n    var subjectString = coerceToString(subject);\n    /**\n     * @see https://github.com/mathiasbynens/esrever\n     */\n\n    subjectString = subjectString.replace(REGEXP_COMBINING_MARKS, function ($0, $1, $2) {\n      return reverseGrapheme($2) + $1;\n    }).replace(REGEXP_SURROGATE_PAIRS, '$2$1');\n    var reversedString = '';\n    var index = subjectString.length;\n\n    while (index--) {\n      reversedString += subjectString.charAt(index);\n    }\n\n    return reversedString;\n  }\n  /**\n   * Slugifies the `subject`. Cleans the `subject` by replacing diacritics with corresponding latin characters.\n   *\n   * @function slugify\n   * @static\n   * @since 1.0.0\n   * @memberOf Manipulate\n   * @param {string} [subject=''] The string to slugify.\n   * @return {string} Returns the slugified string.\n   * @example\n   * v.slugify('Italian cappuccino drink');\n   * // => 'italian-cappuccino-drink'\n   *\n   * v.slugify('caffé latté');\n   * // => 'caffe-latte'\n   *\n   * v.slugify('хорошая погода');\n   * // => 'horoshaya-pogoda'\n   */\n\n\n  function slugify(subject) {\n    var subjectString = coerceToString(subject);\n\n    if (subjectString === '') {\n      return '';\n    }\n\n    var cleanSubjectString = latinise(subjectString).replace(REGEXP_NON_LATIN, '-');\n    return kebabCase(cleanSubjectString);\n  }\n  /**\n   * Changes `subject` by deleting `deleteCount` of characters starting at position `start`. Places a new string\n   * `toAdd` instead of deleted characters.\n   *\n   * @function splice\n   * @static\n   * @since 1.0.0\n   * @memberOf Manipulate\n   * @param {string} [subject=''] The string where to insert.\n   * @param {string} start The position to start changing the string. For a negative position will start from the end of\n   * the string.\n   * @param {number} [deleteCount=subject.length-start] The number of characters to delete from string.\n   * @param {string} [toAdd=''] The string to be added instead of deleted characters.\n   * @return {string} Returns the modified string.\n   * @example\n   * v.splice('new year', 0, 4);\n   * // => 'year'\n   *\n   * v.splice('new year', 0, 3, 'happy');\n   * // => 'happy year'\n   *\n   * v.splice('new year', -4, 4, 'day');\n   * // => 'new day'\n   */\n\n\n  function splice(subject, start, deleteCount, toAdd) {\n    var subjectString = coerceToString(subject);\n    var toAddString = coerceToString(toAdd);\n    var startPosition = coerceToNumber(start);\n\n    if (startPosition < 0) {\n      startPosition = subjectString.length + startPosition;\n\n      if (startPosition < 0) {\n        startPosition = 0;\n      }\n    } else if (startPosition > subjectString.length) {\n      startPosition = subjectString.length;\n    }\n\n    var deleteCountNumber = coerceToNumber(deleteCount, subjectString.length - startPosition);\n\n    if (deleteCountNumber < 0) {\n      deleteCountNumber = 0;\n    }\n\n    return subjectString.slice(0, startPosition) + toAddString + subjectString.slice(startPosition + deleteCountNumber);\n  }\n\n  var _slicedToArray = function () {\n    function sliceIterator(arr, i) {\n      var _arr = [];\n      var _n = true;\n      var _d = false;\n      var _e = undefined;\n\n      try {\n        for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n          _arr.push(_s.value);\n\n          if (i && _arr.length === i) break;\n        }\n      } catch (err) {\n        _d = true;\n        _e = err;\n      } finally {\n        try {\n          if (!_n && _i[\"return\"]) _i[\"return\"]();\n        } finally {\n          if (_d) throw _e;\n        }\n      }\n\n      return _arr;\n    }\n\n    return function (arr, i) {\n      if (Array.isArray(arr)) {\n        return arr;\n      } else if (Symbol.iterator in Object(arr)) {\n        return sliceIterator(arr, i);\n      } else {\n        throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n      }\n    };\n  }();\n  /**\n   * Translates characters or replaces substrings in `subject`.\n   *\n   * @function tr\n   * @static\n   * @since 1.3.0\n   * @memberOf Manipulate\n   * @param  {string} [subject=''] The string to translate.\n   * @param  {string|Object} from The string of characters to translate from. Or an object, then the object keys are replaced with corresponding values (longest keys are tried first).\n   * @param  {string} to The string of characters to translate to. Ignored when `from` is an object.\n   * @return {string} Returns the translated string.\n   * @example\n   * v.tr('hello', 'el', 'ip');\n   * // => 'hippo'\n   * \n   * v.tr('légèreté', 'éè', 'ee');\n   * // => 'legerete'\n   * \n   * v.tr('Yes. The fire rises.', {\n   *   'Yes': 'Awesome',\n   *   'fire': 'flame'\n   * })\n   * // => 'Awesome. The flame rises.'\n   * \n   * v.tr(':where is the birthplace of :what', {\n   *   ':where': 'Africa',\n   *   ':what': 'Humanity'\n   * });\n   * // => 'Africa is the birthplace of Humanity'\n   * \n   */\n\n\n  function tr(subject, from, to) {\n    var subjectString = coerceToString(subject);\n    var keys = void 0;\n    var values = void 0;\n\n    if (isString(from) && isString(to)) {\n      keys = from.split('');\n      values = to.split('');\n    } else {\n      var _extractKeysAndValues = extractKeysAndValues(nilDefault(from, {}));\n\n      var _extractKeysAndValues2 = _slicedToArray(_extractKeysAndValues, 2);\n\n      keys = _extractKeysAndValues2[0];\n      values = _extractKeysAndValues2[1];\n    }\n\n    var keysLength = keys.length;\n\n    if (keysLength === 0) {\n      return subjectString;\n    }\n\n    var result = '';\n    var valuesLength = values.length;\n\n    for (var index = 0; index < subjectString.length; index++) {\n      var isMatch = false;\n      var matchValue = void 0;\n\n      for (var keyIndex = 0; keyIndex < keysLength && keyIndex < valuesLength; keyIndex++) {\n        var key = keys[keyIndex];\n\n        if (subjectString.substr(index, key.length) === key) {\n          isMatch = true;\n          matchValue = values[keyIndex];\n          index = index + key.length - 1;\n          break;\n        }\n      }\n\n      result += isMatch ? matchValue : subjectString[index];\n    }\n\n    return result;\n  }\n\n  function extractKeysAndValues(object) {\n    var keys = Object.keys(object);\n    var values = keys.sort(sortStringByLength).map(function (key) {\n      return object[key];\n    });\n    return [keys, values];\n  }\n\n  function sortStringByLength(str1, str2) {\n    if (str1.length === str2.length) {\n      return 0;\n    }\n\n    return str1.length < str2.length ? 1 : -1;\n  }\n\n  var reduce$1 = Array.prototype.reduce;\n  /**\n   * Removes whitespaces from the left side of the `subject`.\n   *\n   * @function trimLeft\n   * @static\n   * @since 1.0.0\n   * @memberOf Manipulate\n   * @param {string} [subject=''] The string to trim.\n   * @param {string} [whitespace=whitespace] The whitespace characters to trim. List all characters that you want to be stripped.\n   * @return {string} Returns the trimmed string.\n   * @example\n   * v.trimLeft('  Starship Troopers');\n   * // => 'Starship Troopers'\n   *\n   * v.trimLeft('***Mobile Infantry', '*');\n   * // => 'Mobile Infantry'\n   */\n\n  function trimLeft(subject, whitespace$$1) {\n    var subjectString = coerceToString(subject);\n\n    if (whitespace$$1 === '' || subjectString === '') {\n      return subjectString;\n    }\n\n    var whitespaceString = toString(whitespace$$1);\n\n    if (isNil(whitespaceString)) {\n      return subjectString.replace(REGEXP_TRIM_LEFT, '');\n    }\n\n    var matchWhitespace = true;\n    return reduce$1.call(subjectString, function (trimmed, character) {\n      if (matchWhitespace && includes(whitespaceString, character)) {\n        return trimmed;\n      }\n\n      matchWhitespace = false;\n      return trimmed + character;\n    }, '');\n  }\n\n  var reduceRight = Array.prototype.reduceRight;\n  /**\n   * Removes whitespaces from the right side of the `subject`.\n   *\n   * @function trimRight\n   * @static\n   * @since 1.0.0\n   * @memberOf Manipulate\n   * @param {string} [subject=''] The string to trim.\n   * @param {string} [whitespace=whitespace] The whitespace characters to trim. List all characters that you want to be stripped.\n   * @return {string} Returns the trimmed string.\n   * @example\n   * v.trimRight('the fire rises   ');\n   * // => 'the fire rises'\n   *\n   * v.trimRight('do you feel in charge?!!!', '!');\n   * // => 'do you feel in charge?'\n   */\n\n  function trimRight(subject, whitespace$$1) {\n    var subjectString = coerceToString(subject);\n\n    if (whitespace$$1 === '' || subjectString === '') {\n      return subjectString;\n    }\n\n    var whitespaceString = toString(whitespace$$1);\n\n    if (isNil(whitespaceString)) {\n      return subjectString.replace(REGEXP_TRIM_RIGHT, '');\n    }\n\n    var matchWhitespace = true;\n    return reduceRight.call(subjectString, function (trimmed, character) {\n      if (matchWhitespace && includes(whitespaceString, character)) {\n        return trimmed;\n      }\n\n      matchWhitespace = false;\n      return character + trimmed;\n    }, '');\n  }\n  /**\n   * Removes whitespaces from left and right sides of the `subject`.\n   *\n   * @function trim\n   * @static\n   * @since 1.0.0\n   * @memberOf Manipulate\n   * @param {string} [subject=''] The string to trim.\n   * @param {string} [whitespace=whitespace] The whitespace characters to trim. List all characters that you want to be stripped.\n   * @return {string} Returns the trimmed string.\n   * @example\n   * v.trim(' Mother nature ');\n   * // => 'Mother nature'\n   *\n   * v.trim('--Earth--', '-');\n   * // => 'Earth'\n   */\n\n\n  function trim(subject, whitespace) {\n    var subjectString = coerceToString(subject);\n\n    if (whitespace === '' || subjectString === '') {\n      return subjectString;\n    }\n\n    var whitespaceString = toString(whitespace);\n\n    if (isNil(whitespaceString)) {\n      return subjectString.trim();\n    }\n\n    return trimRight(trimLeft(subjectString, whitespaceString), whitespaceString);\n  }\n\n  var OPTION_WIDTH = 'width';\n  var OPTION_NEW_LINE = 'newLine';\n  var OPTION_INDENT = 'indent';\n  var OPTION_CUT = 'cut';\n  /**\n   * Wraps `subject` to a given number of characters using a string break character.\n   *\n   * @function wordWrap\n   * @static\n   * @since 1.0.0\n   * @memberOf Manipulate\n   * @param  {string} [subject=''] The string to wrap.\n   * @param  {Object} [options={}] The wrap options.\n   * @param  {number} [options.width=75] The number of characters at which to wrap.\n   * @param  {string} [options.newLine='\\n'] The string to add at the end of line.\n   * @param  {string} [options.indent='']  The string to intend the line.\n   * @param  {boolean} [options.cut=false] When `false` (default) does not split the word even if word length is bigger than `width`. <br/>\n   *                                       When `true` breaks the word that has length bigger than `width`.\n   *\n   * @return {string} Returns wrapped string.\n   * @example\n   * v.wordWrap('Hello world', {\n   *   width: 5\n   * });\n   * // => 'Hello\\nworld'\n   *\n   * v.wordWrap('Hello world', {\n   *   width: 5,\n   *   newLine: '<br/>',\n   *   indent: '__'\n   * });\n   * // => '__Hello<br/>__world'\n   *\n   * v.wordWrap('Wonderful world', {\n   *   width: 5,\n   *   cut: true\n   * });\n   * // => 'Wonde\\nrful\\nworld'\n   *\n   */\n\n  function wordWrap(subject) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var subjectString = coerceToString(subject);\n\n    var _determineOptions = determineOptions(options),\n        width = _determineOptions.width,\n        newLine = _determineOptions.newLine,\n        indent = _determineOptions.indent,\n        cut = _determineOptions.cut;\n\n    if (subjectString === '' || width <= 0) {\n      return indent;\n    }\n\n    var subjectLength = subjectString.length;\n    var substring = subjectString.substring.bind(subjectString);\n    var offset = 0;\n    var wrappedLine = '';\n\n    while (subjectLength - offset > width) {\n      if (subjectString[offset] === ' ') {\n        offset++;\n        continue;\n      }\n\n      var spaceToWrapAt = subjectString.lastIndexOf(' ', width + offset);\n\n      if (spaceToWrapAt >= offset) {\n        wrappedLine += indent + substring(offset, spaceToWrapAt) + newLine;\n        offset = spaceToWrapAt + 1;\n      } else {\n        if (cut) {\n          wrappedLine += indent + substring(offset, width + offset) + newLine;\n          offset += width;\n        } else {\n          spaceToWrapAt = subjectString.indexOf(' ', width + offset);\n\n          if (spaceToWrapAt >= 0) {\n            wrappedLine += indent + substring(offset, spaceToWrapAt) + newLine;\n            offset = spaceToWrapAt + 1;\n          } else {\n            wrappedLine += indent + substring(offset);\n            offset = subjectLength;\n          }\n        }\n      }\n    }\n\n    if (offset < subjectLength) {\n      wrappedLine += indent + substring(offset);\n    }\n\n    return wrappedLine;\n  }\n  /**\n   * Determine the word wrap options. The missing values are filled with defaults.\n   *\n   * @param  {Object} options  The options object.\n   * @return {Object}          The word wrap options, with default settings if necessary.\n   * @ignore\n   */\n\n\n  function determineOptions(options) {\n    return {\n      width: coerceToNumber(options[OPTION_WIDTH], 75),\n      newLine: coerceToString(options[OPTION_NEW_LINE], '\\n'),\n      indent: coerceToString(options[OPTION_INDENT], ''),\n      cut: coerceToBoolean(options[OPTION_CUT], false)\n    };\n  }\n  /**\n   * Checks whether `subject` ends with `end`.\n   *\n   * @function endsWith\n   * @static\n   * @since 1.0.0\n   * @memberOf Query\n   * @param {string} [subject=''] The string to verify.\n   * @param {string} end The ending string.\n   * @param {number} [position=subject.length] Search within `subject` as if the string were only `position` long.\n   * @return {boolean} Returns `true` if `subject` ends with `end` or `false` otherwise.\n   * @example\n   * v.endsWith('red alert', 'alert');\n   * // => true\n   *\n   * v.endsWith('metro south', 'metro');\n   * // => false\n   *\n   * v.endsWith('Murphy', 'ph', 5);\n   * // => true\n   */\n\n\n  function endsWith(subject, end, position) {\n    if (isNil(end)) {\n      return false;\n    }\n\n    var subjectString = coerceToString(subject);\n    var endString = coerceToString(end);\n\n    if (endString === '') {\n      return true;\n    }\n\n    position = isNil(position) ? subjectString.length : clipNumber(toInteger(position), 0, subjectString.length);\n    position -= endString.length;\n    var lastIndex = subjectString.indexOf(endString, position);\n    return lastIndex !== -1 && lastIndex === position;\n  }\n  /**\n   * Checks whether `subject` contains only alpha characters.\n   *\n   * @function isAlpha\n   * @static\n   * @since 1.0.0\n   * @memberOf Query\n   * @param {string} [subject=''] The string to verify.\n   * @return {boolean} Returns `true` if `subject` contains only alpha characters or `false` otherwise.\n   * @example\n   * v.isAlpha('bart');\n   * // => true\n   *\n   * v.isAlpha('lisa!');\n   * // => false\n   *\n   * v.isAlpha('lisa and bart');\n   * // => false\n   */\n\n\n  function isAlpha(subject) {\n    var subjectString = coerceToString(subject);\n    return REGEXP_ALPHA.test(subjectString);\n  }\n  /**\n   * Checks whether `subject` contains only alpha and digit characters.\n   *\n   * @function isAlphaDigit\n   * @static\n   * @since 1.0.0\n   * @memberOf Query\n   * @param {string} [subject=''] The string to verify.\n   * @return {boolean} Returns `true` if `subject` contains only alpha and digit characters or `false` otherwise.\n   * @example\n   * v.isAlphaDigit('year2020');\n   * // => true\n   *\n   * v.isAlphaDigit('1448');\n   * // => true\n   *\n   * v.isAlphaDigit('40-20');\n   * // => false\n   */\n\n\n  function isAlphaDigit(subject) {\n    var subjectString = coerceToString(subject);\n    return REGEXP_ALPHA_DIGIT.test(subjectString);\n  }\n  /**\n   * Checks whether `subject` is empty or contains only whitespaces.\n   *\n   * @function isBlank\n   * @static\n   * @since 1.0.0\n   * @memberOf Query\n   * @param {string} [subject=''] The string to verify.\n   * @return {boolean} Returns `true` if `subject` is empty or contains only whitespaces or `false` otherwise.\n   * @example\n   * v.isBlank('');\n   * // => true\n   *\n   * v.isBlank('  ');\n   * // => true\n   *\n   * v.isBlank('World');\n   * // => false\n   */\n\n\n  function isBlank(subject) {\n    var subjectString = coerceToString(subject);\n    return subjectString.trim().length === 0;\n  }\n  /**\n   * Checks whether `subject` contains only digit characters.\n   *\n   * @function isDigit\n   * @static\n   * @since 1.0.0\n   * @memberOf Query\n   * @param {string} [subject=''] The string to verify.\n   * @return {boolean} Returns `true` if `subject` contains only digit characters or `false` otherwise.\n   * @example\n   * v.isDigit('35');\n   * // => true\n   *\n   * v.isDigit('1.5');\n   * // => false\n   *\n   * v.isDigit('ten');\n   * // => false\n   */\n\n\n  function isDigit(subject) {\n    var subjectString = coerceToString(subject);\n    return REGEXP_DIGIT.test(subjectString);\n  }\n  /**\n   * Checks whether `subject` is empty.\n   *\n   * @function isEmpty\n   * @static\n   * @since 1.0.0\n   * @memberOf Query\n   * @param {string} [subject=''] The string to verify.\n   * @return {boolean} Returns `true` if `subject` is empty or `false` otherwise\n   * @example\n   * v.isEmpty('');\n   * // => true\n   *\n   * v.isEmpty('  ');\n   * // => false\n   *\n   * v.isEmpty('sun');\n   * // => false\n   */\n\n\n  function isEmpty(subject) {\n    var subjectString = coerceToString(subject);\n    return subjectString.length === 0;\n  }\n  /**\n   * Checks whether `subject` has only lower case characters.\n   *\n   * @function isLowerCase\n   * @static\n   * @since 1.0.0\n   * @memberOf Query\n   * @param {string} [subject=''] The string to verify.\n   * @return {boolean} Returns `true` if `subject` is lower case or `false` otherwise.\n   * @example\n   * v.isLowerCase('motorcycle');\n   * // => true\n   *\n   * v.isLowerCase('John');\n   * // => false\n   *\n   * v.isLowerCase('T1000');\n   * // => false\n   */\n\n\n  function isLowerCase(subject) {\n    var valueString = coerceToString(subject);\n    return isAlpha(valueString) && valueString.toLowerCase() === valueString;\n  }\n  /**\n   * Checks whether `subject` is numeric.\n   *\n   * @function isNumeric\n   * @static\n   * @since 1.0.0\n   * @memberOf Query\n   * @param {string} [subject=''] The string to verify.\n   * @return {boolean} Returns `true` if `subject` is numeric or `false` otherwise.\n   * @example\n   * v.isNumeric('350');\n   * // => true\n   *\n   * v.isNumeric('-20.5');\n   * // => true\n   *\n   * v.isNumeric('1.5E+2');\n   * // => true\n   *\n   * v.isNumeric('five');\n   * // => false\n   */\n\n\n  function isNumeric(subject) {\n    var valueNumeric = typeof subject === 'object' && !isNil(subject) ? Number(subject) : subject;\n    return (typeof valueNumeric === 'number' || typeof valueNumeric === 'string') && !isNaN(valueNumeric - parseFloat(valueNumeric));\n  }\n  /**\n   * Checks whether `subject` contains only upper case characters.\n   *\n   * @function isUpperCase\n   * @static\n   * @since 1.0.0\n   * @memberOf Query\n   * @param {string} [subject=''] The string to verify.\n   * @return {boolean} Returns `true` if `subject` is upper case or `false` otherwise.\n   * @example\n   * v.isUpperCase('ACDC');\n   * // => true\n   *\n   * v.isUpperCase('Morning');\n   * // => false\n   */\n\n\n  function isUpperCase(subject) {\n    var subjectString = coerceToString(subject);\n    return isAlpha(subjectString) && subjectString.toUpperCase() === subjectString;\n  }\n  /**\n   * Checks whether `subject` matches the regular expression `pattern`.\n   *\n   * @function matches\n   * @static\n   * @since 1.0.0\n   * @memberOf Query\n   * @param {string} [subject=''] The string to verify.\n   * @param {RegExp|string} pattern The pattern to match. If `pattern` is not RegExp, it is transformed to `new RegExp(pattern, flags)`.\n   * @param {string} [flags=''] The regular expression flags. Applies when `pattern` is string type.\n   * @return {boolean} Returns `true` if `subject` matches `pattern` or `false` otherwise.\n   * @example\n   * v.matches('pluto', /plu.{2}/);\n   * // => true\n   *\n   * v.matches('sun', 'S', 'i');\n   * // => true\n   *\n   * v.matches('apollo 11', '\\\\d{3}');\n   * // => false\n   */\n\n\n  function matches(subject, pattern, flags) {\n    var subjectString = coerceToString(subject);\n    var flagsString = coerceToString(flags);\n    var patternString = void 0;\n\n    if (!(pattern instanceof RegExp)) {\n      patternString = toString(pattern);\n\n      if (patternString === null) {\n        return false;\n      }\n\n      pattern = new RegExp(patternString, flagsString);\n    }\n\n    return pattern.test(subjectString);\n  }\n  /**\n   * Checks whether `subject` starts with `start`.\n   *\n   * @function startsWith\n   * @static\n   * @since 1.0.0\n   * @memberOf Query\n   * @param {string} [subject=''] The string to verify.\n   * @param {string} start The starting string.\n   * @param {number} [position=0] The position to start searching.\n   * @return {boolean} Returns `true` if `subject` starts with `start` or `false` otherwise.\n   * @example\n   * v.startsWith('say hello to my little friend', 'say hello');\n   * // => true\n   *\n   * v.startsWith('tony', 'on', 1);\n   * // => true\n   *\n   * v.startsWith('the world is yours', 'world');\n   * // => false\n   */\n\n\n  function startsWith(subject, start, position) {\n    var subjectString = coerceToString(subject);\n    var startString = toString(start);\n\n    if (startString === null) {\n      return false;\n    }\n\n    if (startString === '') {\n      return true;\n    }\n\n    position = isNil(position) ? 0 : clipNumber(toInteger(position), 0, subjectString.length);\n    return subjectString.substr(position, startString.length) === startString;\n  }\n  /**\n   * Splits `subject` into an array of characters.\n   *\n   * @function chars\n   * @static\n   * @since 1.0.0\n   * @memberOf Split\n   * @param {string} [subject=''] The string to split into characters.\n   * @return {Array} Returns the array of characters.\n   * @example\n   * v.chars('cloud');\n   * // => ['c', 'l', 'o', 'u', 'd']\n   */\n\n\n  function chars(subject) {\n    var subjectString = coerceToString(subject);\n    return subjectString.split('');\n  }\n  /**\n   * Returns an array of Unicode code point values from characters of `subject`.\n   *\n   * @function codePoints\n   * @static\n   * @since 1.0.0\n   * @memberOf Split\n   * @param  {string} [subject=''] The string to extract from.\n   * @return {Array} Returns an array of non-negative numbers less than or equal to `0x10FFFF`.\n   * @example\n   * v.codePoints('rain');\n   * // => [114, 97, 105, 110], or\n   * //    [0x72, 0x61, 0x69, 0x6E]\n   *\n   * v.codePoints('\\uD83D\\uDE00 smile'); // or '😀 smile'\n   * // => [128512, 32, 115, 109, 105, 108, 101], or\n   * //    [0x1F600, 0x20, 0x73, 0x6D, 0x69, 0x6C, 0x65]\n   */\n\n\n  function codePoints(subject) {\n    var subjectString = coerceToString(subject);\n    var subjectStringLength = subjectString.length;\n    var codePointArray = [];\n    var index = 0;\n    var codePointNumber = void 0;\n\n    while (index < subjectStringLength) {\n      codePointNumber = codePointAt(subjectString, index);\n      codePointArray.push(codePointNumber);\n      index += codePointNumber > 0xFFFF ? 2 : 1;\n    }\n\n    return codePointArray;\n  }\n  /**\n   * Splits `subject` into an array of graphemes taking care of\n   * <a href=\"https://rainsoft.io/what-every-javascript-developer-should-know-about-unicode/#24surrogatepairs\">surrogate pairs</a> and\n   * <a href=\"https://rainsoft.io/what-every-javascript-developer-should-know-about-unicode/#25combiningmarks\">combining marks</a>.\n   *\n   * @function graphemes\n   * @static\n   * @since 1.0.0\n   * @memberOf Split\n   * @param {string} [subject=''] The string to split into characters.\n   * @return {Array} Returns the array of graphemes.\n   * @example\n   * v.graphemes('\\uD835\\uDC00\\uD835\\uDC01'); // or '𝐀𝐁'\n   * // => ['\\uD835\\uDC00', '\\uD835\\uDC01'], or\n   * //    ['𝐀', '𝐁']\n   *\n   * v.graphemes('cafe\\u0301'); // or 'café'\n   * // => ['c', 'a', 'f', 'e\\u0301'], or\n   * //    ['c', 'a', 'f', 'é']\n   */\n\n\n  function graphemes(subject) {\n    var subjectString = coerceToString(subject);\n    return nilDefault(subjectString.match(REGEXP_UNICODE_CHARACTER), []);\n  }\n  /**\n   * Splits `subject` into an array of chunks by `separator`.\n   *\n   * @function split\n   * @static\n   * @since 1.0.0\n   * @memberOf Split\n   * @param {string} [subject=''] The string to split into characters.\n   * @param {string|RegExp} [separator] The pattern to match the separator.\n   * @param {number} [limit] Limit the number of chunks to be found.\n   * @return {Array} Returns the array of chunks.\n   * @example\n   * v.split('rage against the dying of the light', ' ');\n   * // => ['rage', 'against', 'the', 'dying', 'of', 'the', 'light']\n   *\n   * v.split('the dying of the light', /\\s/, 3);\n   * // => ['the', 'dying', 'of']\n   */\n\n\n  function split(subject, separator, limit) {\n    var subjectString = coerceToString(subject);\n    return subjectString.split(separator, limit);\n  }\n\n  var BYRE_ORDER_MARK = '\\uFEFF';\n  /**\n   * Strips the byte order mark (BOM) from the beginning of `subject`.\n   *\n   * @function stripBom\n   * @static\n   * @since 1.2.0\n   * @memberOf Strip\n   * @param {string} [subject=''] The string to strip from.\n   * @return {string} Returns the stripped string.\n   * @example\n   *\n   * v.stripBom('\\uFEFFsummertime sadness');\n   * // => 'summertime sadness'\n   *\n   * v.stripBom('summertime happiness');\n   * // => 'summertime happiness'\n   *\n   */\n\n  function trim$1(subject) {\n    var subjectString = coerceToString(subject);\n\n    if (subjectString === '') {\n      return '';\n    }\n\n    if (subjectString[0] === BYRE_ORDER_MARK) {\n      return subjectString.substring(1);\n    }\n\n    return subjectString;\n  }\n  /**\n   * Checks whether `subject` contains substring at specific `index`.\n   *\n   * @ignore\n   * @param {string} subject The subject to search in.\n   * @param {string} substring The substring to search/\n   * @param {number} index The index to search substring.\n   * @param {boolean} lookBehind Whether to look behind (true) or ahead (false).\n   * @return {boolean} Returns a boolean whether the substring exists.\n   */\n\n\n  function hasSubstringAtIndex(subject, substring, index) {\n    var lookBehind = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n    var indexOffset = 0;\n\n    if (lookBehind) {\n      indexOffset = -substring.length + 1;\n    }\n\n    var extractedSubstring = subject.substr(index + indexOffset, substring.length);\n    return extractedSubstring.toLowerCase() === substring;\n  }\n  /**\n   * Parses the tags from the string '<tag1><tag2>...<tagN>'.\n   *\n   * @ignore\n   * @param {string} tags The string that contains the tags.\n   * @return {string[]} Returns the array of tag names.\n   */\n\n\n  function parseTagList(tags) {\n    var tagsList = [];\n    var match = void 0;\n\n    while ((match = REGEXP_TAG_LIST.exec(tags)) !== null) {\n      tagsList.push(match[1]);\n    }\n\n    return tagsList;\n  }\n\n  var STATE_START_TAG = 0;\n  var STATE_NON_WHITESPACE = 1;\n  var STATE_DONE = 2;\n  /**\n   * Parses the tag name from html content.\n   *\n   * @ignore\n   * @param {string} tagContent The tag content.\n   * @return {string} Returns the tag name.\n   */\n\n  function parseTagName(tagContent) {\n    var state = STATE_START_TAG;\n    var tagName = '';\n    var index = 0;\n\n    while (state !== STATE_DONE) {\n      var char = tagContent[index++].toLowerCase();\n\n      switch (char) {\n        case '<':\n          break;\n\n        case '>':\n          state = STATE_DONE;\n          break;\n\n        default:\n          if (REGEXP_WHITESPACE.test(char)) {\n            if (state === STATE_NON_WHITESPACE) {\n              state = STATE_DONE;\n            }\n          } else {\n            if (state === STATE_START_TAG) {\n              state = STATE_NON_WHITESPACE;\n            }\n\n            if (char !== '/') {\n              tagName += char;\n            }\n          }\n\n          break;\n      }\n    }\n\n    return tagName;\n  }\n\n  var STATE_OUTPUT = 0;\n  var STATE_HTML = 1;\n  var STATE_EXCLAMATION = 2;\n  var STATE_COMMENT = 3;\n  /**\n   * Strips HTML tags from `subject`.\n   *\n   * @function stripTags\n   * @static\n   * @since 1.1.0\n   * @memberOf Strip\n   * @param {string} [subject=''] The string to strip from.\n   * @param {string|Array} [allowableTags] The string `'<tag1><tag2>'` or array `['tag1', 'tag2']` of tags that should not be stripped.\n   * @param {string} [replacement=''] The string to replace the stripped tag.\n   * @return {string} Returns the stripped string.\n   * @example\n   *\n   * v.stripTags('<span><a href=\"#\">Summer</a> is nice</span>');\n   * // => 'Summer is nice'\n   *\n   * v.stripTags('<span><i>Winter</i> is <b>cold</b></span>', ['b', 'i']);\n   * // => '<i>Winter</i> is <b>cold</b>'\n   *\n   * v.stripTags('Sun<br/>set', '', '-');\n   * // => 'Sun-set'\n   */\n\n  function trim$2(subject, allowableTags, replacement) {\n    subject = coerceToString(subject);\n\n    if (subject === '') {\n      return '';\n    }\n\n    if (!Array.isArray(allowableTags)) {\n      var allowableTagsString = coerceToString(allowableTags);\n      allowableTags = allowableTagsString === '' ? [] : parseTagList(allowableTagsString);\n    }\n\n    var replacementString = coerceToString(replacement);\n    var length = subject.length;\n    var hasAllowableTags = allowableTags.length > 0;\n    var hasSubstring = hasSubstringAtIndex.bind(null, subject);\n    var state = STATE_OUTPUT;\n    var depth = 0;\n    var output = '';\n    var tagContent = '';\n    var quote = null;\n\n    for (var index = 0; index < length; index++) {\n      var char = subject[index];\n      var advance = false;\n\n      switch (char) {\n        case '<':\n          if (quote) {\n            break;\n          }\n\n          if (hasSubstring('< ', index, false)) {\n            advance = true;\n            break;\n          }\n\n          if (state === STATE_OUTPUT) {\n            advance = true;\n            state = STATE_HTML;\n            break;\n          }\n\n          if (state === STATE_HTML) {\n            depth++;\n            break;\n          }\n\n          advance = true;\n          break;\n\n        case '!':\n          if (state === STATE_HTML && hasSubstring('<!', index)) {\n            state = STATE_EXCLAMATION;\n            break;\n          }\n\n          advance = true;\n          break;\n\n        case '-':\n          if (state === STATE_EXCLAMATION && hasSubstring('!--', index)) {\n            state = STATE_COMMENT;\n            break;\n          }\n\n          advance = true;\n          break;\n\n        case '\"':\n        case \"'\":\n          if (state === STATE_HTML) {\n            if (quote === char) {\n              quote = null;\n            } else if (!quote) {\n              quote = char;\n            }\n          }\n\n          advance = true;\n          break;\n\n        case 'E':\n        case 'e':\n          if (state === STATE_EXCLAMATION && hasSubstring('doctype', index)) {\n            state = STATE_HTML;\n            break;\n          }\n\n          advance = true;\n          break;\n\n        case '>':\n          if (depth > 0) {\n            depth--;\n            break;\n          }\n\n          if (quote) {\n            break;\n          }\n\n          if (state === STATE_HTML) {\n            quote = null;\n            state = STATE_OUTPUT;\n\n            if (hasAllowableTags) {\n              tagContent += '>';\n              var tagName = parseTagName(tagContent);\n\n              if (allowableTags.indexOf(tagName.toLowerCase()) !== -1) {\n                output += tagContent;\n              } else {\n                output += replacementString;\n              }\n\n              tagContent = '';\n            } else {\n              output += replacementString;\n            }\n\n            break;\n          }\n\n          if (state === STATE_EXCLAMATION || state === STATE_COMMENT && hasSubstring('-->', index)) {\n            quote = null;\n            state = STATE_OUTPUT;\n            tagContent = '';\n            break;\n          }\n\n          advance = true;\n          break;\n\n        default:\n          advance = true;\n      }\n\n      if (advance) {\n        switch (state) {\n          case STATE_OUTPUT:\n            output += char;\n            break;\n\n          case STATE_HTML:\n            if (hasAllowableTags) {\n              tagContent += char;\n            }\n\n            break;\n        }\n      }\n    }\n\n    return output;\n  }\n\n  var globalObject$1 = null;\n\n  function getGlobalObject() {\n    if (globalObject$1 !== null) {\n      return globalObject$1;\n    }\n    /* istanbul ignore next */\n    // It's hard to mock the global variables. This code surely works fine. I hope :)\n\n\n    if (typeof global === 'object' && global.Object === Object) {\n      // NodeJS global object\n      globalObject$1 = global;\n    } else if (typeof self === 'object' && self.Object === Object) {\n      // self property from Window object\n      globalObject$1 = self;\n    } else {\n      // Other cases. Function constructor always has the context as global object\n      globalObject$1 = new Function('return this')();\n    }\n\n    return globalObject$1;\n  }\n\n  var globalObject = getGlobalObject();\n  var previousV = globalObject.v;\n  /**\n   * Restores `v` variable to previous value and returns Voca library instance.\n   *\n   * @function noConflict\n   * @static\n   * @since 1.0.0\n   * @memberOf Util\n   * @return {Object} Returns Voca library instance.\n   * @example\n   * var voca = v.noConflict();\n   * voca.isAlpha('Hello');\n   * // => true\n   */\n\n  function noConflict() {\n    if (this === globalObject.v) {\n      globalObject.v = previousV;\n    }\n\n    return this;\n  }\n  /**\n   * A property that contains the library <a href=\"http://semver.org/\">semantic version number</a>.\n   * @name version\n   * @static\n   * @since 1.0.0\n   * @memberOf Util\n   * @type string\n   * @example\n   * v.version\n   * // => '1.4.0'\n   */\n\n\n  var version = '1.4.0';\n  /* eslint sort-imports: \"off\" */\n\n  /**\n   * Functions to change the case\n   * @namespace Case\n   */\n\n  /**\n   * Chain functions\n   * @namespace Chain\n   */\n\n  /**\n   * Functions to cut a string\n   * @namespace Chop\n   */\n\n  /**\n   * Functions to count characters in a string\n   * @namespace Count\n   */\n\n  /**\n   * Functions to format\n   * @namespace Format\n   */\n\n  /**\n   * Functions to escape RegExp special characters\n   * @namespace Escape\n   */\n\n  /**\n   * Functions to find index\n   * @namespace Index\n   */\n\n  /**\n   * Functions to manipulate a string\n   * @namespace Manipulate\n   */\n\n  /**\n   * Functions to query a string\n   * @namespace Query\n   */\n\n  /**\n   * Functions to split a string\n   * @namespace Split\n   */\n\n  /**\n   * Functions to strip a string\n   * @namespace Strip\n   */\n\n  /**\n   * Util functions and properties\n   * @namespace Util\n   */\n\n  var functions = {\n    camelCase: camelCase,\n    capitalize: capitalize,\n    decapitalize: decapitalize,\n    kebabCase: kebabCase,\n    lowerCase: lowerCase,\n    snakeCase: snakeCase,\n    swapCase: swapCase,\n    titleCase: titleCase,\n    upperCase: upperCase,\n    count: count,\n    countGraphemes: countGrapheme,\n    countSubstrings: countSubstrings,\n    countWhere: countWhere,\n    countWords: countWords,\n    escapeHtml: escapeHtml,\n    escapeRegExp: escapeRegExp,\n    unescapeHtml: unescapeHtml,\n    sprintf: sprintf,\n    vprintf: vprintf,\n    indexOf: indexOf,\n    lastIndexOf: lastIndexOf,\n    search: search,\n    charAt: charAt,\n    codePointAt: codePointAt,\n    first: first,\n    graphemeAt: graphemeAt,\n    last: last,\n    prune: prune,\n    slice: slice,\n    substr: substr,\n    substring: substring,\n    truncate: truncate,\n    insert: insert,\n    latinise: latinise,\n    pad: pad,\n    padLeft: padLeft,\n    padRight: padRight,\n    repeat: repeat,\n    replace: replace,\n    replaceAll: replaceAll,\n    reverse: reverse,\n    reverseGrapheme: reverseGrapheme,\n    slugify: slugify,\n    splice: splice,\n    tr: tr,\n    trim: trim,\n    trimLeft: trimLeft,\n    trimRight: trimRight,\n    wordWrap: wordWrap,\n    endsWith: endsWith,\n    includes: includes,\n    isAlpha: isAlpha,\n    isAlphaDigit: isAlphaDigit,\n    isBlank: isBlank,\n    isDigit: isDigit,\n    isEmpty: isEmpty,\n    isLowerCase: isLowerCase,\n    isNumeric: isNumeric,\n    isString: isString,\n    isUpperCase: isUpperCase,\n    matches: matches,\n    startsWith: startsWith,\n    chars: chars,\n    codePoints: codePoints,\n    graphemes: graphemes,\n    split: split,\n    words: words,\n    stripBom: trim$1,\n    stripTags: trim$2,\n    noConflict: noConflict,\n    version: version\n  };\n  /**\n   * The chain wrapper constructor.\n   *\n   * @ignore\n   * @param  {string}       subject               The string to be wrapped.\n   * @param  {boolean}      [explicitChain=false] A boolean that indicates if the chain sequence is explicit or implicit.\n   * @return {ChainWrapper}                       Returns a new instance of `ChainWrapper`\n   * @constructor\n   */\n\n  function ChainWrapper(subject, explicitChain) {\n    this._wrappedValue = subject;\n    this._explicitChain = explicitChain;\n  }\n  /**\n   * Unwraps the chain sequence wrapped value.\n   *\n   * @memberof Chain\n   * @since 1.0.0\n   * @function __proto__value\n   * @return {*} Returns the unwrapped value.\n   * @example\n   * v\n   *  .chain('Hello world')\n   *  .replace('Hello', 'Hi')\n   *  .lowerCase()\n   *  .slugify()\n   *  .value()\n   * // => 'hi-world'\n   *\n   * v(' Space travel ')\n   *  .trim()\n   *  .truncate(8)\n   *  .value()\n   * // => 'Space...'\n   */\n\n\n  ChainWrapper.prototype.value = function () {\n    return this._wrappedValue;\n  };\n  /**\n   * Override the default object valueOf().\n   *\n   * @ignore\n   * @return {*} Returns the wrapped value.\n   */\n\n\n  ChainWrapper.prototype.valueOf = function () {\n    return this.value();\n  };\n  /**\n   * Returns the wrapped value to be used in JSON.stringify().\n   *\n   * @ignore\n   * @return {*} Returns the wrapped value.\n   */\n\n\n  ChainWrapper.prototype.toJSON = function () {\n    return this.value();\n  };\n  /**\n   * Returns the string representation of the wrapped value.\n   *\n   * @ignore\n   * @return {string} Returns the string representation.\n   */\n\n\n  ChainWrapper.prototype.toString = function () {\n    return String(this.value());\n  };\n  /**\n   * Creates a new chain object that enables <i>explicit</i> chain sequences.\n   * Use `v.prototype.value()` to unwrap the result. <br/>\n   * Does not modify the wrapped value.\n   *\n   * @memberof Chain\n   * @since 1.0.0\n   * @function __proto__chain\n   * @return {Object} Returns the wrapper in <i>explicit</i> mode.\n   * @example\n   * v('Back to School')\n   *  .chain()\n   *  .lowerCase()\n   *  .words()\n   *  .value()\n   * // => ['back', 'to', 'school']\n   *\n   * v(\" Back to School \")\n   *  .chain()\n   *  .trim()\n   *  .truncate(7)\n   *  .value()\n   * // => 'Back...'\n   */\n\n\n  ChainWrapper.prototype.chain = function () {\n    return new ChainWrapper(this._wrappedValue, true);\n  };\n  /**\n   * Modifies the wrapped value with the invocation result of `changer` function. The current wrapped value is the\n   * argument of `changer` invocation.\n   *\n   * @memberof Chain\n   * @since 1.0.0\n   * @function __proto__thru\n   * @param  {Function} changer The function to invoke.\n   * @return {Object}           Returns the new wrapper that wraps the invocation result of `changer`.\n   * @example\n   * v\n   *  .chain('sun is shining')\n   *  .words()\n   *  .thru(function(words) {\n   *    return words[0];\n   *  })\n   *  .value()\n   * // => 'sun'\n   *\n   */\n\n\n  ChainWrapper.prototype.thru = function (changer) {\n    if (typeof changer === 'function') {\n      return new ChainWrapper(changer(this._wrappedValue), this._explicitChain);\n    }\n\n    return this;\n  };\n  /**\n   * A boolean that indicates if the chain sequence is explicit or implicit.\n   * @ignore\n   * @type {boolean}\n   * @private\n   */\n\n\n  ChainWrapper.prototype._explicitChain = true;\n  /**\n   * Make a voca function chainable.\n   *\n   * @ignore\n   * @param  {Function} functionInstance The function to make chainable\n   * @return {Function}                  Returns the chainable function\n   */\n\n  function makeFunctionChainable(functionInstance) {\n    return function () {\n      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      var result = functionInstance.apply(undefined, [this._wrappedValue].concat(args));\n\n      if (this._explicitChain || typeof result === 'string') {\n        return new ChainWrapper(result, this._explicitChain);\n      } else {\n        return result;\n      }\n    };\n  }\n\n  Object.keys(functions).forEach(function (name) {\n    ChainWrapper.prototype[name] = makeFunctionChainable(functions[name]);\n  });\n  /**\n   * Creates a chain object that wraps `subject`, enabling <i>explicit</i> chain sequences. <br/>\n   * Use `v.prototype.value()` to unwrap the result.\n   *\n   * @memberOf Chain\n   * @since 1.0.0\n   * @function chain\n   * @param  {string} subject The string to wrap.\n   * @return {Object}         Returns the new wrapper object.\n   * @example\n   * v\n   *  .chain('Back to School')\n   *  .lowerCase()\n   *  .words()\n   *  .value()\n   * // => ['back', 'to', 'school']\n   */\n\n  function chain(subject) {\n    return new ChainWrapper(subject, true);\n  }\n\n  var _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n  /**\n   * Creates a chain object that wraps `subject`, enabling <i>implicit</i> chain sequences.<br/>\n   * A function that returns `number`, `boolean` or `array` type <i>terminates</i> the chain sequence and returns the unwrapped value.\n   * Otherwise use `v.prototype.value()` to unwrap the result.\n   *\n   * @memberOf Chain\n   * @since 1.0.0\n   * @function v\n   * @param {string} subject The string to wrap.\n   * @return {Object}  Returns the new wrapper object.\n   * @example\n   * v('Back to School')\n   *  .lowerCase()\n   *  .words()\n   * // => ['back', 'to', 'school']\n   *\n   * v(\" Back to School \")\n   *  .trim()\n   *  .truncate(7)\n   *  .value()\n   * // => 'Back...'\n   */\n\n\n  function Voca(subject) {\n    return new ChainWrapper(subject, false);\n  }\n\n  _extends(Voca, functions, {\n    chain: chain\n  });\n\n  return Voca;\n});","map":{"version":3,"sources":["/Users/sherikwong/Desktop/okay-inventory/node_modules/voca/index.js"],"names":["global","factory","exports","module","define","amd","v","isNil","value","undefined","coerceToBoolean","defaultValue","arguments","length","Boolean","isString","subject","coerceToString","String","capitalize","restToLower","subjectString","restToLowerCaseBoolean","toLowerCase","substr","toUpperCase","lowerCase","digit","whitespace","highSurrogate","lowSurrogate","diacriticalMark","base","REGEXP_COMBINING_MARKS","RegExp","REGEXP_SURROGATE_PAIRS","REGEXP_UNICODE_CHARACTER","REGEXP_WHITESPACE","REGEXP_TRIM_LEFT","REGEXP_TRIM_RIGHT","REGEXP_DIGIT","REGEXP_SPECIAL_CHARACTERS","REGEXP_NON_LATIN","REGEXP_HTML_SPECIAL_CHARACTERS","REGEXP_CONVERSION_SPECIFICATION","REGEXP_TRAILING_ZEROS","REGEXP_FLAGS","REGEXP_TAG_LIST","generalPunctuationBlock","nonCharacter","dingbatBlock","lowerCaseLetter","upperCaseLetter","REGEXP_WORD","REGEXP_LATIN_WORD","REGEXP_ALPHA","REGEXP_ALPHA_DIGIT","REGEXP_EXTENDED_ASCII","nilDefault","toString","words","pattern","flags","patternRegExp","test","flagsString","match","wordToCamel","word","index","camelCase","map","join","decapitalize","kebabCase","snakeCase","upperCase","swapCase","split","reduce","swapAndConcat","swapped","character","titleCase","noSplit","noSplitArray","Array","isArray","wordsRegExp","replace","isNoSplit","indexOf","clipNumber","downLimit","upLimit","MAX_SAFE_INTEGER","toInteger","Infinity","truncate","end","lengthInt","endString","charAt","position","HIGH_SURROGATE_START","HIGH_SURROGATE_END","LOW_SURROGATE_START","LOW_SURROGATE_END","isHighSurrogate","codePoint","isLowSurrogate","getAstralNumberFromSurrogatePair","coerceToNumber","Number","nanDefault","codePointAt","subjectStringLength","positionNumber","firstCodePoint","charCodeAt","secondCodePoint","first","graphemeAt","graphemeMatch","graphemeMatchIndex","exec","lastIndex","last","prune","truncatedLength","offset","wordInsertLength","slice","start","substring","count","countGrapheme","countSubstrings","substringString","substringLength","matchIndex","prototype","countWhere","predicate","context","predicateWithContext","bind","call","countTruthy","countWords","ReplacementIndex","increment","incrementOnEmptyPosition","getIndexByPosition","TYPE_INTEGER","TYPE_INTEGER_BINARY","TYPE_INTEGER_ASCII_CHARACTER","TYPE_INTEGER_DECIMAL","TYPE_INTEGER_OCTAL","TYPE_INTEGER_UNSIGNED_DECIMAL","TYPE_INTEGER_HEXADECIMAL","TYPE_INTEGER_HEXADECIMAL_UPPERCASE","TYPE_FLOAT_SCIENTIFIC","TYPE_FLOAT_SCIENTIFIC_UPPERCASE","TYPE_FLOAT","TYPE_FLOAT_SHORT","TYPE_FLOAT_SHORT_UPPERCASE","TYPE_STRING","LITERAL_SINGLE_QUOTE","LITERAL_PLUS","LITERAL_MINUS","LITERAL_PERCENT_SPECIFIER","RADIX_BINARY","RADIX_OCTAL","RADIX_HEXADECIMAL","repeat","times","timesInt","repeatString","buildPadding","padCharacters","padStringRepeat","padStringRest","padLeft","pad","padString","padRight","alignAndPad","conversion","width","padType","alignmentSpecifier","getPaddingCharacter","addSignToFormattedNumber","replacementNumber","formattedReplacement","signSpecifier","float","replacement","parseFloat","isNaN","precision","typeSpecifier","toFixed","toExponential","formatFloatAsShort","nonZeroPrecision","toPrecision","integerBase","integer","parseInt","fromCharCode","integerDecimal","stringFormat","compute","formatFunction","formattedString","ConversionSpecification","properties","percent","paddingSpecifier","isPercentLiteral","paddingCharacter","validate","replacementsLength","Error","replacementIndex","replacements","conversionSpecification","widthSpecifier","precisionSpecifier","actualReplacementIndex","sprintf","format","formatString","_len","_key","boundReplacementMatch","_toConsumableArray","arr","i","arr2","from","vprintf","apply","concat","escapeCharactersMap","replaceSpecialCharacter","escapeHtml","escapeRegExp","unescapeCharactersMap","characters","Object","keys","reduceUnescapedString","string","key","unescapeHtml","search","fromIndex","lastIndexOf","fromIndexNumber","insert","toInsert","toInsertString","diacritics","diacriticsMap","getDiacriticsMap","forEach","getLatinCharacter","characterWithoutDiacritic","removeCombiningMarks","cleanCharacter","latinise","paddingLength","paddingSideLength","paddingSideRemainingLength","getRegExpFlags","regExp","includes","searchString","appendFlagToRegExp","appendFlag","regularExpressionFlags","source","replaceAll","reverse","reverseGrapheme","$0","$1","$2","reversedString","slugify","cleanSubjectString","splice","deleteCount","toAdd","toAddString","startPosition","deleteCountNumber","_slicedToArray","sliceIterator","_arr","_n","_d","_e","_i","Symbol","iterator","_s","next","done","push","err","TypeError","tr","to","values","_extractKeysAndValues","extractKeysAndValues","_extractKeysAndValues2","keysLength","result","valuesLength","isMatch","matchValue","keyIndex","object","sort","sortStringByLength","str1","str2","reduce$1","trimLeft","whitespace$$1","whitespaceString","matchWhitespace","trimmed","reduceRight","trimRight","trim","OPTION_WIDTH","OPTION_NEW_LINE","OPTION_INDENT","OPTION_CUT","wordWrap","options","_determineOptions","determineOptions","newLine","indent","cut","subjectLength","wrappedLine","spaceToWrapAt","endsWith","isAlpha","isAlphaDigit","isBlank","isDigit","isEmpty","isLowerCase","valueString","isNumeric","valueNumeric","isUpperCase","matches","patternString","startsWith","startString","chars","codePoints","codePointArray","codePointNumber","graphemes","separator","limit","BYRE_ORDER_MARK","trim$1","hasSubstringAtIndex","lookBehind","indexOffset","extractedSubstring","parseTagList","tags","tagsList","STATE_START_TAG","STATE_NON_WHITESPACE","STATE_DONE","parseTagName","tagContent","state","tagName","char","STATE_OUTPUT","STATE_HTML","STATE_EXCLAMATION","STATE_COMMENT","trim$2","allowableTags","allowableTagsString","replacementString","hasAllowableTags","hasSubstring","depth","output","quote","advance","globalObject$1","getGlobalObject","self","Function","globalObject","previousV","noConflict","version","functions","countGraphemes","stripBom","stripTags","ChainWrapper","explicitChain","_wrappedValue","_explicitChain","valueOf","toJSON","chain","thru","changer","makeFunctionChainable","functionInstance","args","name","_extends","assign","target","hasOwnProperty","Voca"],"mappings":"AAAA;;;;;;;AAQC,WAAUA,MAAV,EAAkBC,OAAlB,EAA2B;AAC3B,SAAOC,OAAP,KAAmB,QAAnB,IAA+B,OAAOC,MAAP,KAAkB,WAAjD,GAA+DA,MAAM,CAACD,OAAP,GAAiBD,OAAO,EAAvF,GACA,OAAOG,MAAP,KAAkB,UAAlB,IAAgCA,MAAM,CAACC,GAAvC,GAA6CD,MAAM,CAACH,OAAD,CAAnD,GACCD,MAAM,CAACM,CAAP,GAAWL,OAAO,EAFnB;AAGA,CAJA,EAIC,IAJD,EAIQ,YAAY;AAAE;AAEvB;;;;;;;;;AAQA,WAASM,KAAT,CAAeC,KAAf,EAAsB;AACpB,WAAOA,KAAK,KAAKC,SAAV,IAAuBD,KAAK,KAAK,IAAxC;AACD;AAED;;;;;;;;;;;AASA,WAASE,eAAT,CAAyBF,KAAzB,EAAgC;AAC9B,QAAIG,YAAY,GAAGC,SAAS,CAACC,MAAV,GAAmB,CAAnB,IAAwBD,SAAS,CAAC,CAAD,CAAT,KAAiBH,SAAzC,GAAqDG,SAAS,CAAC,CAAD,CAA9D,GAAoE,KAAvF;;AAEA,QAAIL,KAAK,CAACC,KAAD,CAAT,EAAkB;AAChB,aAAOG,YAAP;AACD;;AACD,WAAOG,OAAO,CAACN,KAAD,CAAd;AACD;AAED;;;;;;;;;;;;;;;;;;AAgBA,WAASO,QAAT,CAAkBC,OAAlB,EAA2B;AACzB,WAAO,OAAOA,OAAP,KAAmB,QAA1B;AACD;AAED;;;;;;;;;;;;;;AAYA,WAASC,cAAT,CAAwBT,KAAxB,EAA+B;AAC7B,QAAIG,YAAY,GAAGC,SAAS,CAACC,MAAV,GAAmB,CAAnB,IAAwBD,SAAS,CAAC,CAAD,CAAT,KAAiBH,SAAzC,GAAqDG,SAAS,CAAC,CAAD,CAA9D,GAAoE,EAAvF;;AAEA,QAAIL,KAAK,CAACC,KAAD,CAAT,EAAkB;AAChB,aAAOG,YAAP;AACD;;AACD,QAAII,QAAQ,CAACP,KAAD,CAAZ,EAAqB;AACnB,aAAOA,KAAP;AACD;;AACD,WAAOU,MAAM,CAACV,KAAD,CAAb;AACD;AAED;;;;;;;;;;;;;;;;;;;;AAkBA,WAASW,UAAT,CAAoBH,OAApB,EAA6BI,WAA7B,EAA0C;AACxC,QAAIC,aAAa,GAAGJ,cAAc,CAACD,OAAD,CAAlC;AACA,QAAIM,sBAAsB,GAAGZ,eAAe,CAACU,WAAD,CAA5C;;AACA,QAAIC,aAAa,KAAK,EAAtB,EAA0B;AACxB,aAAO,EAAP;AACD;;AACD,QAAIC,sBAAJ,EAA4B;AAC1BD,MAAAA,aAAa,GAAGA,aAAa,CAACE,WAAd,EAAhB;AACD;;AACD,WAAOF,aAAa,CAACG,MAAd,CAAqB,CAArB,EAAwB,CAAxB,EAA2BC,WAA3B,KAA2CJ,aAAa,CAACG,MAAd,CAAqB,CAArB,CAAlD;AACD;AAED;;;;;;;;;;;;;;;;;;AAgBA,WAASE,SAAT,CAAmBV,OAAnB,EAA4B;AAC1B,QAAIK,aAAa,GAAGJ,cAAc,CAACD,OAAD,EAAU,EAAV,CAAlC;AACA,WAAOK,aAAa,CAACE,WAAd,EAAP;AACD;AAED;;;;;;;;AAMA,MAAII,KAAK,GAAG,KAAZ;AAEA;;;;;;;AAMA,MAAIC,UAAU,GAAG,iBAAjB;AAEA;;;;;;;AAMA,MAAIC,aAAa,GAAG,iBAApB;AAEA;;;;;;;AAMA,MAAIC,YAAY,GAAG,iBAAnB;AAEA;;;;;;;AAMA,MAAIC,eAAe,GAAG,6EAAtB;AAEA;;;;;;;AAMA,MAAIC,IAAI,GAAG,uGAAX;AAEA;;;;;;;;AAOA,MAAIC,sBAAsB,GAAG,IAAIC,MAAJ,CAAW,OAAOF,IAAP,GAAc,KAAd,GAAsBH,aAAtB,GAAsC,IAAtC,GAA6CC,YAA7C,GAA4D,KAA5D,GAAoED,aAApE,GAAoF,OAApF,GAA8FC,YAA9F,GAA6G,UAA7G,GAA0HD,aAA1H,GAA0I,OAA1I,GAAoJC,YAApJ,GAAmK,MAAnK,GAA4KC,eAA5K,GAA8L,KAAzM,EAAgN,GAAhN,CAA7B;AAEA;;;;;;;;AAOA,MAAII,sBAAsB,GAAG,IAAID,MAAJ,CAAW,OAAOL,aAAP,GAAuB,MAAvB,GAAgCC,YAAhC,GAA+C,IAA1D,EAAgE,GAAhE,CAA7B;AAEA;;;;;;;AAMA,MAAIM,wBAAwB,GAAG,IAAIF,MAAJ,CAAW,UAAUF,IAAV,GAAiB,KAAjB,GAAyBH,aAAzB,GAAyC,IAAzC,GAAgDC,YAAhD,GAA+D,KAA/D,GAAuED,aAAvE,GAAuF,OAAvF,GAAiGC,YAAjG,GAAgH,UAAhH,GAA6HD,aAA7H,GAA6I,OAA7I,GAAuJC,YAAvJ,GAAsK,QAAtK,GAAiLC,eAAjL,GAAmM;GAAnM,GACpCF,aADoC,GACpB,IADoB,GACbC,YADa,GACE;;IADb,EAGzB,GAHyB,CAA/B;AAKA;;;;;;;AAMA,MAAIO,iBAAiB,GAAG,IAAIH,MAAJ,CAAW,MAAMN,UAAN,GAAmB,GAA9B,CAAxB;AAEA;;;;;;;AAMA,MAAIU,gBAAgB,GAAG,IAAIJ,MAAJ,CAAW,OAAON,UAAP,GAAoB,IAA/B,CAAvB;AAEA;;;;;;;AAMA,MAAIW,iBAAiB,GAAG,IAAIL,MAAJ,CAAW,MAAMN,UAAN,GAAmB,KAA9B,CAAxB;AAEA;;;;;;;AAMA,MAAIY,YAAY,GAAG,IAAIN,MAAJ,CAAW,MAAMP,KAAN,GAAc,IAAzB,CAAnB;AAEA;;;;;;;AAMA,MAAIc,yBAAyB,GAAG,6BAAhC;AAEA;;;;;;;AAMA,MAAIC,gBAAgB,GAAG,eAAvB;AAEA;;;;;;;AAMA,MAAIC,8BAA8B,GAAG,WAArC;AAEA;;;;;;;AAMA,MAAIC,+BAA+B,GAAG,kFAAtC;AAEA;;;;;;;AAMA,MAAIC,qBAAqB,GAAG,SAA5B;AAEA;;;;;;;AAMA,MAAIC,YAAY,GAAG,WAAnB;AAEA;;;;;;;;AAQA,MAAIC,eAAe,GAAG,mBAAtB;AAEA;;;;;;;AAMA,MAAIC,uBAAuB,GAAG,iBAA9B;AAEA;;;;;;;AAMA,MAAIC,YAAY,GAAG,wDAAnB;AAEA;;;;;;;AAMA,MAAIC,YAAY,GAAG,iBAAnB;AAEA;;;;;;;AAMA,MAAIC,eAAe,GAAG,mlCAAtB;AAEA;;;;;;;AAMA,MAAIC,eAAe,GAAG,upCAAtB;AAEA;;;;;;;AAMA,MAAIC,WAAW,GAAG,IAAInB,MAAJ,CAAW,SAASkB,eAAT,GAA2B,IAA3B,GAAkCrB,eAAlC,GAAoD,UAApD,GAAiEoB,eAAjE,GAAmF,IAAnF,GAA0FpB,eAA1F,GAA4G;KAA5G,GACrBqB,eADqB,GACH,IADG,GACIrB,eADJ,GACsB,UADtB,GACmCoB,eADnC,GACqD;EADrD,GAExBxB,KAFwB,GAEhB;EAFgB,GAGxBuB,YAHwB,GAGT;GAHS,GAIvBD,YAJuB,GAIRD,uBAJQ,GAIkBpB,UAJlB,GAI+B,IAJ1C,EAIgD,GAJhD,CAAlB;AAMA;;;;;;;AAMA,MAAI0B,iBAAiB,GAAG,2GAAxB;AAEA;;;;;;;;AAOA,MAAIC,YAAY,GAAG,IAAIrB,MAAJ,CAAW,UAAUiB,eAAV,GAA4BC,eAA5B,GAA8C,IAA9C,GAAqDrB,eAArD,GAAuE,OAAlF,CAAnB;AAEA;;;;;;;;AAOA,MAAIyB,kBAAkB,GAAG,IAAItB,MAAJ,CAAW,WAAWiB,eAAX,GAA6BC,eAA7B,GAA+C,IAA/C,GAAsDrB,eAAtD,GAAwE,OAAxE,GAAkFJ,KAAlF,GAA0F,MAArG,CAAzB;AAEA;;;;;;;AAMA,MAAI8B,qBAAqB,GAAG,gBAA5B;AAEA;;;;;;;;;;AASA,WAASC,UAAT,CAAoBlD,KAApB,EAA2BG,YAA3B,EAAyC;AACvC,WAAOH,KAAK,IAAI,IAAT,GAAgBG,YAAhB,GAA+BH,KAAtC;AACD;AAED;;;;;;;;;;;AASA,WAASmD,QAAT,CAAkBnD,KAAlB,EAAyB;AACvB,QAAID,KAAK,CAACC,KAAD,CAAT,EAAkB;AAChB,aAAO,IAAP;AACD;;AACD,QAAIO,QAAQ,CAACP,KAAD,CAAZ,EAAqB;AACnB,aAAOA,KAAP;AACD;;AACD,WAAOU,MAAM,CAACV,KAAD,CAAb;AACD;AAED;;;;;;;;;;;;;;;;;;;;;;;;;;AAwBA,WAASoD,KAAT,CAAe5C,OAAf,EAAwB6C,OAAxB,EAAiCC,KAAjC,EAAwC;AACtC,QAAIzC,aAAa,GAAGJ,cAAc,CAACD,OAAD,CAAlC;AACA,QAAI+C,aAAa,GAAG,KAAK,CAAzB;;AACA,QAAIxD,KAAK,CAACsD,OAAD,CAAT,EAAoB;AAClBE,MAAAA,aAAa,GAAGN,qBAAqB,CAACO,IAAtB,CAA2B3C,aAA3B,IAA4CiC,iBAA5C,GAAgED,WAAhF;AACD,KAFD,MAEO,IAAIQ,OAAO,YAAY3B,MAAvB,EAA+B;AACpC6B,MAAAA,aAAa,GAAGF,OAAhB;AACD,KAFM,MAEA;AACL,UAAII,WAAW,GAAGN,QAAQ,CAACD,UAAU,CAACI,KAAD,EAAQ,EAAR,CAAX,CAA1B;AACAC,MAAAA,aAAa,GAAG,IAAI7B,MAAJ,CAAWyB,QAAQ,CAACE,OAAD,CAAnB,EAA8BI,WAA9B,CAAhB;AACD;;AACD,WAAOP,UAAU,CAACrC,aAAa,CAAC6C,KAAd,CAAoBH,aAApB,CAAD,EAAqC,EAArC,CAAjB;AACD;AAED;;;;;;;;;;AAQA,WAASI,WAAT,CAAqBC,IAArB,EAA2BC,KAA3B,EAAkC;AAChC,WAAOA,KAAK,KAAK,CAAV,GAAc3C,SAAS,CAAC0C,IAAD,CAAvB,GAAgCjD,UAAU,CAACiD,IAAD,EAAO,IAAP,CAAjD;AACD;AAED;;;;;;;;;;;;;;;;;;;;;AAmBA,WAASE,SAAT,CAAmBtD,OAAnB,EAA4B;AAC1B,QAAIK,aAAa,GAAGJ,cAAc,CAACD,OAAD,CAAlC;;AACA,QAAIK,aAAa,KAAK,EAAtB,EAA0B;AACxB,aAAO,EAAP;AACD;;AACD,WAAOuC,KAAK,CAACvC,aAAD,CAAL,CAAqBkD,GAArB,CAAyBJ,WAAzB,EAAsCK,IAAtC,CAA2C,EAA3C,CAAP;AACD;AAED;;;;;;;;;;;;;;;;;;AAgBA,WAASC,YAAT,CAAsBzD,OAAtB,EAA+B;AAC7B,QAAIK,aAAa,GAAGJ,cAAc,CAACD,OAAD,CAAlC;;AACA,QAAIK,aAAa,KAAK,EAAtB,EAA0B;AACxB,aAAO,EAAP;AACD;;AACD,WAAOA,aAAa,CAACG,MAAd,CAAqB,CAArB,EAAwB,CAAxB,EAA2BD,WAA3B,KAA2CF,aAAa,CAACG,MAAd,CAAqB,CAArB,CAAlD;AACD;AAED;;;;;;;;;;;;;;;;;;;;;;AAoBA,WAASkD,SAAT,CAAmB1D,OAAnB,EAA4B;AAC1B,QAAIK,aAAa,GAAGJ,cAAc,CAACD,OAAD,CAAlC;;AACA,QAAIK,aAAa,KAAK,EAAtB,EAA0B;AACxB,aAAO,EAAP;AACD;;AACD,WAAOuC,KAAK,CAACvC,aAAD,CAAL,CAAqBkD,GAArB,CAAyB7C,SAAzB,EAAoC8C,IAApC,CAAyC,GAAzC,CAAP;AACD;AAED;;;;;;;;;;;;;;;;;;;;;AAmBA,WAASG,SAAT,CAAmB3D,OAAnB,EAA4B;AAC1B,QAAIK,aAAa,GAAGJ,cAAc,CAACD,OAAD,CAAlC;;AACA,QAAIK,aAAa,KAAK,EAAtB,EAA0B;AACxB,aAAO,EAAP;AACD;;AACD,WAAOuC,KAAK,CAACvC,aAAD,CAAL,CAAqBkD,GAArB,CAAyB7C,SAAzB,EAAoC8C,IAApC,CAAyC,GAAzC,CAAP;AACD;AAED;;;;;;;;;;;;;;;AAaA,WAASI,SAAT,CAAmB5D,OAAnB,EAA4B;AAC1B,QAAIK,aAAa,GAAGJ,cAAc,CAACD,OAAD,CAAlC;AACA,WAAOK,aAAa,CAACI,WAAd,EAAP;AACD;AAED;;;;;;;;;;;;;;;;;;;AAiBA,WAASoD,QAAT,CAAkB7D,OAAlB,EAA2B;AACzB,QAAIK,aAAa,GAAGJ,cAAc,CAACD,OAAD,CAAlC;AACA,WAAOK,aAAa,CAACyD,KAAd,CAAoB,EAApB,EAAwBC,MAAxB,CAA+BC,aAA/B,EAA8C,EAA9C,CAAP;AACD;;AAED,WAASA,aAAT,CAAuBC,OAAvB,EAAgCC,SAAhC,EAA2C;AACzC,QAAIxD,SAAS,GAAGwD,SAAS,CAAC3D,WAAV,EAAhB;AACA,QAAIqD,SAAS,GAAGM,SAAS,CAACzD,WAAV,EAAhB;AACA,WAAOwD,OAAO,IAAIC,SAAS,KAAKxD,SAAd,GAA0BkD,SAA1B,GAAsClD,SAA1C,CAAd;AACD;AAED;;;;;;;;;;;;;;;;;;;AAiBA,WAASyD,SAAT,CAAmBnE,OAAnB,EAA4BoE,OAA5B,EAAqC;AACnC,QAAI/D,aAAa,GAAGJ,cAAc,CAACD,OAAD,CAAlC;AACA,QAAIqE,YAAY,GAAGC,KAAK,CAACC,OAAN,CAAcH,OAAd,IAAyBA,OAAzB,GAAmC,EAAtD;AACA,QAAII,WAAW,GAAG/B,qBAAqB,CAACO,IAAtB,CAA2B3C,aAA3B,IAA4CiC,iBAA5C,GAAgED,WAAlF;AACA,WAAOhC,aAAa,CAACoE,OAAd,CAAsBD,WAAtB,EAAmC,UAAUpB,IAAV,EAAgBC,KAAhB,EAAuB;AAC/D,UAAIqB,SAAS,GAAGrB,KAAK,GAAG,CAAR,IAAagB,YAAY,CAACM,OAAb,CAAqBtE,aAAa,CAACgD,KAAK,GAAG,CAAT,CAAlC,KAAkD,CAA/E;AACA,aAAOqB,SAAS,GAAGtB,IAAI,CAAC7C,WAAL,EAAH,GAAwBJ,UAAU,CAACiD,IAAD,EAAO,IAAP,CAAlD;AACD,KAHM,CAAP;AAID;AAED;;;;;;;;;;;;AAUA,WAASwB,UAAT,CAAoBpF,KAApB,EAA2BqF,SAA3B,EAAsCC,OAAtC,EAA+C;AAC7C,QAAItF,KAAK,IAAIqF,SAAb,EAAwB;AACtB,aAAOA,SAAP;AACD;;AACD,QAAIrF,KAAK,IAAIsF,OAAb,EAAsB;AACpB,aAAOA,OAAP;AACD;;AACD,WAAOtF,KAAP;AACD;AAED;;;;;;;;AAMA,MAAIuF,gBAAgB,GAAG,gBAAvB;AAEA;;;;;;;;;AAQA,WAASC,SAAT,CAAmBxF,KAAnB,EAA0B;AACxB,QAAIA,KAAK,KAAKyF,QAAd,EAAwB;AACtB,aAAOF,gBAAP;AACD;;AACD,QAAIvF,KAAK,KAAK,CAACyF,QAAf,EAAyB;AACvB,aAAO,CAACF,gBAAR;AACD;;AACD,WAAO,CAAC,CAACvF,KAAT;AACD;AAED;;;;;;;;;;;;;;;;;;;;;;;AAqBA,WAAS0F,QAAT,CAAkBlF,OAAlB,EAA2BH,MAA3B,EAAmCsF,GAAnC,EAAwC;AACtC,QAAI9E,aAAa,GAAGJ,cAAc,CAACD,OAAD,CAAlC;AACA,QAAIoF,SAAS,GAAG7F,KAAK,CAACM,MAAD,CAAL,GAAgBQ,aAAa,CAACR,MAA9B,GAAuC+E,UAAU,CAACI,SAAS,CAACnF,MAAD,CAAV,EAAoB,CAApB,EAAuBkF,gBAAvB,CAAjE;AACA,QAAIM,SAAS,GAAGpF,cAAc,CAACkF,GAAD,EAAM,KAAN,CAA9B;;AACA,QAAIC,SAAS,IAAI/E,aAAa,CAACR,MAA/B,EAAuC;AACrC,aAAOQ,aAAP;AACD;;AACD,WAAOA,aAAa,CAACG,MAAd,CAAqB,CAArB,EAAwBX,MAAM,GAAGwF,SAAS,CAACxF,MAA3C,IAAqDwF,SAA5D;AACD;AAED;;;;;;;;;;;;;;;;;;;AAiBA,WAASC,MAAT,CAAgBtF,OAAhB,EAAyBuF,QAAzB,EAAmC;AACjC,QAAIlF,aAAa,GAAGJ,cAAc,CAACD,OAAD,CAAlC;AACA,WAAOK,aAAa,CAACiF,MAAd,CAAqBC,QAArB,CAAP;AACD;;AAED,MAAIC,oBAAoB,GAAG,MAA3B;AACA,MAAIC,kBAAkB,GAAG,MAAzB;AACA,MAAIC,mBAAmB,GAAG,MAA1B;AACA,MAAIC,iBAAiB,GAAG,MAAxB;AAEA;;;;;;;;AAOA,WAASC,eAAT,CAAyBC,SAAzB,EAAoC;AAClC,WAAOA,SAAS,IAAIL,oBAAb,IAAqCK,SAAS,IAAIJ,kBAAzD;AACD;AAED;;;;;;;;;AAOA,WAASK,cAAT,CAAwBD,SAAxB,EAAmC;AACjC,WAAOA,SAAS,IAAIH,mBAAb,IAAoCG,SAAS,IAAIF,iBAAxD;AACD;AAED;;;;;;;;;;AAQA,WAASI,gCAAT,CAA0ClF,aAA1C,EAAyDC,YAAzD,EAAuE;AACrE,WAAO,CAACD,aAAa,GAAG2E,oBAAjB,IAAyC,KAAzC,GAAiD1E,YAAjD,GAAgE4E,mBAAhE,GAAsF,OAA7F;AACD;AAED;;;;;;;;;;;;;;AAYA,WAASM,cAAT,CAAwBxG,KAAxB,EAA+B;AAC7B,QAAIG,YAAY,GAAGC,SAAS,CAACC,MAAV,GAAmB,CAAnB,IAAwBD,SAAS,CAAC,CAAD,CAAT,KAAiBH,SAAzC,GAAqDG,SAAS,CAAC,CAAD,CAA9D,GAAoE,CAAvF;;AAEA,QAAIL,KAAK,CAACC,KAAD,CAAT,EAAkB;AAChB,aAAOG,YAAP;AACD;;AACD,QAAI,OAAOH,KAAP,KAAiB,QAArB,EAA+B;AAC7B,aAAOA,KAAP;AACD;;AACD,WAAOyG,MAAM,CAACzG,KAAD,CAAb;AACD;AAED;;;;;;;;;;;AASA,WAAS0G,UAAT,CAAoB1G,KAApB,EAA2BG,YAA3B,EAAyC;AACvC,WAAOH,KAAK,KAAKA,KAAV,GAAkBG,YAAlB,GAAiCH,KAAxC;AACD;AAED;;;;;;;;;;;;;;;;;;;;;;;AAqBA,WAAS2G,WAAT,CAAqBnG,OAArB,EAA8BuF,QAA9B,EAAwC;AACtC,QAAIlF,aAAa,GAAGJ,cAAc,CAACD,OAAD,CAAlC;AACA,QAAIoG,mBAAmB,GAAG/F,aAAa,CAACR,MAAxC;AACA,QAAIwG,cAAc,GAAGL,cAAc,CAACT,QAAD,CAAnC;AACAc,IAAAA,cAAc,GAAGH,UAAU,CAACG,cAAD,EAAiB,CAAjB,CAA3B;;AACA,QAAIA,cAAc,GAAG,CAAjB,IAAsBA,cAAc,IAAID,mBAA5C,EAAiE;AAC/D,aAAO3G,SAAP;AACD;;AACD,QAAI6G,cAAc,GAAGjG,aAAa,CAACkG,UAAd,CAAyBF,cAAzB,CAArB;AACA,QAAIG,eAAe,GAAG,KAAK,CAA3B;;AACA,QAAIZ,eAAe,CAACU,cAAD,CAAf,IAAmCF,mBAAmB,GAAGC,cAAc,GAAG,CAA9E,EAAiF;AAC/EG,MAAAA,eAAe,GAAGnG,aAAa,CAACkG,UAAd,CAAyBF,cAAc,GAAG,CAA1C,CAAlB;;AACA,UAAIP,cAAc,CAACU,eAAD,CAAlB,EAAqC;AACnC,eAAOT,gCAAgC,CAACO,cAAD,EAAiBE,eAAjB,CAAvC;AACD;AACF;;AACD,WAAOF,cAAP;AACD;AAED;;;;;;;;;;;;;;;;;;;;;;AAoBA,WAASG,KAAT,CAAezG,OAAf,EAAwBH,MAAxB,EAAgC;AAC9B,QAAIQ,aAAa,GAAGJ,cAAc,CAACD,OAAD,CAAlC;AACA,QAAIoF,SAAS,GAAG7F,KAAK,CAACM,MAAD,CAAL,GAAgB,CAAhB,GAAoB+E,UAAU,CAACI,SAAS,CAACnF,MAAD,CAAV,EAAoB,CAApB,EAAuBkF,gBAAvB,CAA9C;;AACA,QAAI1E,aAAa,CAACR,MAAd,IAAwBuF,SAA5B,EAAuC;AACrC,aAAO/E,aAAP;AACD;;AACD,WAAOA,aAAa,CAACG,MAAd,CAAqB,CAArB,EAAwB4E,SAAxB,CAAP;AACD;AAED;;;;;;;;;;;;;;;;;;;;;AAmBA,WAASsB,UAAT,CAAoB1G,OAApB,EAA6BuF,QAA7B,EAAuC;AACrC,QAAIlF,aAAa,GAAGJ,cAAc,CAACD,OAAD,CAAlC;AACA,QAAIqG,cAAc,GAAGL,cAAc,CAACT,QAAD,CAAnC;AACA,QAAIoB,aAAa,GAAG,KAAK,CAAzB;AACA,QAAIC,kBAAkB,GAAG,CAAzB;AACAP,IAAAA,cAAc,GAAGH,UAAU,CAACG,cAAD,EAAiB,CAAjB,CAA3B;;AACA,WAAO,CAACM,aAAa,GAAGvF,wBAAwB,CAACyF,IAAzB,CAA8BxG,aAA9B,CAAjB,MAAmE,IAA1E,EAAgF;AAC9E,UAAIuG,kBAAkB,KAAKP,cAA3B,EAA2C;AACzCjF,QAAAA,wBAAwB,CAAC0F,SAAzB,GAAqC,CAArC;AACA,eAAOH,aAAa,CAAC,CAAD,CAApB;AACD;;AACDC,MAAAA,kBAAkB;AACnB;;AACD,WAAO,EAAP;AACD;AAED;;;;;;;;;;;;;;;;;;;;;;AAoBA,WAASG,IAAT,CAAc/G,OAAd,EAAuBH,MAAvB,EAA+B;AAC7B,QAAIQ,aAAa,GAAGJ,cAAc,CAACD,OAAD,CAAlC;AACA,QAAIoF,SAAS,GAAG7F,KAAK,CAACM,MAAD,CAAL,GAAgB,CAAhB,GAAoB+E,UAAU,CAACI,SAAS,CAACnF,MAAD,CAAV,EAAoB,CAApB,EAAuBkF,gBAAvB,CAA9C;;AACA,QAAI1E,aAAa,CAACR,MAAd,IAAwBuF,SAA5B,EAAuC;AACrC,aAAO/E,aAAP;AACD;;AACD,WAAOA,aAAa,CAACG,MAAd,CAAqBH,aAAa,CAACR,MAAd,GAAuBuF,SAA5C,EAAuDA,SAAvD,CAAP;AACD;AAED;;;;;;;;;;;;;;;;;;;;;;;;AAsBA,WAAS4B,KAAT,CAAehH,OAAf,EAAwBH,MAAxB,EAAgCsF,GAAhC,EAAqC;AACnC,QAAI9E,aAAa,GAAGJ,cAAc,CAACD,OAAD,CAAlC;AACA,QAAIoF,SAAS,GAAG7F,KAAK,CAACM,MAAD,CAAL,GAAgBQ,aAAa,CAACR,MAA9B,GAAuC+E,UAAU,CAACI,SAAS,CAACnF,MAAD,CAAV,EAAoB,CAApB,EAAuBkF,gBAAvB,CAAjE;AACA,QAAIM,SAAS,GAAGpF,cAAc,CAACkF,GAAD,EAAM,KAAN,CAA9B;;AACA,QAAIC,SAAS,IAAI/E,aAAa,CAACR,MAA/B,EAAuC;AACrC,aAAOQ,aAAP;AACD;;AACD,QAAIwC,OAAO,GAAGJ,qBAAqB,CAACO,IAAtB,CAA2B3C,aAA3B,IAA4CiC,iBAA5C,GAAgED,WAA9E;AACA,QAAI4E,eAAe,GAAG,CAAtB;AACA5G,IAAAA,aAAa,CAACoE,OAAd,CAAsB5B,OAAtB,EAA+B,UAAUO,IAAV,EAAgB8D,MAAhB,EAAwB;AACrD,UAAIC,gBAAgB,GAAGD,MAAM,GAAG9D,IAAI,CAACvD,MAArC;;AACA,UAAIsH,gBAAgB,IAAI/B,SAAS,GAAGC,SAAS,CAACxF,MAA9C,EAAsD;AACpDoH,QAAAA,eAAe,GAAGE,gBAAlB;AACD;AACF,KALD;AAMA,WAAO9G,aAAa,CAACG,MAAd,CAAqB,CAArB,EAAwByG,eAAxB,IAA2C5B,SAAlD;AACD;AAED;;;;;;;;;;;;;;;;;;;;;;;;;AAuBA,WAAS+B,KAAT,CAAepH,OAAf,EAAwBqH,KAAxB,EAA+BlC,GAA/B,EAAoC;AAClC,WAAOlF,cAAc,CAACD,OAAD,CAAd,CAAwBoH,KAAxB,CAA8BC,KAA9B,EAAqClC,GAArC,CAAP;AACD;AAED;;;;;;;;;;;;;;;;;;;;;AAmBA,WAAS3E,MAAT,CAAgBR,OAAhB,EAAyBqH,KAAzB,EAAgCxH,MAAhC,EAAwC;AACtC,WAAOI,cAAc,CAACD,OAAD,CAAd,CAAwBQ,MAAxB,CAA+B6G,KAA/B,EAAsCxH,MAAtC,CAAP;AACD;AAED;;;;;;;;;;;;;;;;;;;;;;AAoBA,WAASyH,SAAT,CAAmBtH,OAAnB,EAA4BqH,KAA5B,EAAmClC,GAAnC,EAAwC;AACtC,WAAOlF,cAAc,CAACD,OAAD,CAAd,CAAwBsH,SAAxB,CAAkCD,KAAlC,EAAyClC,GAAzC,CAAP;AACD;AAED;;;;;;;;;;;;;;;AAaA,WAASoC,KAAT,CAAevH,OAAf,EAAwB;AACtB,WAAOC,cAAc,CAACD,OAAD,CAAd,CAAwBH,MAA/B;AACD;AAED;;;;;;;;;;;;;;;;;;;;;;;AAqBA,WAAS2H,aAAT,CAAuBxH,OAAvB,EAAgC;AAC9B,WAAOC,cAAc,CAACD,OAAD,CAAd,CAAwByE,OAAxB,CAAgCxD,sBAAhC,EAAwD,GAAxD,EAA6DwD,OAA7D,CAAqEtD,sBAArE,EAA6F,GAA7F,EAAkGtB,MAAzG;AACD;AAED;;;;;;;;;;;;;;;;;;;AAiBA,WAAS4H,eAAT,CAAyBzH,OAAzB,EAAkCsH,SAAlC,EAA6C;AAC3C,QAAIjH,aAAa,GAAGJ,cAAc,CAACD,OAAD,CAAlC;AACA,QAAI0H,eAAe,GAAGzH,cAAc,CAACqH,SAAD,CAApC;AACA,QAAIK,eAAe,GAAGD,eAAe,CAAC7H,MAAtC;AACA,QAAI0H,KAAK,GAAG,CAAZ;AACA,QAAIK,UAAU,GAAG,CAAjB;;AACA,QAAIvH,aAAa,KAAK,EAAlB,IAAwBqH,eAAe,KAAK,EAAhD,EAAoD;AAClD,aAAOH,KAAP;AACD;;AACD,OAAG;AACDK,MAAAA,UAAU,GAAGvH,aAAa,CAACsE,OAAd,CAAsB+C,eAAtB,EAAuCE,UAAvC,CAAb;;AACA,UAAIA,UAAU,KAAK,CAAC,CAApB,EAAuB;AACrBL,QAAAA,KAAK;AACLK,QAAAA,UAAU,IAAID,eAAd;AACD;AACF,KAND,QAMSC,UAAU,KAAK,CAAC,CANzB;;AAOA,WAAOL,KAAP;AACD;;AAED,MAAIxD,MAAM,GAAGO,KAAK,CAACuD,SAAN,CAAgB9D,MAA7B;AAEA;;;;;;;;;;;;;;;;;;;;;AAoBA,WAAS+D,UAAT,CAAoB9H,OAApB,EAA6B+H,SAA7B,EAAwCC,OAAxC,EAAiD;AAC/C,QAAI3H,aAAa,GAAGJ,cAAc,CAACD,OAAD,CAAlC;;AACA,QAAIK,aAAa,KAAK,EAAlB,IAAwB,OAAO0H,SAAP,KAAqB,UAAjD,EAA6D;AAC3D,aAAO,CAAP;AACD;;AACD,QAAIE,oBAAoB,GAAGF,SAAS,CAACG,IAAV,CAAeF,OAAf,CAA3B;AACA,WAAOjE,MAAM,CAACoE,IAAP,CAAY9H,aAAZ,EAA2B,UAAU+H,WAAV,EAAuBlE,SAAvB,EAAkCb,KAAlC,EAAyC;AACzE,aAAO4E,oBAAoB,CAAC/D,SAAD,EAAYb,KAAZ,EAAmBhD,aAAnB,CAApB,GAAwD+H,WAAW,GAAG,CAAtE,GAA0EA,WAAjF;AACD,KAFM,EAEJ,CAFI,CAAP;AAGD;AAED;;;;;;;;;;;;;;;;;;;;;;;;;;AAwBA,WAASC,UAAT,CAAoBrI,OAApB,EAA6B6C,OAA7B,EAAsCC,KAAtC,EAA6C;AAC3C,WAAOF,KAAK,CAAC5C,OAAD,EAAU6C,OAAV,EAAmBC,KAAnB,CAAL,CAA+BjD,MAAtC;AACD;AAED;;;;;;;;;;AAQA,WAASyI,gBAAT,GAA4B;AAC1B,SAAKjF,KAAL,GAAa,CAAb;AACD;AAED;;;;;;;;AAMAiF,EAAAA,gBAAgB,CAACT,SAAjB,CAA2BU,SAA3B,GAAuC,YAAY;AACjD,SAAKlF,KAAL;AACD,GAFD;AAIA;;;;;;;;;AAOAiF,EAAAA,gBAAgB,CAACT,SAAjB,CAA2BW,wBAA3B,GAAsD,UAAUjD,QAAV,EAAoB;AACxE,QAAIhG,KAAK,CAACgG,QAAD,CAAT,EAAqB;AACnB,WAAKgD,SAAL;AACD;AACF,GAJD;AAMA;;;;;;;;;AAOAD,EAAAA,gBAAgB,CAACT,SAAjB,CAA2BY,kBAA3B,GAAgD,UAAUlD,QAAV,EAAoB;AAClE,WAAOhG,KAAK,CAACgG,QAAD,CAAL,GAAkB,KAAKlC,KAAvB,GAA+BkC,QAAQ,GAAG,CAAjD;AACD,GAFD,CA5tCqB,CAguCrB;;;AACA,MAAImD,YAAY,GAAG,GAAnB;AACA,MAAIC,mBAAmB,GAAG,GAA1B;AACA,MAAIC,4BAA4B,GAAG,GAAnC;AACA,MAAIC,oBAAoB,GAAG,GAA3B;AACA,MAAIC,kBAAkB,GAAG,GAAzB;AACA,MAAIC,6BAA6B,GAAG,GAApC;AACA,MAAIC,wBAAwB,GAAG,GAA/B;AACA,MAAIC,kCAAkC,GAAG,GAAzC;AACA,MAAIC,qBAAqB,GAAG,GAA5B;AACA,MAAIC,+BAA+B,GAAG,GAAtC;AACA,MAAIC,UAAU,GAAG,GAAjB;AACA,MAAIC,gBAAgB,GAAG,GAAvB;AACA,MAAIC,0BAA0B,GAAG,GAAjC;AACA,MAAIC,WAAW,GAAG,GAAlB,CA9uCqB,CAgvCrB;;AAEA,MAAIC,oBAAoB,GAAG,GAA3B;AACA,MAAIC,YAAY,GAAG,GAAnB;AACA,MAAIC,aAAa,GAAG,GAApB;AACA,MAAIC,yBAAyB,GAAG,IAAhC,CArvCqB,CAuvCrB;;AACA,MAAIC,YAAY,GAAG,CAAnB;AACA,MAAIC,WAAW,GAAG,CAAlB;AAEA,MAAIC,iBAAiB,GAAG,EAAxB;AAEA;;;;;;;;;;;;;;;;;;AAiBA,WAASC,MAAT,CAAgB/J,OAAhB,EAAyBgK,KAAzB,EAAgC;AAC9B,QAAI3J,aAAa,GAAGJ,cAAc,CAACD,OAAD,CAAlC;AACA,QAAIiK,QAAQ,GAAG1K,KAAK,CAACyK,KAAD,CAAL,GAAe,CAAf,GAAmBpF,UAAU,CAACI,SAAS,CAACgF,KAAD,CAAV,EAAmB,CAAnB,EAAsBjF,gBAAtB,CAA5C;AACA,QAAImF,YAAY,GAAG,EAAnB;;AACA,WAAOD,QAAP,EAAiB;AACf,UAAIA,QAAQ,GAAG,CAAf,EAAkB;AAChBC,QAAAA,YAAY,IAAI7J,aAAhB;AACD;;AACD,UAAI4J,QAAQ,GAAG,CAAf,EAAkB;AAChB5J,QAAAA,aAAa,IAAIA,aAAjB;AACD;;AACD4J,MAAAA,QAAQ,KAAK,CAAb;AACD;;AACD,WAAOC,YAAP;AACD;AAED;;;;;;;;;;AAQA,WAASC,YAAT,CAAsBC,aAAtB,EAAqCvK,MAArC,EAA6C;AAC3C,QAAIwK,eAAe,GAAGrF,SAAS,CAACnF,MAAM,GAAGuK,aAAa,CAACvK,MAAxB,CAA/B;AACA,QAAIyK,aAAa,GAAGzK,MAAM,GAAGuK,aAAa,CAACvK,MAA3C;AACA,WAAOkK,MAAM,CAACK,aAAD,EAAgBC,eAAe,GAAGC,aAAlC,CAAN,CAAuD9J,MAAvD,CAA8D,CAA9D,EAAiEX,MAAjE,CAAP;AACD;AAED;;;;;;;;;;;;;;;;;;;;;;;AAqBA,WAAS0K,OAAT,CAAiBvK,OAAjB,EAA0BH,MAA1B,EAAkC2K,GAAlC,EAAuC;AACrC,QAAInK,aAAa,GAAGJ,cAAc,CAACD,OAAD,CAAlC;AACA,QAAIoF,SAAS,GAAG7F,KAAK,CAACM,MAAD,CAAL,GAAgB,CAAhB,GAAoB+E,UAAU,CAACI,SAAS,CAACnF,MAAD,CAAV,EAAoB,CAApB,EAAuBkF,gBAAvB,CAA9C;AACA,QAAI0F,SAAS,GAAGxK,cAAc,CAACuK,GAAD,EAAM,GAAN,CAA9B;;AACA,QAAIpF,SAAS,IAAI/E,aAAa,CAACR,MAA/B,EAAuC;AACrC,aAAOQ,aAAP;AACD;;AACD,WAAO8J,YAAY,CAACM,SAAD,EAAYrF,SAAS,GAAG/E,aAAa,CAACR,MAAtC,CAAZ,GAA4DQ,aAAnE;AACD;AAED;;;;;;;;;;;;;;;;;;;;;;;AAqBA,WAASqK,QAAT,CAAkB1K,OAAlB,EAA2BH,MAA3B,EAAmC2K,GAAnC,EAAwC;AACtC,QAAInK,aAAa,GAAGJ,cAAc,CAACD,OAAD,CAAlC;AACA,QAAIoF,SAAS,GAAG7F,KAAK,CAACM,MAAD,CAAL,GAAgB,CAAhB,GAAoB+E,UAAU,CAACI,SAAS,CAACnF,MAAD,CAAV,EAAoB,CAApB,EAAuBkF,gBAAvB,CAA9C;AACA,QAAI0F,SAAS,GAAGxK,cAAc,CAACuK,GAAD,EAAM,GAAN,CAA9B;;AACA,QAAIpF,SAAS,IAAI/E,aAAa,CAACR,MAA/B,EAAuC;AACrC,aAAOQ,aAAP;AACD;;AACD,WAAOA,aAAa,GAAG8J,YAAY,CAACM,SAAD,EAAYrF,SAAS,GAAG/E,aAAa,CAACR,MAAtC,CAAnC;AACD;AAED;;;;;;;;;;AAQA,WAAS8K,WAAT,CAAqB3K,OAArB,EAA8B4K,UAA9B,EAA0C;AACxC,QAAIC,KAAK,GAAGD,UAAU,CAACC,KAAvB;;AACA,QAAItL,KAAK,CAACsL,KAAD,CAAL,IAAgB7K,OAAO,CAACH,MAAR,IAAkBgL,KAAtC,EAA6C;AAC3C,aAAO7K,OAAP;AACD;;AACD,QAAI8K,OAAO,GAAGF,UAAU,CAACG,kBAAX,KAAkCrB,aAAlC,GAAkDgB,QAAlD,GAA6DH,OAA3E;AACA,WAAOO,OAAO,CAAC9K,OAAD,EAAU6K,KAAV,EAAiBD,UAAU,CAACI,mBAAX,EAAjB,CAAd;AACD;AAED;;;;;;;;;;;;AAUA,WAASC,wBAAT,CAAkCC,iBAAlC,EAAqDC,oBAArD,EAA2EP,UAA3E,EAAuF;AACrF,QAAIA,UAAU,CAACQ,aAAX,KAA6B3B,YAA7B,IAA6CyB,iBAAiB,IAAI,CAAtE,EAAyE;AACvEC,MAAAA,oBAAoB,GAAG1B,YAAY,GAAG0B,oBAAtC;AACD;;AACD,WAAOA,oBAAP;AACD;AAED;;;;;;;;;;AASA,WAASE,KAAT,CAAeC,WAAf,EAA4BV,UAA5B,EAAwC;AACtC,QAAIM,iBAAiB,GAAGK,UAAU,CAACD,WAAD,CAAlC;AACA,QAAIH,oBAAoB,GAAG,KAAK,CAAhC;;AACA,QAAIK,KAAK,CAACN,iBAAD,CAAT,EAA8B;AAC5BA,MAAAA,iBAAiB,GAAG,CAApB;AACD;;AACD,QAAIO,SAAS,GAAGzF,cAAc,CAAC4E,UAAU,CAACa,SAAZ,EAAuB,CAAvB,CAA9B;;AACA,YAAQb,UAAU,CAACc,aAAnB;AACE,WAAKtC,UAAL;AACE+B,QAAAA,oBAAoB,GAAGD,iBAAiB,CAACS,OAAlB,CAA0BF,SAA1B,CAAvB;AACA;;AACF,WAAKvC,qBAAL;AACEiC,QAAAA,oBAAoB,GAAGD,iBAAiB,CAACU,aAAlB,CAAgCH,SAAhC,CAAvB;AACA;;AACF,WAAKtC,+BAAL;AACEgC,QAAAA,oBAAoB,GAAGD,iBAAiB,CAACU,aAAlB,CAAgCH,SAAhC,EAA2ChL,WAA3C,EAAvB;AACA;;AACF,WAAK4I,gBAAL;AACA,WAAKC,0BAAL;AACE6B,QAAAA,oBAAoB,GAAGU,kBAAkB,CAACX,iBAAD,EAAoBO,SAApB,EAA+Bb,UAA/B,CAAzC;AACA;AAbJ;;AAeAO,IAAAA,oBAAoB,GAAGF,wBAAwB,CAACC,iBAAD,EAAoBC,oBAApB,EAA0CP,UAA1C,CAA/C;AACA,WAAO3K,cAAc,CAACkL,oBAAD,CAArB;AACD;AAED;;;;;;;;;;;AASA,WAASU,kBAAT,CAA4BX,iBAA5B,EAA+CO,SAA/C,EAA0Db,UAA1D,EAAsE;AACpE,QAAIM,iBAAiB,KAAK,CAA1B,EAA6B;AAC3B,aAAO,GAAP;AACD;;AACD,QAAIY,gBAAgB,GAAGL,SAAS,KAAK,CAAd,GAAkB,CAAlB,GAAsBA,SAA7C;AACA,QAAIN,oBAAoB,GAAGD,iBAAiB,CAACa,WAAlB,CAA8BD,gBAA9B,EAAgDrH,OAAhD,CAAwD5C,qBAAxD,EAA+E,EAA/E,CAA3B;;AACA,QAAI+I,UAAU,CAACc,aAAX,KAA6BpC,0BAAjC,EAA6D;AAC3D6B,MAAAA,oBAAoB,GAAGA,oBAAoB,CAAC1K,WAArB,EAAvB;AACD;;AACD,WAAO0K,oBAAP;AACD;AAED;;;;;;;;;;AASA,WAASa,WAAT,CAAqBV,WAArB,EAAkCV,UAAlC,EAA8C;AAC5C,QAAIqB,OAAO,GAAGC,QAAQ,CAACZ,WAAD,CAAtB;;AACA,QAAIE,KAAK,CAACS,OAAD,CAAT,EAAoB;AAClBA,MAAAA,OAAO,GAAG,CAAV;AACD;;AACDA,IAAAA,OAAO,GAAGA,OAAO,KAAK,CAAtB;;AACA,YAAQrB,UAAU,CAACc,aAAnB;AACE,WAAK9C,4BAAL;AACEqD,QAAAA,OAAO,GAAG/L,MAAM,CAACiM,YAAP,CAAoBF,OAApB,CAAV;AACA;;AACF,WAAKtD,mBAAL;AACEsD,QAAAA,OAAO,GAAGA,OAAO,CAACtJ,QAAR,CAAiBiH,YAAjB,CAAV;AACA;;AACF,WAAKd,kBAAL;AACEmD,QAAAA,OAAO,GAAGA,OAAO,CAACtJ,QAAR,CAAiBkH,WAAjB,CAAV;AACA;;AACF,WAAKb,wBAAL;AACEiD,QAAAA,OAAO,GAAGA,OAAO,CAACtJ,QAAR,CAAiBmH,iBAAjB,CAAV;AACA;;AACF,WAAKb,kCAAL;AACEgD,QAAAA,OAAO,GAAGA,OAAO,CAACtJ,QAAR,CAAiBmH,iBAAjB,EAAoCrJ,WAApC,EAAV;AACA;AAfJ;;AAiBA,WAAOR,cAAc,CAACgM,OAAD,CAArB;AACD;AAED;;;;;;;;;;AASA,WAASG,cAAT,CAAwBd,WAAxB,EAAqCV,UAArC,EAAiD;AAC/C,QAAIqB,OAAO,GAAGC,QAAQ,CAACZ,WAAD,CAAtB;;AACA,QAAIE,KAAK,CAACS,OAAD,CAAT,EAAoB;AAClBA,MAAAA,OAAO,GAAG,CAAV;AACD;;AACD,WAAOhB,wBAAwB,CAACgB,OAAD,EAAUtJ,QAAQ,CAACsJ,OAAD,CAAlB,EAA6BrB,UAA7B,CAA/B;AACD;AAED;;;;;;;;;;AAQA,WAASyB,YAAT,CAAsBf,WAAtB,EAAmCV,UAAnC,EAA+C;AAC7C,QAAIO,oBAAoB,GAAGG,WAA3B;AACA,QAAIG,SAAS,GAAGb,UAAU,CAACa,SAA3B;;AACA,QAAI,CAAClM,KAAK,CAACkM,SAAD,CAAN,IAAqBN,oBAAoB,CAACtL,MAArB,GAA8B4L,SAAvD,EAAkE;AAChEN,MAAAA,oBAAoB,GAAGjG,QAAQ,CAACiG,oBAAD,EAAuBM,SAAvB,EAAkC,EAAlC,CAA/B;AACD;;AACD,WAAON,oBAAP;AACD;AAED;;;;;;;;;;;AASA,WAASmB,OAAT,CAAiBhB,WAAjB,EAA8BV,UAA9B,EAA0C;AACxC,QAAI2B,cAAc,GAAG,KAAK,CAA1B;;AACA,YAAQ3B,UAAU,CAACc,aAAnB;AACE,WAAKnC,WAAL;AACEgD,QAAAA,cAAc,GAAGF,YAAjB;AACA;;AACF,WAAKxD,oBAAL;AACA,WAAKH,YAAL;AACE6D,QAAAA,cAAc,GAAGH,cAAjB;AACA;;AACF,WAAKxD,4BAAL;AACA,WAAKD,mBAAL;AACA,WAAKG,kBAAL;AACA,WAAKE,wBAAL;AACA,WAAKC,kCAAL;AACA,WAAKF,6BAAL;AACEwD,QAAAA,cAAc,GAAGP,WAAjB;AACA;;AACF,WAAK5C,UAAL;AACA,WAAKF,qBAAL;AACA,WAAKC,+BAAL;AACA,WAAKE,gBAAL;AACA,WAAKC,0BAAL;AACEiD,QAAAA,cAAc,GAAGlB,KAAjB;AACA;AAtBJ;;AAwBA,QAAImB,eAAe,GAAGD,cAAc,CAACjB,WAAD,EAAcV,UAAd,CAApC;AACA,WAAOD,WAAW,CAAC6B,eAAD,EAAkB5B,UAAlB,CAAlB;AACD;AAED;;;;;;;;;AAOA,WAAS6B,uBAAT,CAAiCC,UAAjC,EAA6C;AAE3C;;;;;;;AAOA,SAAKC,OAAL,GAAeD,UAAU,CAACC,OAA1B;AAEA;;;;;;;;AAOA,SAAKvB,aAAL,GAAqBsB,UAAU,CAACtB,aAAhC;AAEA;;;;;;;;AAOA,SAAKwB,gBAAL,GAAwBF,UAAU,CAACE,gBAAnC;AAEA;;;;;;;;AAOA,SAAK7B,kBAAL,GAA0B2B,UAAU,CAAC3B,kBAArC;AAEA;;;;;;;;AAOA,SAAKF,KAAL,GAAa6B,UAAU,CAAC7B,KAAxB;AAEA;;;;;;;;AAOA,SAAKY,SAAL,GAAiBiB,UAAU,CAACjB,SAA5B;AAEA;;;;;;;;AAOA,SAAKC,aAAL,GAAqBgB,UAAU,CAAChB,aAAhC;AACD;AAED;;;;;;;;AAMAe,EAAAA,uBAAuB,CAAC5E,SAAxB,CAAkCgF,gBAAlC,GAAqD,YAAY;AAC/D,WAAOlD,yBAAyB,KAAK,KAAKgD,OAA1C;AACD,GAFD;AAIA;;;;;;;;AAMAF,EAAAA,uBAAuB,CAAC5E,SAAxB,CAAkCmD,mBAAlC,GAAwD,YAAY;AAClE,QAAI8B,gBAAgB,GAAGpK,UAAU,CAAC,KAAKkK,gBAAN,EAAwB,GAAxB,CAAjC;;AACA,QAAIE,gBAAgB,CAACjN,MAAjB,KAA4B,CAA5B,IAAiCiN,gBAAgB,CAAC,CAAD,CAAhB,KAAwBtD,oBAA7D,EAAmF;AACjFsD,MAAAA,gBAAgB,GAAGA,gBAAgB,CAAC,CAAD,CAAnC;AACD;;AACD,WAAOA,gBAAP;AACD,GAND;AAQA;;;;;;;;;;;;AAUA,WAASC,QAAT,CAAkB1J,KAAlB,EAAyB2J,kBAAzB,EAA6CpC,UAA7C,EAAyD;AACvD,QAAIrL,KAAK,CAACqL,UAAU,CAACc,aAAZ,CAAT,EAAqC;AACnC,YAAM,IAAIuB,KAAJ,CAAU,mCAAV,CAAN;AACD;;AACD,QAAI5J,KAAK,GAAG2J,kBAAkB,GAAG,CAAjC,EAAoC;AAClC,YAAM,IAAIC,KAAJ,CAAU,8BAAV,CAAN;AACD;;AACD,QAAI5J,KAAK,GAAG,CAAZ,EAAe;AACb,YAAM,IAAI4J,KAAJ,CAAU,sDAAV,CAAN;AACD;AACF;AAED;;;;;;;;;;;;;;;;;;;;AAkBA,WAAS/J,KAAT,CAAegK,gBAAf,EAAiCC,YAAjC,EAA+CC,uBAA/C,EAAwET,OAAxE,EAAiFpH,QAAjF,EAA2F6F,aAA3F,EAA0GwB,gBAA1G,EAA4H7B,kBAA5H,EAAgJsC,cAAhJ,EAAgKC,kBAAhK,EAAoL5B,aAApL,EAAmM;AACjM,QAAId,UAAU,GAAG,IAAI6B,uBAAJ,CAA4B;AAC3CE,MAAAA,OAAO,EAAEA,OADkC;AAE3CvB,MAAAA,aAAa,EAAEA,aAF4B;AAG3CwB,MAAAA,gBAAgB,EAAEA,gBAHyB;AAI3C7B,MAAAA,kBAAkB,EAAEA,kBAJuB;AAK3CF,MAAAA,KAAK,EAAE7E,cAAc,CAACqH,cAAD,EAAiB,IAAjB,CALsB;AAM3C5B,MAAAA,SAAS,EAAEzF,cAAc,CAACsH,kBAAD,EAAqB,IAArB,CANkB;AAO3C5B,MAAAA,aAAa,EAAEA;AAP4B,KAA5B,CAAjB;;AASA,QAAId,UAAU,CAACiC,gBAAX,EAAJ,EAAmC;AACjC,aAAOO,uBAAuB,CAAChG,KAAxB,CAA8B,CAA9B,CAAP;AACD;;AACD,QAAImG,sBAAsB,GAAGL,gBAAgB,CAACzE,kBAAjB,CAAoClD,QAApC,CAA7B;AACA2H,IAAAA,gBAAgB,CAAC1E,wBAAjB,CAA0CjD,QAA1C;AACAwH,IAAAA,QAAQ,CAACQ,sBAAD,EAAyBJ,YAAY,CAACtN,MAAtC,EAA8C+K,UAA9C,CAAR;AACA,WAAO0B,OAAO,CAACa,YAAY,CAACI,sBAAD,CAAb,EAAuC3C,UAAvC,CAAd;AACD;AAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8KA,WAAS4C,OAAT,CAAiBC,MAAjB,EAAyB;AACvB,QAAIC,YAAY,GAAGzN,cAAc,CAACwN,MAAD,CAAjC;;AACA,QAAIC,YAAY,KAAK,EAArB,EAAyB;AACvB,aAAOA,YAAP;AACD;;AAED,SAAK,IAAIC,IAAI,GAAG/N,SAAS,CAACC,MAArB,EAA6BsN,YAAY,GAAG7I,KAAK,CAACqJ,IAAI,GAAG,CAAP,GAAWA,IAAI,GAAG,CAAlB,GAAsB,CAAvB,CAAjD,EAA4EC,IAAI,GAAG,CAAxF,EAA2FA,IAAI,GAAGD,IAAlG,EAAwGC,IAAI,EAA5G,EAAgH;AAC9GT,MAAAA,YAAY,CAACS,IAAI,GAAG,CAAR,CAAZ,GAAyBhO,SAAS,CAACgO,IAAD,CAAlC;AACD;;AAED,QAAIC,qBAAqB,GAAG3K,KAAK,CAACgF,IAAN,CAAWzI,SAAX,EAAsB,IAAI6I,gBAAJ,EAAtB,EAA8C6E,YAA9C,CAA5B;AACA,WAAOO,YAAY,CAACjJ,OAAb,CAAqB7C,+BAArB,EAAsDiM,qBAAtD,CAAP;AACD;;AAED,WAASC,kBAAT,CAA4BC,GAA5B,EAAiC;AAAE,QAAIzJ,KAAK,CAACC,OAAN,CAAcwJ,GAAd,CAAJ,EAAwB;AAAE,WAAK,IAAIC,CAAC,GAAG,CAAR,EAAWC,IAAI,GAAG3J,KAAK,CAACyJ,GAAG,CAAClO,MAAL,CAA5B,EAA0CmO,CAAC,GAAGD,GAAG,CAAClO,MAAlD,EAA0DmO,CAAC,EAA3D,EAA+D;AAAEC,QAAAA,IAAI,CAACD,CAAD,CAAJ,GAAUD,GAAG,CAACC,CAAD,CAAb;AAAmB;;AAAC,aAAOC,IAAP;AAAc,KAA7H,MAAmI;AAAE,aAAO3J,KAAK,CAAC4J,IAAN,CAAWH,GAAX,CAAP;AAAyB;AAAE;AAEnM;;;;;;;;;;;;;;;;;;;;;AAmBA,WAASI,OAAT,CAAiBV,MAAjB,EAAyBN,YAAzB,EAAuC;AACrC,WAAOK,OAAO,CAACY,KAAR,CAAc3O,SAAd,EAAyB,CAACgO,MAAD,EAASY,MAAT,CAAgBP,kBAAkB,CAACpL,UAAU,CAACyK,YAAD,EAAe,EAAf,CAAX,CAAlC,CAAzB,CAAP;AACD;;AAED,MAAImB,mBAAmB,GAAG;AACxB,SAAK,MADmB;AAExB,SAAK,MAFmB;AAGxB,SAAK,OAHmB;AAIxB,SAAK,QAJmB;AAKxB,SAAK,QALmB;AAMxB,SAAK;AANmB,GAA1B;AASA;;;;;;;;AAOA,WAASC,uBAAT,CAAiCrK,SAAjC,EAA4C;AAC1C,WAAOoK,mBAAmB,CAACpK,SAAD,CAA1B;AACD;AAED;;;;;;;;;;;;;;;AAaA,WAASsK,UAAT,CAAoBxO,OAApB,EAA6B;AAC3B,WAAOC,cAAc,CAACD,OAAD,CAAd,CAAwByE,OAAxB,CAAgC9C,8BAAhC,EAAgE4M,uBAAhE,CAAP;AACD;AAED;;;;;;;;;;;;;;;AAaA,WAASE,YAAT,CAAsBzO,OAAtB,EAA+B;AAC7B,WAAOC,cAAc,CAACD,OAAD,CAAd,CAAwByE,OAAxB,CAAgChD,yBAAhC,EAA2D,MAA3D,CAAP;AACD;;AAED,MAAIiN,qBAAqB,GAAG;AAC1B,SAAK,+BADqB;AAE1B,SAAK,+BAFqB;AAG1B,SAAK,gCAHqB;AAI1B,SAAK,iCAJqB;AAK1B,SAAK,wBALqB;AAM1B,SAAK;AANqB,GAA5B;AAQA,MAAIC,UAAU,GAAGC,MAAM,CAACC,IAAP,CAAYH,qBAAZ,CAAjB;AAEA;;;;;;;;;AAQA,WAASI,qBAAT,CAA+BC,MAA/B,EAAuCC,GAAvC,EAA4C;AAC1C,WAAOD,MAAM,CAACtK,OAAP,CAAeiK,qBAAqB,CAACM,GAAD,CAApC,EAA2CA,GAA3C,CAAP;AACD;AAED;;;;;;;;;;;;;;;;AAcA,WAASC,YAAT,CAAsBjP,OAAtB,EAA+B;AAC7B,QAAIK,aAAa,GAAGJ,cAAc,CAACD,OAAD,CAAlC;AACA,WAAO2O,UAAU,CAAC5K,MAAX,CAAkB+K,qBAAlB,EAAyCzO,aAAzC,CAAP;AACD;AAED;;;;;;;;;;;;;;;;;;;;AAkBA,WAASsE,OAAT,CAAiB3E,OAAjB,EAA0BkP,MAA1B,EAAkCC,SAAlC,EAA6C;AAC3C,QAAI9O,aAAa,GAAGJ,cAAc,CAACD,OAAD,CAAlC;AACA,WAAOK,aAAa,CAACsE,OAAd,CAAsBuK,MAAtB,EAA8BC,SAA9B,CAAP;AACD;AAED;;;;;;;;;;;;;;;;;;;;AAkBA,WAASC,WAAT,CAAqBpP,OAArB,EAA8BkP,MAA9B,EAAsCC,SAAtC,EAAiD;AAC/C,QAAI9O,aAAa,GAAGJ,cAAc,CAACD,OAAD,CAAlC;AACA,WAAOK,aAAa,CAAC+O,WAAd,CAA0BF,MAA1B,EAAkCC,SAAlC,CAAP;AACD;AAED;;;;;;;;;;;;;;;;;;;;AAkBA,WAASD,MAAT,CAAgBlP,OAAhB,EAAyB6C,OAAzB,EAAkCsM,SAAlC,EAA6C;AAC3C,QAAI9O,aAAa,GAAGJ,cAAc,CAACD,OAAD,CAAlC;AACA,QAAIqP,eAAe,GAAG9P,KAAK,CAAC4P,SAAD,CAAL,GAAmB,CAAnB,GAAuBvK,UAAU,CAACI,SAAS,CAACmK,SAAD,CAAV,EAAuB,CAAvB,EAA0B9O,aAAa,CAACR,MAAxC,CAAvD;AACA,QAAI+H,UAAU,GAAGvH,aAAa,CAACG,MAAd,CAAqB6O,eAArB,EAAsCH,MAAtC,CAA6CrM,OAA7C,CAAjB;;AACA,QAAI+E,UAAU,KAAK,CAAC,CAAhB,IAAqB,CAAC4D,KAAK,CAAC6D,eAAD,CAA/B,EAAkD;AAChDzH,MAAAA,UAAU,IAAIyH,eAAd;AACD;;AACD,WAAOzH,UAAP;AACD;AAED;;;;;;;;;;;;;;;;;;;;AAkBA,WAAS0H,MAAT,CAAgBtP,OAAhB,EAAyBuP,QAAzB,EAAmChK,QAAnC,EAA6C;AAC3C,QAAIlF,aAAa,GAAGJ,cAAc,CAACD,OAAD,CAAlC;AACA,QAAIwP,cAAc,GAAGvP,cAAc,CAACsP,QAAD,CAAnC;AACA,QAAIlJ,cAAc,GAAGL,cAAc,CAACT,QAAD,CAAnC;;AACA,QAAIc,cAAc,GAAG,CAAjB,IAAsBA,cAAc,GAAGhG,aAAa,CAACR,MAArD,IAA+D2P,cAAc,KAAK,EAAtF,EAA0F;AACxF,aAAOnP,aAAP;AACD;;AACD,WAAOA,aAAa,CAAC+G,KAAd,CAAoB,CAApB,EAAuBf,cAAvB,IAAyCmJ,cAAzC,GAA0DnP,aAAa,CAAC+G,KAAd,CAAoBf,cAApB,CAAjE;AACD;AAED;;;;;;;;AAOA,MAAIoJ,UAAU,GAAG;AACf,SAAK,cADU;AAEf,SAAK,cAFU;AAGf,SAAK,kNAHU;AAIf,SAAK,kEAJU;AAKf,SAAK,4EALU;AAMf,SAAK,oGANU;AAOf,SAAK,oMAPU;AAQf,SAAK,gDARU;AASf,SAAK,4GATU;AAUf,SAAK,sGAVU;AAWf,SAAK,8IAXU;AAYf,SAAK,oCAZU;AAaf,SAAK,gGAbU;AAcf,SAAK,wHAdU;AAef,SAAK,4DAfU;AAgBf,SAAK,0GAhBU;AAiBf,SAAK,wQAjBU;AAkBf,SAAK,wEAlBU;AAmBf,SAAK,oCAnBU;AAoBf,SAAK,kHApBU;AAqBf,SAAK,kHArBU;AAsBf,SAAK,sGAtBU;AAuBf,SAAK,gNAvBU;AAwBf,SAAK,sDAxBU;AAyBf,SAAK,wEAzBU;AA0Bf,SAAK,oCA1BU;AA2Bf,SAAK,gHA3BU;AA4Bf,SAAK,gGA5BU;AA6Bf,SAAK,wNA7BU;AA8Bf,SAAK,kEA9BU;AA+Bf,SAAK,kFA/BU;AAgCf,SAAK,oGAhCU;AAiCf,SAAK,0MAjCU;AAkCf,SAAK,gDAlCU;AAmCf,SAAK,4GAnCU;AAoCf,SAAK,4GApCU;AAqCf,SAAK,oJArCU;AAsCf,SAAK,0CAtCU;AAuCf,SAAK,gGAvCU;AAwCf,SAAK,8HAxCU;AAyCf,SAAK,4DAzCU;AA0Cf,SAAK,gHA1CU;AA2Cf,SAAK,wQA3CU;AA4Cf,SAAK,wEA5CU;AA6Cf,SAAK,oCA7CU;AA8Cf,SAAK,kHA9CU;AA+Cf,SAAK,4HA/CU;AAgDf,SAAK,4GAhDU;AAiDf,SAAK,gNAjDU;AAkDf,SAAK,sDAlDU;AAmDf,SAAK,8EAnDU;AAoDf,SAAK,oCApDU;AAqDf,SAAK,0HArDU;AAsDf,SAAK,gGAtDU;AAuDf,UAAM,YAvDS;AAwDf,UAAM,YAxDS;AAyDf,UAAM,kBAzDS;AA0Df,UAAM,kBA1DS;AA2Df,UAAM,QA3DS;AA4Df,UAAM,QA5DS;AA6Df,UAAM,QA7DS;AA8Df,UAAM,cA9DS;AA+Df,UAAM,cA/DS;AAgEf,UAAM,cAhES;AAiEf,UAAM,QAjES;AAkEf,UAAM,QAlES;AAmEf,UAAM,QAnES;AAoEf,UAAM,QApES;AAqEf,UAAM,QArES;AAsEf,UAAM,QAtES;AAuEf,UAAM,QAvES;AAwEf,UAAM,QAxES;AAyEf,UAAM,QAzES;AA0Ef,UAAM,QA1ES;AA2Ef,UAAM,QA3ES;AA4Ef,UAAM,QA5ES;AA6Ef,UAAM,QA7ES;AA8Ef,UAAM,QA9ES;AA+Ef,UAAM,QA/ES;AAgFf,UAAM,QAhFS;AAiFf,UAAM,cAjFS;AAkFf,UAAM,cAlFS;AAmFf,UAAM,QAnFS;AAoFf,UAAM,QApFS;AAqFf,UAAM,QArFS;AAsFf,UAAM,QAtFS;AAuFf,UAAM,QAvFS;AAwFf,UAAM,QAxFS;AAyFf,UAAM,MAzFS;AA0Ff,UAAM,MA1FS;AA2Ff,UAAM,QA3FS;AA4Ff,UAAM,QA5FS;AA6Ff,UAAM,QA7FS;AA8Ff,UAAM,QA9FS;AA+Ff,UAAM,QA/FS;AAgGf,UAAM,QAhGS;AAiGf,UAAM,QAjGS;AAkGf,UAAM,cAlGS;AAmGf,QAAI,cAnGW;AAoGf,UAAM,QApGS;AAqGf,UAAM,QArGS;AAsGf,UAAM,QAtGS;AAuGf,UAAM,QAvGS;AAwGf,UAAM,cAxGS;AAyGf,UAAM,QAzGS;AA0Gf,UAAM,QA1GS;AA2Gf,UAAM,QA3GS;AA4Gf,UAAM,QA5GS;AA6Gf,UAAM;AA7GS,GAAjB;AAgHA,MAAIC,aAAa,GAAG,IAApB;AAEA;;;;;;;AAMA,WAASC,gBAAT,GAA4B;AAC1B,QAAID,aAAa,KAAK,IAAtB,EAA4B;AAC1B,aAAOA,aAAP;AACD;;AACDA,IAAAA,aAAa,GAAG,EAAhB;AACAd,IAAAA,MAAM,CAACC,IAAP,CAAYY,UAAZ,EAAwBG,OAAxB,CAAgC,UAAUZ,GAAV,EAAe;AAC7C,UAAIL,UAAU,GAAGc,UAAU,CAACT,GAAD,CAA3B;;AACA,WAAK,IAAI3L,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGsL,UAAU,CAAC9O,MAAvC,EAA+CwD,KAAK,EAApD,EAAwD;AACtD,YAAIa,SAAS,GAAGyK,UAAU,CAACtL,KAAD,CAA1B;AACAqM,QAAAA,aAAa,CAACxL,SAAD,CAAb,GAA2B8K,GAA3B;AACD;AACF,KAND;AAOA,WAAOU,aAAP;AACD;AAED;;;;;;;;;AAOA,WAASG,iBAAT,CAA2B3L,SAA3B,EAAsC;AACpC,QAAI4L,yBAAyB,GAAGH,gBAAgB,GAAGzL,SAAH,CAAhD;AACA,WAAO4L,yBAAyB,GAAGA,yBAAH,GAA+B5L,SAA/D;AACD;AAED;;;;;;;;;;AAQA,WAAS6L,oBAAT,CAA8B7L,SAA9B,EAAyC8L,cAAzC,EAAyD;AACvD,WAAOA,cAAP;AACD;AAED;;;;;;;;;;;;;;;;;;;;;AAmBA,WAASC,QAAT,CAAkBjQ,OAAlB,EAA2B;AACzB,QAAIK,aAAa,GAAGJ,cAAc,CAACD,OAAD,CAAlC;;AACA,QAAIK,aAAa,KAAK,EAAtB,EAA0B;AACxB,aAAO,EAAP;AACD;;AACD,WAAOA,aAAa,CAACoE,OAAd,CAAsB/C,gBAAtB,EAAwCmO,iBAAxC,EAA2DpL,OAA3D,CAAmExD,sBAAnE,EAA2F8O,oBAA3F,CAAP;AACD;AAED;;;;;;;;;;;;;;;;;;;;;;;AAqBA,WAASvF,GAAT,CAAaxK,OAAb,EAAsBH,MAAtB,EAA8B2K,GAA9B,EAAmC;AACjC,QAAInK,aAAa,GAAGJ,cAAc,CAACD,OAAD,CAAlC;AACA,QAAIoF,SAAS,GAAG7F,KAAK,CAACM,MAAD,CAAL,GAAgB,CAAhB,GAAoB+E,UAAU,CAACI,SAAS,CAACnF,MAAD,CAAV,EAAoB,CAApB,EAAuBkF,gBAAvB,CAA9C;AACA,QAAI0F,SAAS,GAAGxK,cAAc,CAACuK,GAAD,EAAM,GAAN,CAA9B;;AACA,QAAIpF,SAAS,IAAI/E,aAAa,CAACR,MAA/B,EAAuC;AACrC,aAAOQ,aAAP;AACD;;AACD,QAAI6P,aAAa,GAAG9K,SAAS,GAAG/E,aAAa,CAACR,MAA9C;AACA,QAAIsQ,iBAAiB,GAAGnL,SAAS,CAACkL,aAAa,GAAG,CAAjB,CAAjC;AACA,QAAIE,0BAA0B,GAAGF,aAAa,GAAG,CAAjD;AACA,WAAO/F,YAAY,CAACM,SAAD,EAAY0F,iBAAZ,CAAZ,GAA6C9P,aAA7C,GAA6D8J,YAAY,CAACM,SAAD,EAAY0F,iBAAiB,GAAGC,0BAAhC,CAAhF;AACD;AAED;;;;;;;;;;;;;;;;;;;;;;;;;;AAwBA,WAAS3L,OAAT,CAAiBzE,OAAjB,EAA0B6C,OAA1B,EAAmCyI,WAAnC,EAAgD;AAC9C,QAAIjL,aAAa,GAAGJ,cAAc,CAACD,OAAD,CAAlC;AACA,WAAOK,aAAa,CAACoE,OAAd,CAAsB5B,OAAtB,EAA+ByI,WAA/B,CAAP;AACD;AAED;;;;;;;;;AAOA,WAAS+E,cAAT,CAAwBC,MAAxB,EAAgC;AAC9B,WAAOA,MAAM,CAAC3N,QAAP,GAAkBO,KAAlB,CAAwBpB,YAAxB,EAAsC,CAAtC,CAAP;AACD;AAED;;;;;;;;;;;;;;;;;;;;AAkBA,WAASyO,QAAT,CAAkBvQ,OAAlB,EAA2BkP,MAA3B,EAAmC3J,QAAnC,EAA6C;AAC3C,QAAIlF,aAAa,GAAGJ,cAAc,CAACD,OAAD,CAAlC;AACA,QAAIwQ,YAAY,GAAG7N,QAAQ,CAACuM,MAAD,CAA3B;;AACA,QAAIsB,YAAY,KAAK,IAArB,EAA2B;AACzB,aAAO,KAAP;AACD;;AACD,QAAIA,YAAY,KAAK,EAArB,EAAyB;AACvB,aAAO,IAAP;AACD;;AACDjL,IAAAA,QAAQ,GAAGhG,KAAK,CAACgG,QAAD,CAAL,GAAkB,CAAlB,GAAsBX,UAAU,CAACI,SAAS,CAACO,QAAD,CAAV,EAAsB,CAAtB,EAAyBlF,aAAa,CAACR,MAAvC,CAA3C;AACA,WAAOQ,aAAa,CAACsE,OAAd,CAAsB6L,YAAtB,EAAoCjL,QAApC,MAAkD,CAAC,CAA1D;AACD;AAED;;;;;;;;;;AAQA,WAASkL,kBAAT,CAA4B5N,OAA5B,EAAqC6N,UAArC,EAAiD;AAC/C,QAAIC,sBAAsB,GAAGN,cAAc,CAACxN,OAAD,CAA3C;;AACA,QAAI,CAAC0N,QAAQ,CAACI,sBAAD,EAAyBD,UAAzB,CAAb,EAAmD;AACjD,aAAO,IAAIxP,MAAJ,CAAW2B,OAAO,CAAC+N,MAAnB,EAA2BD,sBAAsB,GAAGD,UAApD,CAAP;AACD;;AACD,WAAO7N,OAAP;AACD;AAED;;;;;;;;;;;;;;;;;;;;;AAmBA,WAASgO,UAAT,CAAoB7Q,OAApB,EAA6B6C,OAA7B,EAAsCyI,WAAtC,EAAmD;AACjD,QAAIjL,aAAa,GAAGJ,cAAc,CAACD,OAAD,CAAlC;AACA,QAAIsQ,MAAM,GAAGzN,OAAb;;AACA,QAAI,EAAEA,OAAO,YAAY3B,MAArB,CAAJ,EAAkC;AAChCoP,MAAAA,MAAM,GAAG,IAAIpP,MAAJ,CAAWuN,YAAY,CAAC5L,OAAD,CAAvB,EAAkC,GAAlC,CAAT;AACD,KAFD,MAEO,IAAI,CAACA,OAAO,CAAC7D,MAAb,EAAqB;AAC1BsR,MAAAA,MAAM,GAAGG,kBAAkB,CAAC5N,OAAD,EAAU,GAAV,CAA3B;AACD;;AACD,WAAOxC,aAAa,CAACoE,OAAd,CAAsB6L,MAAtB,EAA8BhF,WAA9B,CAAP;AACD;AAED;;;;;;;;;;;;;;;AAaA,WAASwF,OAAT,CAAiB9Q,OAAjB,EAA0B;AACxB,QAAIK,aAAa,GAAGJ,cAAc,CAACD,OAAD,CAAlC;AACA,WAAOK,aAAa,CAACyD,KAAd,CAAoB,EAApB,EAAwBgN,OAAxB,GAAkCtN,IAAlC,CAAuC,EAAvC,CAAP;AACD;AAED;;;;;;;;;;;;;;;;;;;;AAkBA,WAASuN,eAAT,CAAyB/Q,OAAzB,EAAkC;AAChC,QAAIK,aAAa,GAAGJ,cAAc,CAACD,OAAD,CAAlC;AACA;;;;AAGAK,IAAAA,aAAa,GAAGA,aAAa,CAACoE,OAAd,CAAsBxD,sBAAtB,EAA8C,UAAU+P,EAAV,EAAcC,EAAd,EAAkBC,EAAlB,EAAsB;AAClF,aAAOH,eAAe,CAACG,EAAD,CAAf,GAAsBD,EAA7B;AACD,KAFe,EAEbxM,OAFa,CAELtD,sBAFK,EAEmB,MAFnB,CAAhB;AAGA,QAAIgQ,cAAc,GAAG,EAArB;AACA,QAAI9N,KAAK,GAAGhD,aAAa,CAACR,MAA1B;;AACA,WAAOwD,KAAK,EAAZ,EAAgB;AACd8N,MAAAA,cAAc,IAAI9Q,aAAa,CAACiF,MAAd,CAAqBjC,KAArB,CAAlB;AACD;;AACD,WAAO8N,cAAP;AACD;AAED;;;;;;;;;;;;;;;;;;;;;AAmBA,WAASC,OAAT,CAAiBpR,OAAjB,EAA0B;AACxB,QAAIK,aAAa,GAAGJ,cAAc,CAACD,OAAD,CAAlC;;AACA,QAAIK,aAAa,KAAK,EAAtB,EAA0B;AACxB,aAAO,EAAP;AACD;;AACD,QAAIgR,kBAAkB,GAAGpB,QAAQ,CAAC5P,aAAD,CAAR,CAAwBoE,OAAxB,CAAgC/C,gBAAhC,EAAkD,GAAlD,CAAzB;AACA,WAAOgC,SAAS,CAAC2N,kBAAD,CAAhB;AACD;AAED;;;;;;;;;;;;;;;;;;;;;;;;;;AAwBA,WAASC,MAAT,CAAgBtR,OAAhB,EAAyBqH,KAAzB,EAAgCkK,WAAhC,EAA6CC,KAA7C,EAAoD;AAClD,QAAInR,aAAa,GAAGJ,cAAc,CAACD,OAAD,CAAlC;AACA,QAAIyR,WAAW,GAAGxR,cAAc,CAACuR,KAAD,CAAhC;AACA,QAAIE,aAAa,GAAG1L,cAAc,CAACqB,KAAD,CAAlC;;AACA,QAAIqK,aAAa,GAAG,CAApB,EAAuB;AACrBA,MAAAA,aAAa,GAAGrR,aAAa,CAACR,MAAd,GAAuB6R,aAAvC;;AACA,UAAIA,aAAa,GAAG,CAApB,EAAuB;AACrBA,QAAAA,aAAa,GAAG,CAAhB;AACD;AACF,KALD,MAKO,IAAIA,aAAa,GAAGrR,aAAa,CAACR,MAAlC,EAA0C;AAC/C6R,MAAAA,aAAa,GAAGrR,aAAa,CAACR,MAA9B;AACD;;AACD,QAAI8R,iBAAiB,GAAG3L,cAAc,CAACuL,WAAD,EAAclR,aAAa,CAACR,MAAd,GAAuB6R,aAArC,CAAtC;;AACA,QAAIC,iBAAiB,GAAG,CAAxB,EAA2B;AACzBA,MAAAA,iBAAiB,GAAG,CAApB;AACD;;AACD,WAAOtR,aAAa,CAAC+G,KAAd,CAAoB,CAApB,EAAuBsK,aAAvB,IAAwCD,WAAxC,GAAsDpR,aAAa,CAAC+G,KAAd,CAAoBsK,aAAa,GAAGC,iBAApC,CAA7D;AACD;;AAED,MAAIC,cAAc,GAAG,YAAY;AAAE,aAASC,aAAT,CAAuB9D,GAAvB,EAA4BC,CAA5B,EAA+B;AAAE,UAAI8D,IAAI,GAAG,EAAX;AAAe,UAAIC,EAAE,GAAG,IAAT;AAAe,UAAIC,EAAE,GAAG,KAAT;AAAgB,UAAIC,EAAE,GAAGxS,SAAT;;AAAoB,UAAI;AAAE,aAAK,IAAIyS,EAAE,GAAGnE,GAAG,CAACoE,MAAM,CAACC,QAAR,CAAH,EAAT,EAAiCC,EAAtC,EAA0C,EAAEN,EAAE,GAAG,CAACM,EAAE,GAAGH,EAAE,CAACI,IAAH,EAAN,EAAiBC,IAAxB,CAA1C,EAAyER,EAAE,GAAG,IAA9E,EAAoF;AAAED,UAAAA,IAAI,CAACU,IAAL,CAAUH,EAAE,CAAC7S,KAAb;;AAAqB,cAAIwO,CAAC,IAAI8D,IAAI,CAACjS,MAAL,KAAgBmO,CAAzB,EAA4B;AAAQ;AAAE,OAAvJ,CAAwJ,OAAOyE,GAAP,EAAY;AAAET,QAAAA,EAAE,GAAG,IAAL;AAAWC,QAAAA,EAAE,GAAGQ,GAAL;AAAW,OAA5L,SAAqM;AAAE,YAAI;AAAE,cAAI,CAACV,EAAD,IAAOG,EAAE,CAAC,QAAD,CAAb,EAAyBA,EAAE,CAAC,QAAD,CAAF;AAAiB,SAAhD,SAAyD;AAAE,cAAIF,EAAJ,EAAQ,MAAMC,EAAN;AAAW;AAAE;;AAAC,aAAOH,IAAP;AAAc;;AAAC,WAAO,UAAU/D,GAAV,EAAeC,CAAf,EAAkB;AAAE,UAAI1J,KAAK,CAACC,OAAN,CAAcwJ,GAAd,CAAJ,EAAwB;AAAE,eAAOA,GAAP;AAAa,OAAvC,MAA6C,IAAIoE,MAAM,CAACC,QAAP,IAAmBxD,MAAM,CAACb,GAAD,CAA7B,EAAoC;AAAE,eAAO8D,aAAa,CAAC9D,GAAD,EAAMC,CAAN,CAApB;AAA+B,OAArE,MAA2E;AAAE,cAAM,IAAI0E,SAAJ,CAAc,sDAAd,CAAN;AAA8E;AAAE,KAArO;AAAwO,GAAhoB,EAArB;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+BA,WAASC,EAAT,CAAY3S,OAAZ,EAAqBkO,IAArB,EAA2B0E,EAA3B,EAA+B;AAC7B,QAAIvS,aAAa,GAAGJ,cAAc,CAACD,OAAD,CAAlC;AACA,QAAI6O,IAAI,GAAG,KAAK,CAAhB;AACA,QAAIgE,MAAM,GAAG,KAAK,CAAlB;;AACA,QAAI9S,QAAQ,CAACmO,IAAD,CAAR,IAAkBnO,QAAQ,CAAC6S,EAAD,CAA9B,EAAoC;AAClC/D,MAAAA,IAAI,GAAGX,IAAI,CAACpK,KAAL,CAAW,EAAX,CAAP;AACA+O,MAAAA,MAAM,GAAGD,EAAE,CAAC9O,KAAH,CAAS,EAAT,CAAT;AACD,KAHD,MAGO;AACL,UAAIgP,qBAAqB,GAAGC,oBAAoB,CAACrQ,UAAU,CAACwL,IAAD,EAAO,EAAP,CAAX,CAAhD;;AAEA,UAAI8E,sBAAsB,GAAGpB,cAAc,CAACkB,qBAAD,EAAwB,CAAxB,CAA3C;;AAEAjE,MAAAA,IAAI,GAAGmE,sBAAsB,CAAC,CAAD,CAA7B;AACAH,MAAAA,MAAM,GAAGG,sBAAsB,CAAC,CAAD,CAA/B;AACD;;AACD,QAAIC,UAAU,GAAGpE,IAAI,CAAChP,MAAtB;;AACA,QAAIoT,UAAU,KAAK,CAAnB,EAAsB;AACpB,aAAO5S,aAAP;AACD;;AACD,QAAI6S,MAAM,GAAG,EAAb;AACA,QAAIC,YAAY,GAAGN,MAAM,CAAChT,MAA1B;;AACA,SAAK,IAAIwD,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGhD,aAAa,CAACR,MAA1C,EAAkDwD,KAAK,EAAvD,EAA2D;AACzD,UAAI+P,OAAO,GAAG,KAAd;AACA,UAAIC,UAAU,GAAG,KAAK,CAAtB;;AACA,WAAK,IAAIC,QAAQ,GAAG,CAApB,EAAuBA,QAAQ,GAAGL,UAAX,IAAyBK,QAAQ,GAAGH,YAA3D,EAAyEG,QAAQ,EAAjF,EAAqF;AACnF,YAAItE,GAAG,GAAGH,IAAI,CAACyE,QAAD,CAAd;;AACA,YAAIjT,aAAa,CAACG,MAAd,CAAqB6C,KAArB,EAA4B2L,GAAG,CAACnP,MAAhC,MAA4CmP,GAAhD,EAAqD;AACnDoE,UAAAA,OAAO,GAAG,IAAV;AACAC,UAAAA,UAAU,GAAGR,MAAM,CAACS,QAAD,CAAnB;AACAjQ,UAAAA,KAAK,GAAGA,KAAK,GAAG2L,GAAG,CAACnP,MAAZ,GAAqB,CAA7B;AACA;AACD;AACF;;AACDqT,MAAAA,MAAM,IAAIE,OAAO,GAAGC,UAAH,GAAgBhT,aAAa,CAACgD,KAAD,CAA9C;AACD;;AACD,WAAO6P,MAAP;AACD;;AAED,WAASH,oBAAT,CAA8BQ,MAA9B,EAAsC;AACpC,QAAI1E,IAAI,GAAGD,MAAM,CAACC,IAAP,CAAY0E,MAAZ,CAAX;AACA,QAAIV,MAAM,GAAGhE,IAAI,CAAC2E,IAAL,CAAUC,kBAAV,EAA8BlQ,GAA9B,CAAkC,UAAUyL,GAAV,EAAe;AAC5D,aAAOuE,MAAM,CAACvE,GAAD,CAAb;AACD,KAFY,CAAb;AAGA,WAAO,CAACH,IAAD,EAAOgE,MAAP,CAAP;AACD;;AAED,WAASY,kBAAT,CAA4BC,IAA5B,EAAkCC,IAAlC,EAAwC;AACtC,QAAID,IAAI,CAAC7T,MAAL,KAAgB8T,IAAI,CAAC9T,MAAzB,EAAiC;AAC/B,aAAO,CAAP;AACD;;AACD,WAAO6T,IAAI,CAAC7T,MAAL,GAAc8T,IAAI,CAAC9T,MAAnB,GAA4B,CAA5B,GAAgC,CAAC,CAAxC;AACD;;AAED,MAAI+T,QAAQ,GAAGtP,KAAK,CAACuD,SAAN,CAAgB9D,MAA/B;AAEA;;;;;;;;;;;;;;;;;;AAiBA,WAAS8P,QAAT,CAAkB7T,OAAlB,EAA2B8T,aAA3B,EAA0C;AACxC,QAAIzT,aAAa,GAAGJ,cAAc,CAACD,OAAD,CAAlC;;AACA,QAAI8T,aAAa,KAAK,EAAlB,IAAwBzT,aAAa,KAAK,EAA9C,EAAkD;AAChD,aAAOA,aAAP;AACD;;AACD,QAAI0T,gBAAgB,GAAGpR,QAAQ,CAACmR,aAAD,CAA/B;;AACA,QAAIvU,KAAK,CAACwU,gBAAD,CAAT,EAA6B;AAC3B,aAAO1T,aAAa,CAACoE,OAAd,CAAsBnD,gBAAtB,EAAwC,EAAxC,CAAP;AACD;;AACD,QAAI0S,eAAe,GAAG,IAAtB;AACA,WAAOJ,QAAQ,CAACzL,IAAT,CAAc9H,aAAd,EAA6B,UAAU4T,OAAV,EAAmB/P,SAAnB,EAA8B;AAChE,UAAI8P,eAAe,IAAIzD,QAAQ,CAACwD,gBAAD,EAAmB7P,SAAnB,CAA/B,EAA8D;AAC5D,eAAO+P,OAAP;AACD;;AACDD,MAAAA,eAAe,GAAG,KAAlB;AACA,aAAOC,OAAO,GAAG/P,SAAjB;AACD,KANM,EAMJ,EANI,CAAP;AAOD;;AAED,MAAIgQ,WAAW,GAAG5P,KAAK,CAACuD,SAAN,CAAgBqM,WAAlC;AAEA;;;;;;;;;;;;;;;;;;AAiBA,WAASC,SAAT,CAAmBnU,OAAnB,EAA4B8T,aAA5B,EAA2C;AACzC,QAAIzT,aAAa,GAAGJ,cAAc,CAACD,OAAD,CAAlC;;AACA,QAAI8T,aAAa,KAAK,EAAlB,IAAwBzT,aAAa,KAAK,EAA9C,EAAkD;AAChD,aAAOA,aAAP;AACD;;AACD,QAAI0T,gBAAgB,GAAGpR,QAAQ,CAACmR,aAAD,CAA/B;;AACA,QAAIvU,KAAK,CAACwU,gBAAD,CAAT,EAA6B;AAC3B,aAAO1T,aAAa,CAACoE,OAAd,CAAsBlD,iBAAtB,EAAyC,EAAzC,CAAP;AACD;;AACD,QAAIyS,eAAe,GAAG,IAAtB;AACA,WAAOE,WAAW,CAAC/L,IAAZ,CAAiB9H,aAAjB,EAAgC,UAAU4T,OAAV,EAAmB/P,SAAnB,EAA8B;AACnE,UAAI8P,eAAe,IAAIzD,QAAQ,CAACwD,gBAAD,EAAmB7P,SAAnB,CAA/B,EAA8D;AAC5D,eAAO+P,OAAP;AACD;;AACDD,MAAAA,eAAe,GAAG,KAAlB;AACA,aAAO9P,SAAS,GAAG+P,OAAnB;AACD,KANM,EAMJ,EANI,CAAP;AAOD;AAED;;;;;;;;;;;;;;;;;;;AAiBA,WAASG,IAAT,CAAcpU,OAAd,EAAuBY,UAAvB,EAAmC;AACjC,QAAIP,aAAa,GAAGJ,cAAc,CAACD,OAAD,CAAlC;;AACA,QAAIY,UAAU,KAAK,EAAf,IAAqBP,aAAa,KAAK,EAA3C,EAA+C;AAC7C,aAAOA,aAAP;AACD;;AACD,QAAI0T,gBAAgB,GAAGpR,QAAQ,CAAC/B,UAAD,CAA/B;;AACA,QAAIrB,KAAK,CAACwU,gBAAD,CAAT,EAA6B;AAC3B,aAAO1T,aAAa,CAAC+T,IAAd,EAAP;AACD;;AACD,WAAOD,SAAS,CAACN,QAAQ,CAACxT,aAAD,EAAgB0T,gBAAhB,CAAT,EAA4CA,gBAA5C,CAAhB;AACD;;AAED,MAAIM,YAAY,GAAG,OAAnB;AACA,MAAIC,eAAe,GAAG,SAAtB;AACA,MAAIC,aAAa,GAAG,QAApB;AACA,MAAIC,UAAU,GAAG,KAAjB;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoCA,WAASC,QAAT,CAAkBzU,OAAlB,EAA2B;AACzB,QAAI0U,OAAO,GAAG9U,SAAS,CAACC,MAAV,GAAmB,CAAnB,IAAwBD,SAAS,CAAC,CAAD,CAAT,KAAiBH,SAAzC,GAAqDG,SAAS,CAAC,CAAD,CAA9D,GAAoE,EAAlF;AAEA,QAAIS,aAAa,GAAGJ,cAAc,CAACD,OAAD,CAAlC;;AAEA,QAAI2U,iBAAiB,GAAGC,gBAAgB,CAACF,OAAD,CAAxC;AAAA,QACI7J,KAAK,GAAG8J,iBAAiB,CAAC9J,KAD9B;AAAA,QAEIgK,OAAO,GAAGF,iBAAiB,CAACE,OAFhC;AAAA,QAGIC,MAAM,GAAGH,iBAAiB,CAACG,MAH/B;AAAA,QAIIC,GAAG,GAAGJ,iBAAiB,CAACI,GAJ5B;;AAMA,QAAI1U,aAAa,KAAK,EAAlB,IAAwBwK,KAAK,IAAI,CAArC,EAAwC;AACtC,aAAOiK,MAAP;AACD;;AACD,QAAIE,aAAa,GAAG3U,aAAa,CAACR,MAAlC;AACA,QAAIyH,SAAS,GAAGjH,aAAa,CAACiH,SAAd,CAAwBY,IAAxB,CAA6B7H,aAA7B,CAAhB;AACA,QAAI6G,MAAM,GAAG,CAAb;AACA,QAAI+N,WAAW,GAAG,EAAlB;;AACA,WAAOD,aAAa,GAAG9N,MAAhB,GAAyB2D,KAAhC,EAAuC;AACrC,UAAIxK,aAAa,CAAC6G,MAAD,CAAb,KAA0B,GAA9B,EAAmC;AACjCA,QAAAA,MAAM;AACN;AACD;;AACD,UAAIgO,aAAa,GAAG7U,aAAa,CAAC+O,WAAd,CAA0B,GAA1B,EAA+BvE,KAAK,GAAG3D,MAAvC,CAApB;;AACA,UAAIgO,aAAa,IAAIhO,MAArB,EAA6B;AAC3B+N,QAAAA,WAAW,IAAIH,MAAM,GAAGxN,SAAS,CAACJ,MAAD,EAASgO,aAAT,CAAlB,GAA4CL,OAA3D;AACA3N,QAAAA,MAAM,GAAGgO,aAAa,GAAG,CAAzB;AACD,OAHD,MAGO;AACL,YAAIH,GAAJ,EAAS;AACPE,UAAAA,WAAW,IAAIH,MAAM,GAAGxN,SAAS,CAACJ,MAAD,EAAS2D,KAAK,GAAG3D,MAAjB,CAAlB,GAA6C2N,OAA5D;AACA3N,UAAAA,MAAM,IAAI2D,KAAV;AACD,SAHD,MAGO;AACLqK,UAAAA,aAAa,GAAG7U,aAAa,CAACsE,OAAd,CAAsB,GAAtB,EAA2BkG,KAAK,GAAG3D,MAAnC,CAAhB;;AACA,cAAIgO,aAAa,IAAI,CAArB,EAAwB;AACtBD,YAAAA,WAAW,IAAIH,MAAM,GAAGxN,SAAS,CAACJ,MAAD,EAASgO,aAAT,CAAlB,GAA4CL,OAA3D;AACA3N,YAAAA,MAAM,GAAGgO,aAAa,GAAG,CAAzB;AACD,WAHD,MAGO;AACLD,YAAAA,WAAW,IAAIH,MAAM,GAAGxN,SAAS,CAACJ,MAAD,CAAjC;AACAA,YAAAA,MAAM,GAAG8N,aAAT;AACD;AACF;AACF;AACF;;AACD,QAAI9N,MAAM,GAAG8N,aAAb,EAA4B;AAC1BC,MAAAA,WAAW,IAAIH,MAAM,GAAGxN,SAAS,CAACJ,MAAD,CAAjC;AACD;;AACD,WAAO+N,WAAP;AACD;AAED;;;;;;;;;AAOA,WAASL,gBAAT,CAA0BF,OAA1B,EAAmC;AACjC,WAAO;AACL7J,MAAAA,KAAK,EAAE7E,cAAc,CAAC0O,OAAO,CAACL,YAAD,CAAR,EAAwB,EAAxB,CADhB;AAELQ,MAAAA,OAAO,EAAE5U,cAAc,CAACyU,OAAO,CAACJ,eAAD,CAAR,EAA2B,IAA3B,CAFlB;AAGLQ,MAAAA,MAAM,EAAE7U,cAAc,CAACyU,OAAO,CAACH,aAAD,CAAR,EAAyB,EAAzB,CAHjB;AAILQ,MAAAA,GAAG,EAAErV,eAAe,CAACgV,OAAO,CAACF,UAAD,CAAR,EAAsB,KAAtB;AAJf,KAAP;AAMD;AAED;;;;;;;;;;;;;;;;;;;;;;;AAqBA,WAASW,QAAT,CAAkBnV,OAAlB,EAA2BmF,GAA3B,EAAgCI,QAAhC,EAA0C;AACxC,QAAIhG,KAAK,CAAC4F,GAAD,CAAT,EAAgB;AACd,aAAO,KAAP;AACD;;AACD,QAAI9E,aAAa,GAAGJ,cAAc,CAACD,OAAD,CAAlC;AACA,QAAIqF,SAAS,GAAGpF,cAAc,CAACkF,GAAD,CAA9B;;AACA,QAAIE,SAAS,KAAK,EAAlB,EAAsB;AACpB,aAAO,IAAP;AACD;;AACDE,IAAAA,QAAQ,GAAGhG,KAAK,CAACgG,QAAD,CAAL,GAAkBlF,aAAa,CAACR,MAAhC,GAAyC+E,UAAU,CAACI,SAAS,CAACO,QAAD,CAAV,EAAsB,CAAtB,EAAyBlF,aAAa,CAACR,MAAvC,CAA9D;AACA0F,IAAAA,QAAQ,IAAIF,SAAS,CAACxF,MAAtB;AACA,QAAIiH,SAAS,GAAGzG,aAAa,CAACsE,OAAd,CAAsBU,SAAtB,EAAiCE,QAAjC,CAAhB;AACA,WAAOuB,SAAS,KAAK,CAAC,CAAf,IAAoBA,SAAS,KAAKvB,QAAzC;AACD;AAED;;;;;;;;;;;;;;;;;;;;;AAmBA,WAAS6P,OAAT,CAAiBpV,OAAjB,EAA0B;AACxB,QAAIK,aAAa,GAAGJ,cAAc,CAACD,OAAD,CAAlC;AACA,WAAOuC,YAAY,CAACS,IAAb,CAAkB3C,aAAlB,CAAP;AACD;AAED;;;;;;;;;;;;;;;;;;;;;AAmBA,WAASgV,YAAT,CAAsBrV,OAAtB,EAA+B;AAC7B,QAAIK,aAAa,GAAGJ,cAAc,CAACD,OAAD,CAAlC;AACA,WAAOwC,kBAAkB,CAACQ,IAAnB,CAAwB3C,aAAxB,CAAP;AACD;AAED;;;;;;;;;;;;;;;;;;;;;AAmBA,WAASiV,OAAT,CAAiBtV,OAAjB,EAA0B;AACxB,QAAIK,aAAa,GAAGJ,cAAc,CAACD,OAAD,CAAlC;AACA,WAAOK,aAAa,CAAC+T,IAAd,GAAqBvU,MAArB,KAAgC,CAAvC;AACD;AAED;;;;;;;;;;;;;;;;;;;;;AAmBA,WAAS0V,OAAT,CAAiBvV,OAAjB,EAA0B;AACxB,QAAIK,aAAa,GAAGJ,cAAc,CAACD,OAAD,CAAlC;AACA,WAAOwB,YAAY,CAACwB,IAAb,CAAkB3C,aAAlB,CAAP;AACD;AAED;;;;;;;;;;;;;;;;;;;;;AAmBA,WAASmV,OAAT,CAAiBxV,OAAjB,EAA0B;AACxB,QAAIK,aAAa,GAAGJ,cAAc,CAACD,OAAD,CAAlC;AACA,WAAOK,aAAa,CAACR,MAAd,KAAyB,CAAhC;AACD;AAED;;;;;;;;;;;;;;;;;;;;;AAmBA,WAAS4V,WAAT,CAAqBzV,OAArB,EAA8B;AAC5B,QAAI0V,WAAW,GAAGzV,cAAc,CAACD,OAAD,CAAhC;AACA,WAAOoV,OAAO,CAACM,WAAD,CAAP,IAAwBA,WAAW,CAACnV,WAAZ,OAA8BmV,WAA7D;AACD;AAED;;;;;;;;;;;;;;;;;;;;;;;;AAsBA,WAASC,SAAT,CAAmB3V,OAAnB,EAA4B;AAC1B,QAAI4V,YAAY,GAAG,OAAO5V,OAAP,KAAmB,QAAnB,IAA+B,CAACT,KAAK,CAACS,OAAD,CAArC,GAAiDiG,MAAM,CAACjG,OAAD,CAAvD,GAAmEA,OAAtF;AACA,WAAO,CAAC,OAAO4V,YAAP,KAAwB,QAAxB,IAAoC,OAAOA,YAAP,KAAwB,QAA7D,KAA0E,CAACpK,KAAK,CAACoK,YAAY,GAAGrK,UAAU,CAACqK,YAAD,CAA1B,CAAvF;AACD;AAED;;;;;;;;;;;;;;;;;;AAgBA,WAASC,WAAT,CAAqB7V,OAArB,EAA8B;AAC5B,QAAIK,aAAa,GAAGJ,cAAc,CAACD,OAAD,CAAlC;AACA,WAAOoV,OAAO,CAAC/U,aAAD,CAAP,IAA0BA,aAAa,CAACI,WAAd,OAAgCJ,aAAjE;AACD;AAED;;;;;;;;;;;;;;;;;;;;;;;AAqBA,WAASyV,OAAT,CAAiB9V,OAAjB,EAA0B6C,OAA1B,EAAmCC,KAAnC,EAA0C;AACxC,QAAIzC,aAAa,GAAGJ,cAAc,CAACD,OAAD,CAAlC;AACA,QAAIiD,WAAW,GAAGhD,cAAc,CAAC6C,KAAD,CAAhC;AACA,QAAIiT,aAAa,GAAG,KAAK,CAAzB;;AACA,QAAI,EAAElT,OAAO,YAAY3B,MAArB,CAAJ,EAAkC;AAChC6U,MAAAA,aAAa,GAAGpT,QAAQ,CAACE,OAAD,CAAxB;;AACA,UAAIkT,aAAa,KAAK,IAAtB,EAA4B;AAC1B,eAAO,KAAP;AACD;;AACDlT,MAAAA,OAAO,GAAG,IAAI3B,MAAJ,CAAW6U,aAAX,EAA0B9S,WAA1B,CAAV;AACD;;AACD,WAAOJ,OAAO,CAACG,IAAR,CAAa3C,aAAb,CAAP;AACD;AAED;;;;;;;;;;;;;;;;;;;;;;;AAqBA,WAAS2V,UAAT,CAAoBhW,OAApB,EAA6BqH,KAA7B,EAAoC9B,QAApC,EAA8C;AAC5C,QAAIlF,aAAa,GAAGJ,cAAc,CAACD,OAAD,CAAlC;AACA,QAAIiW,WAAW,GAAGtT,QAAQ,CAAC0E,KAAD,CAA1B;;AACA,QAAI4O,WAAW,KAAK,IAApB,EAA0B;AACxB,aAAO,KAAP;AACD;;AACD,QAAIA,WAAW,KAAK,EAApB,EAAwB;AACtB,aAAO,IAAP;AACD;;AACD1Q,IAAAA,QAAQ,GAAGhG,KAAK,CAACgG,QAAD,CAAL,GAAkB,CAAlB,GAAsBX,UAAU,CAACI,SAAS,CAACO,QAAD,CAAV,EAAsB,CAAtB,EAAyBlF,aAAa,CAACR,MAAvC,CAA3C;AACA,WAAOQ,aAAa,CAACG,MAAd,CAAqB+E,QAArB,EAA+B0Q,WAAW,CAACpW,MAA3C,MAAuDoW,WAA9D;AACD;AAED;;;;;;;;;;;;;;;AAaA,WAASC,KAAT,CAAelW,OAAf,EAAwB;AACtB,QAAIK,aAAa,GAAGJ,cAAc,CAACD,OAAD,CAAlC;AACA,WAAOK,aAAa,CAACyD,KAAd,CAAoB,EAApB,CAAP;AACD;AAED;;;;;;;;;;;;;;;;;;;;AAkBA,WAASqS,UAAT,CAAoBnW,OAApB,EAA6B;AAC3B,QAAIK,aAAa,GAAGJ,cAAc,CAACD,OAAD,CAAlC;AACA,QAAIoG,mBAAmB,GAAG/F,aAAa,CAACR,MAAxC;AACA,QAAIuW,cAAc,GAAG,EAArB;AACA,QAAI/S,KAAK,GAAG,CAAZ;AACA,QAAIgT,eAAe,GAAG,KAAK,CAA3B;;AACA,WAAOhT,KAAK,GAAG+C,mBAAf,EAAoC;AAClCiQ,MAAAA,eAAe,GAAGlQ,WAAW,CAAC9F,aAAD,EAAgBgD,KAAhB,CAA7B;AACA+S,MAAAA,cAAc,CAAC5D,IAAf,CAAoB6D,eAApB;AACAhT,MAAAA,KAAK,IAAIgT,eAAe,GAAG,MAAlB,GAA2B,CAA3B,GAA+B,CAAxC;AACD;;AACD,WAAOD,cAAP;AACD;AAED;;;;;;;;;;;;;;;;;;;;;;AAoBA,WAASE,SAAT,CAAmBtW,OAAnB,EAA4B;AAC1B,QAAIK,aAAa,GAAGJ,cAAc,CAACD,OAAD,CAAlC;AACA,WAAO0C,UAAU,CAACrC,aAAa,CAAC6C,KAAd,CAAoB9B,wBAApB,CAAD,EAAgD,EAAhD,CAAjB;AACD;AAED;;;;;;;;;;;;;;;;;;;;AAkBA,WAAS0C,KAAT,CAAe9D,OAAf,EAAwBuW,SAAxB,EAAmCC,KAAnC,EAA0C;AACxC,QAAInW,aAAa,GAAGJ,cAAc,CAACD,OAAD,CAAlC;AACA,WAAOK,aAAa,CAACyD,KAAd,CAAoByS,SAApB,EAA+BC,KAA/B,CAAP;AACD;;AAED,MAAIC,eAAe,GAAG,QAAtB;AAEA;;;;;;;;;;;;;;;;;;;AAkBA,WAASC,MAAT,CAAgB1W,OAAhB,EAAyB;AACvB,QAAIK,aAAa,GAAGJ,cAAc,CAACD,OAAD,CAAlC;;AACA,QAAIK,aAAa,KAAK,EAAtB,EAA0B;AACxB,aAAO,EAAP;AACD;;AACD,QAAIA,aAAa,CAAC,CAAD,CAAb,KAAqBoW,eAAzB,EAA0C;AACxC,aAAOpW,aAAa,CAACiH,SAAd,CAAwB,CAAxB,CAAP;AACD;;AACD,WAAOjH,aAAP;AACD;AAED;;;;;;;;;;;;AAUA,WAASsW,mBAAT,CAA6B3W,OAA7B,EAAsCsH,SAAtC,EAAiDjE,KAAjD,EAAwD;AACtD,QAAIuT,UAAU,GAAGhX,SAAS,CAACC,MAAV,GAAmB,CAAnB,IAAwBD,SAAS,CAAC,CAAD,CAAT,KAAiBH,SAAzC,GAAqDG,SAAS,CAAC,CAAD,CAA9D,GAAoE,IAArF;AAEA,QAAIiX,WAAW,GAAG,CAAlB;;AACA,QAAID,UAAJ,EAAgB;AACdC,MAAAA,WAAW,GAAG,CAACvP,SAAS,CAACzH,MAAX,GAAoB,CAAlC;AACD;;AACD,QAAIiX,kBAAkB,GAAG9W,OAAO,CAACQ,MAAR,CAAe6C,KAAK,GAAGwT,WAAvB,EAAoCvP,SAAS,CAACzH,MAA9C,CAAzB;AACA,WAAOiX,kBAAkB,CAACvW,WAAnB,OAAqC+G,SAA5C;AACD;AAED;;;;;;;;;AAOA,WAASyP,YAAT,CAAsBC,IAAtB,EAA4B;AAC1B,QAAIC,QAAQ,GAAG,EAAf;AACA,QAAI/T,KAAK,GAAG,KAAK,CAAjB;;AACA,WAAO,CAACA,KAAK,GAAGnB,eAAe,CAAC8E,IAAhB,CAAqBmQ,IAArB,CAAT,MAAyC,IAAhD,EAAsD;AACpDC,MAAAA,QAAQ,CAACzE,IAAT,CAActP,KAAK,CAAC,CAAD,CAAnB;AACD;;AACD,WAAO+T,QAAP;AACD;;AAED,MAAIC,eAAe,GAAG,CAAtB;AACA,MAAIC,oBAAoB,GAAG,CAA3B;AACA,MAAIC,UAAU,GAAG,CAAjB;AAEA;;;;;;;;AAOA,WAASC,YAAT,CAAsBC,UAAtB,EAAkC;AAChC,QAAIC,KAAK,GAAGL,eAAZ;AACA,QAAIM,OAAO,GAAG,EAAd;AACA,QAAInU,KAAK,GAAG,CAAZ;;AACA,WAAOkU,KAAK,KAAKH,UAAjB,EAA6B;AAC3B,UAAIK,IAAI,GAAGH,UAAU,CAACjU,KAAK,EAAN,CAAV,CAAoB9C,WAApB,EAAX;;AACA,cAAQkX,IAAR;AACE,aAAK,GAAL;AACE;;AACF,aAAK,GAAL;AACEF,UAAAA,KAAK,GAAGH,UAAR;AACA;;AACF;AACE,cAAI/V,iBAAiB,CAAC2B,IAAlB,CAAuByU,IAAvB,CAAJ,EAAkC;AAChC,gBAAIF,KAAK,KAAKJ,oBAAd,EAAoC;AAClCI,cAAAA,KAAK,GAAGH,UAAR;AACD;AACF,WAJD,MAIO;AACL,gBAAIG,KAAK,KAAKL,eAAd,EAA+B;AAC7BK,cAAAA,KAAK,GAAGJ,oBAAR;AACD;;AACD,gBAAIM,IAAI,KAAK,GAAb,EAAkB;AAChBD,cAAAA,OAAO,IAAIC,IAAX;AACD;AACF;;AACD;AAnBJ;AAqBD;;AACD,WAAOD,OAAP;AACD;;AAED,MAAIE,YAAY,GAAG,CAAnB;AACA,MAAIC,UAAU,GAAG,CAAjB;AACA,MAAIC,iBAAiB,GAAG,CAAxB;AACA,MAAIC,aAAa,GAAG,CAApB;AAEA;;;;;;;;;;;;;;;;;;;;;;;AAsBA,WAASC,MAAT,CAAgB9X,OAAhB,EAAyB+X,aAAzB,EAAwCzM,WAAxC,EAAqD;AACnDtL,IAAAA,OAAO,GAAGC,cAAc,CAACD,OAAD,CAAxB;;AACA,QAAIA,OAAO,KAAK,EAAhB,EAAoB;AAClB,aAAO,EAAP;AACD;;AACD,QAAI,CAACsE,KAAK,CAACC,OAAN,CAAcwT,aAAd,CAAL,EAAmC;AACjC,UAAIC,mBAAmB,GAAG/X,cAAc,CAAC8X,aAAD,CAAxC;AACAA,MAAAA,aAAa,GAAGC,mBAAmB,KAAK,EAAxB,GAA6B,EAA7B,GAAkCjB,YAAY,CAACiB,mBAAD,CAA9D;AACD;;AACD,QAAIC,iBAAiB,GAAGhY,cAAc,CAACqL,WAAD,CAAtC;AACA,QAAIzL,MAAM,GAAGG,OAAO,CAACH,MAArB;AACA,QAAIqY,gBAAgB,GAAGH,aAAa,CAAClY,MAAd,GAAuB,CAA9C;AACA,QAAIsY,YAAY,GAAGxB,mBAAmB,CAACzO,IAApB,CAAyB,IAAzB,EAA+BlI,OAA/B,CAAnB;AACA,QAAIuX,KAAK,GAAGG,YAAZ;AACA,QAAIU,KAAK,GAAG,CAAZ;AACA,QAAIC,MAAM,GAAG,EAAb;AACA,QAAIf,UAAU,GAAG,EAAjB;AACA,QAAIgB,KAAK,GAAG,IAAZ;;AACA,SAAK,IAAIjV,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGxD,MAA5B,EAAoCwD,KAAK,EAAzC,EAA6C;AAC3C,UAAIoU,IAAI,GAAGzX,OAAO,CAACqD,KAAD,CAAlB;AACA,UAAIkV,OAAO,GAAG,KAAd;;AACA,cAAQd,IAAR;AACE,aAAK,GAAL;AACE,cAAIa,KAAJ,EAAW;AACT;AACD;;AACD,cAAIH,YAAY,CAAC,IAAD,EAAO9U,KAAP,EAAc,KAAd,CAAhB,EAAsC;AACpCkV,YAAAA,OAAO,GAAG,IAAV;AACA;AACD;;AACD,cAAIhB,KAAK,KAAKG,YAAd,EAA4B;AAC1Ba,YAAAA,OAAO,GAAG,IAAV;AACAhB,YAAAA,KAAK,GAAGI,UAAR;AACA;AACD;;AACD,cAAIJ,KAAK,KAAKI,UAAd,EAA0B;AACxBS,YAAAA,KAAK;AACL;AACD;;AACDG,UAAAA,OAAO,GAAG,IAAV;AACA;;AACF,aAAK,GAAL;AACE,cAAIhB,KAAK,KAAKI,UAAV,IAAwBQ,YAAY,CAAC,IAAD,EAAO9U,KAAP,CAAxC,EAAuD;AACrDkU,YAAAA,KAAK,GAAGK,iBAAR;AACA;AACD;;AACDW,UAAAA,OAAO,GAAG,IAAV;AACA;;AACF,aAAK,GAAL;AACE,cAAIhB,KAAK,KAAKK,iBAAV,IAA+BO,YAAY,CAAC,KAAD,EAAQ9U,KAAR,CAA/C,EAA+D;AAC7DkU,YAAAA,KAAK,GAAGM,aAAR;AACA;AACD;;AACDU,UAAAA,OAAO,GAAG,IAAV;AACA;;AACF,aAAK,GAAL;AACA,aAAK,GAAL;AACE,cAAIhB,KAAK,KAAKI,UAAd,EAA0B;AACxB,gBAAIW,KAAK,KAAKb,IAAd,EAAoB;AAClBa,cAAAA,KAAK,GAAG,IAAR;AACD,aAFD,MAEO,IAAI,CAACA,KAAL,EAAY;AACjBA,cAAAA,KAAK,GAAGb,IAAR;AACD;AACF;;AACDc,UAAAA,OAAO,GAAG,IAAV;AACA;;AACF,aAAK,GAAL;AACA,aAAK,GAAL;AACE,cAAIhB,KAAK,KAAKK,iBAAV,IAA+BO,YAAY,CAAC,SAAD,EAAY9U,KAAZ,CAA/C,EAAmE;AACjEkU,YAAAA,KAAK,GAAGI,UAAR;AACA;AACD;;AACDY,UAAAA,OAAO,GAAG,IAAV;AACA;;AACF,aAAK,GAAL;AACE,cAAIH,KAAK,GAAG,CAAZ,EAAe;AACbA,YAAAA,KAAK;AACL;AACD;;AACD,cAAIE,KAAJ,EAAW;AACT;AACD;;AACD,cAAIf,KAAK,KAAKI,UAAd,EAA0B;AACxBW,YAAAA,KAAK,GAAG,IAAR;AACAf,YAAAA,KAAK,GAAGG,YAAR;;AACA,gBAAIQ,gBAAJ,EAAsB;AACpBZ,cAAAA,UAAU,IAAI,GAAd;AACA,kBAAIE,OAAO,GAAGH,YAAY,CAACC,UAAD,CAA1B;;AACA,kBAAIS,aAAa,CAACpT,OAAd,CAAsB6S,OAAO,CAACjX,WAAR,EAAtB,MAAiD,CAAC,CAAtD,EAAyD;AACvD8X,gBAAAA,MAAM,IAAIf,UAAV;AACD,eAFD,MAEO;AACLe,gBAAAA,MAAM,IAAIJ,iBAAV;AACD;;AACDX,cAAAA,UAAU,GAAG,EAAb;AACD,aATD,MASO;AACLe,cAAAA,MAAM,IAAIJ,iBAAV;AACD;;AACD;AACD;;AACD,cAAIV,KAAK,KAAKK,iBAAV,IAA+BL,KAAK,KAAKM,aAAV,IAA2BM,YAAY,CAAC,KAAD,EAAQ9U,KAAR,CAA1E,EAA0F;AACxFiV,YAAAA,KAAK,GAAG,IAAR;AACAf,YAAAA,KAAK,GAAGG,YAAR;AACAJ,YAAAA,UAAU,GAAG,EAAb;AACA;AACD;;AACDiB,UAAAA,OAAO,GAAG,IAAV;AACA;;AACF;AACEA,UAAAA,OAAO,GAAG,IAAV;AAvFJ;;AAyFA,UAAIA,OAAJ,EAAa;AACX,gBAAQhB,KAAR;AACE,eAAKG,YAAL;AACEW,YAAAA,MAAM,IAAIZ,IAAV;AACA;;AACF,eAAKE,UAAL;AACE,gBAAIO,gBAAJ,EAAsB;AACpBZ,cAAAA,UAAU,IAAIG,IAAd;AACD;;AACD;AARJ;AAUD;AACF;;AACD,WAAOY,MAAP;AACD;;AAED,MAAIG,cAAc,GAAG,IAArB;;AAEA,WAASC,eAAT,GAA2B;AACzB,QAAID,cAAc,KAAK,IAAvB,EAA6B;AAC3B,aAAOA,cAAP;AACD;AACD;AACA;;;AACA,QAAI,OAAOxZ,MAAP,KAAkB,QAAlB,IAA8BA,MAAM,CAAC4P,MAAP,KAAkBA,MAApD,EAA4D;AAC1D;AACA4J,MAAAA,cAAc,GAAGxZ,MAAjB;AACD,KAHD,MAGO,IAAI,OAAO0Z,IAAP,KAAgB,QAAhB,IAA4BA,IAAI,CAAC9J,MAAL,KAAgBA,MAAhD,EAAwD;AAC7D;AACA4J,MAAAA,cAAc,GAAGE,IAAjB;AACD,KAHM,MAGA;AACL;AACAF,MAAAA,cAAc,GAAG,IAAIG,QAAJ,CAAa,aAAb,GAAjB;AACD;;AACD,WAAOH,cAAP;AACD;;AAED,MAAII,YAAY,GAAGH,eAAe,EAAlC;AACA,MAAII,SAAS,GAAGD,YAAY,CAACtZ,CAA7B;AAEA;;;;;;;;;;;;;;AAaA,WAASwZ,UAAT,GAAsB;AACpB,QAAI,SAASF,YAAY,CAACtZ,CAA1B,EAA6B;AAC3BsZ,MAAAA,YAAY,CAACtZ,CAAb,GAAiBuZ,SAAjB;AACD;;AACD,WAAO,IAAP;AACD;AAED;;;;;;;;;;;;;AAWA,MAAIE,OAAO,GAAG,OAAd;AAEA;;AAEA;;;;;AAIA;;;;;AAKA;;;;;AAIA;;;;;AAIA;;;;;AAIA;;;;;AAIA;;;;;AAIA;;;;;AAIA;;;;;AAIA;;;;;AAIA;;;;;AAIA;;;;;AAIA,MAAIC,SAAS,GAAG;AACd1V,IAAAA,SAAS,EAAEA,SADG;AAEdnD,IAAAA,UAAU,EAAEA,UAFE;AAGdsD,IAAAA,YAAY,EAAEA,YAHA;AAIdC,IAAAA,SAAS,EAAEA,SAJG;AAKdhD,IAAAA,SAAS,EAAEA,SALG;AAMdiD,IAAAA,SAAS,EAAEA,SANG;AAOdE,IAAAA,QAAQ,EAAEA,QAPI;AAQdM,IAAAA,SAAS,EAAEA,SARG;AASdP,IAAAA,SAAS,EAAEA,SATG;AAWd2D,IAAAA,KAAK,EAAEA,KAXO;AAYd0R,IAAAA,cAAc,EAAEzR,aAZF;AAadC,IAAAA,eAAe,EAAEA,eAbH;AAcdK,IAAAA,UAAU,EAAEA,UAdE;AAedO,IAAAA,UAAU,EAAEA,UAfE;AAiBdmG,IAAAA,UAAU,EAAEA,UAjBE;AAkBdC,IAAAA,YAAY,EAAEA,YAlBA;AAmBdQ,IAAAA,YAAY,EAAEA,YAnBA;AAqBdzB,IAAAA,OAAO,EAAEA,OArBK;AAsBdW,IAAAA,OAAO,EAAEA,OAtBK;AAwBdxJ,IAAAA,OAAO,EAAEA,OAxBK;AAyBdyK,IAAAA,WAAW,EAAEA,WAzBC;AA0BdF,IAAAA,MAAM,EAAEA,MA1BM;AA4Bd5J,IAAAA,MAAM,EAAEA,MA5BM;AA6Bda,IAAAA,WAAW,EAAEA,WA7BC;AA8BdM,IAAAA,KAAK,EAAEA,KA9BO;AA+BdC,IAAAA,UAAU,EAAEA,UA/BE;AAgCdK,IAAAA,IAAI,EAAEA,IAhCQ;AAiCdC,IAAAA,KAAK,EAAEA,KAjCO;AAkCdI,IAAAA,KAAK,EAAEA,KAlCO;AAmCd5G,IAAAA,MAAM,EAAEA,MAnCM;AAoCd8G,IAAAA,SAAS,EAAEA,SApCG;AAqCdpC,IAAAA,QAAQ,EAAEA,QArCI;AAuCdoK,IAAAA,MAAM,EAAEA,MAvCM;AAwCdW,IAAAA,QAAQ,EAAEA,QAxCI;AAyCdzF,IAAAA,GAAG,EAAEA,GAzCS;AA0CdD,IAAAA,OAAO,EAAEA,OA1CK;AA2CdG,IAAAA,QAAQ,EAAEA,QA3CI;AA4CdX,IAAAA,MAAM,EAAEA,MA5CM;AA6CdtF,IAAAA,OAAO,EAAEA,OA7CK;AA8CdoM,IAAAA,UAAU,EAAEA,UA9CE;AA+CdC,IAAAA,OAAO,EAAEA,OA/CK;AAgDdC,IAAAA,eAAe,EAAEA,eAhDH;AAiDdK,IAAAA,OAAO,EAAEA,OAjDK;AAkDdE,IAAAA,MAAM,EAAEA,MAlDM;AAmDdqB,IAAAA,EAAE,EAAEA,EAnDU;AAoDdyB,IAAAA,IAAI,EAAEA,IApDQ;AAqDdP,IAAAA,QAAQ,EAAEA,QArDI;AAsDdM,IAAAA,SAAS,EAAEA,SAtDG;AAuDdM,IAAAA,QAAQ,EAAEA,QAvDI;AAyDdU,IAAAA,QAAQ,EAAEA,QAzDI;AA0Dd5E,IAAAA,QAAQ,EAAEA,QA1DI;AA2Dd6E,IAAAA,OAAO,EAAEA,OA3DK;AA4DdC,IAAAA,YAAY,EAAEA,YA5DA;AA6DdC,IAAAA,OAAO,EAAEA,OA7DK;AA8DdC,IAAAA,OAAO,EAAEA,OA9DK;AA+DdC,IAAAA,OAAO,EAAEA,OA/DK;AAgEdC,IAAAA,WAAW,EAAEA,WAhEC;AAiEdE,IAAAA,SAAS,EAAEA,SAjEG;AAkEd5V,IAAAA,QAAQ,EAAEA,QAlEI;AAmEd8V,IAAAA,WAAW,EAAEA,WAnEC;AAoEdC,IAAAA,OAAO,EAAEA,OApEK;AAqEdE,IAAAA,UAAU,EAAEA,UArEE;AAuEdE,IAAAA,KAAK,EAAEA,KAvEO;AAwEdC,IAAAA,UAAU,EAAEA,UAxEE;AAyEdG,IAAAA,SAAS,EAAEA,SAzEG;AA0EdxS,IAAAA,KAAK,EAAEA,KA1EO;AA2EdlB,IAAAA,KAAK,EAAEA,KA3EO;AA6EdsW,IAAAA,QAAQ,EAAExC,MA7EI;AA8EdyC,IAAAA,SAAS,EAAErB,MA9EG;AAgFdgB,IAAAA,UAAU,EAAEA,UAhFE;AAiFdC,IAAAA,OAAO,EAAEA;AAjFK,GAAhB;AAoFA;;;;;;;;;;AASA,WAASK,YAAT,CAAsBpZ,OAAtB,EAA+BqZ,aAA/B,EAA8C;AAC5C,SAAKC,aAAL,GAAqBtZ,OAArB;AACA,SAAKuZ,cAAL,GAAsBF,aAAtB;AACD;AAED;;;;;;;;;;;;;;;;;;;;;;;;AAsBAD,EAAAA,YAAY,CAACvR,SAAb,CAAuBrI,KAAvB,GAA+B,YAAY;AACzC,WAAO,KAAK8Z,aAAZ;AACD,GAFD;AAIA;;;;;;;;AAMAF,EAAAA,YAAY,CAACvR,SAAb,CAAuB2R,OAAvB,GAAiC,YAAY;AAC3C,WAAO,KAAKha,KAAL,EAAP;AACD,GAFD;AAIA;;;;;;;;AAMA4Z,EAAAA,YAAY,CAACvR,SAAb,CAAuB4R,MAAvB,GAAgC,YAAY;AAC1C,WAAO,KAAKja,KAAL,EAAP;AACD,GAFD;AAIA;;;;;;;;AAMA4Z,EAAAA,YAAY,CAACvR,SAAb,CAAuBlF,QAAvB,GAAkC,YAAY;AAC5C,WAAOzC,MAAM,CAAC,KAAKV,KAAL,EAAD,CAAb;AACD,GAFD;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;AAwBA4Z,EAAAA,YAAY,CAACvR,SAAb,CAAuB6R,KAAvB,GAA+B,YAAY;AACzC,WAAO,IAAIN,YAAJ,CAAiB,KAAKE,aAAtB,EAAqC,IAArC,CAAP;AACD,GAFD;AAIA;;;;;;;;;;;;;;;;;;;;;;AAoBAF,EAAAA,YAAY,CAACvR,SAAb,CAAuB8R,IAAvB,GAA8B,UAAUC,OAAV,EAAmB;AAC/C,QAAI,OAAOA,OAAP,KAAmB,UAAvB,EAAmC;AACjC,aAAO,IAAIR,YAAJ,CAAiBQ,OAAO,CAAC,KAAKN,aAAN,CAAxB,EAA8C,KAAKC,cAAnD,CAAP;AACD;;AACD,WAAO,IAAP;AACD,GALD;AAOA;;;;;;;;AAMAH,EAAAA,YAAY,CAACvR,SAAb,CAAuB0R,cAAvB,GAAwC,IAAxC;AAEA;;;;;;;;AAOA,WAASM,qBAAT,CAA+BC,gBAA/B,EAAiD;AAC/C,WAAO,YAAY;AACjB,WAAK,IAAInM,IAAI,GAAG/N,SAAS,CAACC,MAArB,EAA6Bka,IAAI,GAAGzV,KAAK,CAACqJ,IAAD,CAAzC,EAAiDC,IAAI,GAAG,CAA7D,EAAgEA,IAAI,GAAGD,IAAvE,EAA6EC,IAAI,EAAjF,EAAqF;AACnFmM,QAAAA,IAAI,CAACnM,IAAD,CAAJ,GAAahO,SAAS,CAACgO,IAAD,CAAtB;AACD;;AAED,UAAIsF,MAAM,GAAG4G,gBAAgB,CAAC1L,KAAjB,CAAuB3O,SAAvB,EAAkC,CAAC,KAAK6Z,aAAN,EAAqBjL,MAArB,CAA4B0L,IAA5B,CAAlC,CAAb;;AACA,UAAI,KAAKR,cAAL,IAAuB,OAAOrG,MAAP,KAAkB,QAA7C,EAAuD;AACrD,eAAO,IAAIkG,YAAJ,CAAiBlG,MAAjB,EAAyB,KAAKqG,cAA9B,CAAP;AACD,OAFD,MAEO;AACL,eAAOrG,MAAP;AACD;AACF,KAXD;AAYD;;AAEDtE,EAAAA,MAAM,CAACC,IAAP,CAAYmK,SAAZ,EAAuBpJ,OAAvB,CAA+B,UAAUoK,IAAV,EAAgB;AAC7CZ,IAAAA,YAAY,CAACvR,SAAb,CAAuBmS,IAAvB,IAA+BH,qBAAqB,CAACb,SAAS,CAACgB,IAAD,CAAV,CAApD;AACD,GAFD;AAIA;;;;;;;;;;;;;;;;;;AAiBA,WAASN,KAAT,CAAe1Z,OAAf,EAAwB;AACtB,WAAO,IAAIoZ,YAAJ,CAAiBpZ,OAAjB,EAA0B,IAA1B,CAAP;AACD;;AAED,MAAIia,QAAQ,GAAGrL,MAAM,CAACsL,MAAP,IAAiB,UAAUC,MAAV,EAAkB;AAAE,SAAK,IAAInM,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGpO,SAAS,CAACC,MAA9B,EAAsCmO,CAAC,EAAvC,EAA2C;AAAE,UAAI4C,MAAM,GAAGhR,SAAS,CAACoO,CAAD,CAAtB;;AAA2B,WAAK,IAAIgB,GAAT,IAAgB4B,MAAhB,EAAwB;AAAE,YAAIhC,MAAM,CAAC/G,SAAP,CAAiBuS,cAAjB,CAAgCjS,IAAhC,CAAqCyI,MAArC,EAA6C5B,GAA7C,CAAJ,EAAuD;AAAEmL,UAAAA,MAAM,CAACnL,GAAD,CAAN,GAAc4B,MAAM,CAAC5B,GAAD,CAApB;AAA4B;AAAE;AAAE;;AAAC,WAAOmL,MAAP;AAAgB,GAAhQ;AAEA;;;;;;;;;;;;;;;;;;;;;;;;AAsBA,WAASE,IAAT,CAAcra,OAAd,EAAuB;AACrB,WAAO,IAAIoZ,YAAJ,CAAiBpZ,OAAjB,EAA0B,KAA1B,CAAP;AACD;;AAEDia,EAAAA,QAAQ,CAACI,IAAD,EAAOrB,SAAP,EAAkB;AACxBU,IAAAA,KAAK,EAAEA;AADiB,GAAlB,CAAR;;AAIA,SAAOW,IAAP;AAEC,CA94HA,CAAD","sourcesContent":["/*! \n * Voca string library 1.4.0\n * https://vocajs.com\n *\n * Copyright Dmitri Pavlutin and other contributors\n * Released under the MIT license\n */\n\n(function (global, factory) {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n\ttypeof define === 'function' && define.amd ? define(factory) :\n\t(global.v = factory());\n}(this, (function () { 'use strict';\n\n/**\n * Checks if `value` is `null` or `undefined`\n *\n * @ignore\n * @function isNil\n * @param {*} value The object to check\n * @return {boolean} Returns `true` is `value` is `undefined` or `null`, `false` otherwise\n */\nfunction isNil(value) {\n  return value === undefined || value === null;\n}\n\n/**\n * Converts the `value` to a boolean. If `value` is `undefined` or `null`, returns `defaultValue`.\n *\n * @ignore\n * @function toBoolean\n * @param {*} value The value to convert.\n * @param {boolean} [defaultValue=false] The default value.\n * @return {boolean} Returns the coercion to boolean.\n */\nfunction coerceToBoolean(value) {\n  var defaultValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n  if (isNil(value)) {\n    return defaultValue;\n  }\n  return Boolean(value);\n}\n\n/**\n * Checks whether `subject` is a string primitive type.\n *\n * @function isString\n * @static\n * @since 1.0.0\n * @memberOf Query\n * @param {string} subject The value to verify.\n * @return {boolean} Returns `true` if `subject` is string primitive type or `false` otherwise.\n * @example\n * v.isString('vacation');\n * // => true\n *\n * v.isString(560);\n * // => false\n */\nfunction isString(subject) {\n  return typeof subject === 'string';\n}\n\n/**\n * Get the string representation of the `value`.\n * Converts the `value` to string.\n * If `value` is `null` or `undefined`, return `defaultValue`.\n *\n * @ignore\n * @function toString\n * @param {*} value             The value to convert.\n * @param {*} [defaultValue=''] The default value to return.\n * @return {string|null}        Returns the string representation of `value`. Returns `defaultValue` if `value` is\n *                              `null` or `undefined`.\n */\nfunction coerceToString(value) {\n  var defaultValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n\n  if (isNil(value)) {\n    return defaultValue;\n  }\n  if (isString(value)) {\n    return value;\n  }\n  return String(value);\n}\n\n/**\n * Converts the first character of `subject` to upper case. If `restToLower` is `true`, convert the rest of\n * `subject` to lower case.\n *\n * @function capitalize\n * @static\n * @since 1.0.0\n * @memberOf Case\n * @param  {string}  [subject='']        The string to capitalize.\n * @param  {boolean} [restToLower=false] Convert the rest of `subject` to lower case.\n * @return {string}                      Returns the capitalized string.\n * @example\n * v.capitalize('apple');\n * // => 'Apple'\n *\n * v.capitalize('aPPle', true);\n * // => 'Apple'\n */\nfunction capitalize(subject, restToLower) {\n  var subjectString = coerceToString(subject);\n  var restToLowerCaseBoolean = coerceToBoolean(restToLower);\n  if (subjectString === '') {\n    return '';\n  }\n  if (restToLowerCaseBoolean) {\n    subjectString = subjectString.toLowerCase();\n  }\n  return subjectString.substr(0, 1).toUpperCase() + subjectString.substr(1);\n}\n\n/**\n * Converts the `subject` to lower case.\n *\n * @function lowerCase\n * @static\n * @since 1.0.0\n * @memberOf Case\n * @param  {string} [subject=''] The string to convert to lower case.\n * @return {string}              Returns the lower case string.\n * @example\n * v.lowerCase('Green');\n * // => 'green'\n *\n * v.lowerCase('BLUE');\n * // => 'blue'\n */\nfunction lowerCase(subject) {\n  var subjectString = coerceToString(subject, '');\n  return subjectString.toLowerCase();\n}\n\n/**\n * A regular expression string matching digits\n *\n * @type {string}\n * @ignore\n */\nvar digit = '\\\\d';\n\n/**\n * A regular expression string matching whitespace\n *\n * @type {string}\n * @ignore\n */\nvar whitespace = '\\\\s\\\\uFEFF\\\\xA0';\n\n/**\n * A regular expression string matching high surrogate\n *\n * @type {string}\n * @ignore\n */\nvar highSurrogate = '\\\\uD800-\\\\uDBFF';\n\n/**\n * A regular expression string matching low surrogate\n *\n * @type {string}\n * @ignore\n */\nvar lowSurrogate = '\\\\uDC00-\\\\uDFFF';\n\n/**\n * A regular expression string matching diacritical mark\n *\n * @type {string}\n * @ignore\n */\nvar diacriticalMark = '\\\\u0300-\\\\u036F\\\\u1AB0-\\\\u1AFF\\\\u1DC0-\\\\u1DFF\\\\u20D0-\\\\u20FF\\\\uFE20-\\\\uFE2F';\n\n/**\n * A regular expression to match the base character for a combining mark\n *\n * @type {string}\n * @ignore\n */\nvar base = '\\\\0-\\\\u02FF\\\\u0370-\\\\u1AAF\\\\u1B00-\\\\u1DBF\\\\u1E00-\\\\u20CF\\\\u2100-\\\\uD7FF\\\\uE000-\\\\uFE1F\\\\uFE30-\\\\uFFFF';\n\n/**\n * Regular expression to match combining marks\n *\n * @see http://unicode.org/faq/char_combmark.html\n * @type {RegExp}\n * @ignore\n */\nvar REGEXP_COMBINING_MARKS = new RegExp('([' + base + ']|[' + highSurrogate + '][' + lowSurrogate + ']|[' + highSurrogate + '](?![' + lowSurrogate + '])|(?:[^' + highSurrogate + ']|^)[' + lowSurrogate + '])([' + diacriticalMark + ']+)', 'g');\n\n/**\n * Regular expression to match surrogate pairs\n *\n * @see http://www.unicode.org/faq/utf_bom.html#utf16-2\n * @type {RegExp}\n * @ignore\n */\nvar REGEXP_SURROGATE_PAIRS = new RegExp('([' + highSurrogate + '])([' + lowSurrogate + '])', 'g');\n\n/**\n * Regular expression to match a unicode character\n *\n * @type {RegExp}\n * @ignore\n */\nvar REGEXP_UNICODE_CHARACTER = new RegExp('((?:[' + base + ']|[' + highSurrogate + '][' + lowSurrogate + ']|[' + highSurrogate + '](?![' + lowSurrogate + '])|(?:[^' + highSurrogate + ']|^)[' + lowSurrogate + '])(?:[' + diacriticalMark + ']+))|\\\n([' + highSurrogate + '][' + lowSurrogate + '])|\\\n([\\\\n\\\\r\\\\u2028\\\\u2029])|\\\n(.)', 'g');\n\n/**\n * Regular expression to match whitespaces\n *\n * @type {RegExp}\n * @ignore\n */\nvar REGEXP_WHITESPACE = new RegExp('[' + whitespace + ']');\n\n/**\n * Regular expression to match whitespaces from the left side\n *\n * @type {RegExp}\n * @ignore\n */\nvar REGEXP_TRIM_LEFT = new RegExp('^[' + whitespace + ']+');\n\n/**\n * Regular expression to match whitespaces from the right side\n *\n * @type {RegExp}\n * @ignore\n */\nvar REGEXP_TRIM_RIGHT = new RegExp('[' + whitespace + ']+$');\n\n/**\n * Regular expression to match digit characters\n *\n * @type {RegExp}\n * @ignore\n */\nvar REGEXP_DIGIT = new RegExp('^' + digit + '+$');\n\n/**\n * Regular expression to match regular expression special characters\n *\n * @type {RegExp}\n * @ignore\n */\nvar REGEXP_SPECIAL_CHARACTERS = /[-[\\]{}()*+!<=:?./\\\\^$|#,]/g;\n\n/**\n * Regular expression to match not latin characters\n *\n * @type {RegExp}\n * @ignore\n */\nvar REGEXP_NON_LATIN = /[^A-Za-z0-9]/g;\n\n/**\n * Regular expression to match HTML special characters.\n *\n * @type {RegExp}\n * @ignore\n */\nvar REGEXP_HTML_SPECIAL_CHARACTERS = /[<>&\"'`]/g;\n\n/**\n * Regular expression to match sprintf format string\n *\n * @type {RegExp}\n * @ignore\n */\nvar REGEXP_CONVERSION_SPECIFICATION = /(%{1,2})(?:(\\d+)\\$)?(\\+)?([ 0]|'.{1})?(-)?(\\d+)?(?:\\.(\\d+))?([bcdiouxXeEfgGs])?/g;\n\n/**\n * Regular expression to match trailing zeros in a number\n *\n * @type {RegExp}\n * @ignore\n */\nvar REGEXP_TRAILING_ZEROS = /\\.?0+$/g;\n\n/**\n * Regular expression to match flags from a regular expression.\n *\n * @type {RegExp}\n * @ignore\n */\nvar REGEXP_FLAGS = /[gimuy]*$/;\n\n/**\n * Regular expression to match a list of tags.\n *\n * @see https://html.spec.whatwg.org/multipage/syntax.html#syntax-tag-name\n * @type {RegExp}\n * @ignore\n */\n\nvar REGEXP_TAG_LIST = /<([A-Za-z0-9]+)>/g;\n\n/**\n * A regular expression to match the General Punctuation Unicode block\n *\n * @type {string}\n * @ignore\n */\nvar generalPunctuationBlock = '\\\\u2000-\\\\u206F';\n\n/**\n * A regular expression to match non characters from from Basic Latin and Latin-1 Supplement Unicode blocks\n *\n * @type {string}\n * @ignore\n */\nvar nonCharacter = '\\\\x00-\\\\x2F\\\\x3A-\\\\x40\\\\x5B-\\\\x60\\\\x7b-\\\\xBF\\\\xD7\\\\xF7';\n\n/**\n * A regular expression to match the dingbat Unicode block\n *\n * @type {string}\n * @ignore\n */\nvar dingbatBlock = '\\\\u2700-\\\\u27BF';\n\n/**\n * A regular expression string that matches lower case letters: LATIN\n *\n * @type {string}\n * @ignore\n */\nvar lowerCaseLetter = 'a-z\\\\xB5\\\\xDF-\\\\xF6\\\\xF8-\\\\xFF\\\\u0101\\\\u0103\\\\u0105\\\\u0107\\\\u0109\\\\u010B\\\\u010D\\\\u010F\\\\u0111\\\\u0113\\\\u0115\\\\u0117\\\\u0119\\\\u011B\\\\u011D\\\\u011F\\\\u0121\\\\u0123\\\\u0125\\\\u0127\\\\u0129\\\\u012B\\\\u012D\\\\u012F\\\\u0131\\\\u0133\\\\u0135\\\\u0137\\\\u0138\\\\u013A\\\\u013C\\\\u013E\\\\u0140\\\\u0142\\\\u0144\\\\u0146\\\\u0148\\\\u0149\\\\u014B\\\\u014D\\\\u014F\\\\u0151\\\\u0153\\\\u0155\\\\u0157\\\\u0159\\\\u015B\\\\u015D\\\\u015F\\\\u0161\\\\u0163\\\\u0165\\\\u0167\\\\u0169\\\\u016B\\\\u016D\\\\u016F\\\\u0171\\\\u0173\\\\u0175\\\\u0177\\\\u017A\\\\u017C\\\\u017E-\\\\u0180\\\\u0183\\\\u0185\\\\u0188\\\\u018C\\\\u018D\\\\u0192\\\\u0195\\\\u0199-\\\\u019B\\\\u019E\\\\u01A1\\\\u01A3\\\\u01A5\\\\u01A8\\\\u01AA\\\\u01AB\\\\u01AD\\\\u01B0\\\\u01B4\\\\u01B6\\\\u01B9\\\\u01BA\\\\u01BD-\\\\u01BF\\\\u01C6\\\\u01C9\\\\u01CC\\\\u01CE\\\\u01D0\\\\u01D2\\\\u01D4\\\\u01D6\\\\u01D8\\\\u01DA\\\\u01DC\\\\u01DD\\\\u01DF\\\\u01E1\\\\u01E3\\\\u01E5\\\\u01E7\\\\u01E9\\\\u01EB\\\\u01ED\\\\u01EF\\\\u01F0\\\\u01F3\\\\u01F5\\\\u01F9\\\\u01FB\\\\u01FD\\\\u01FF\\\\u0201\\\\u0203\\\\u0205\\\\u0207\\\\u0209\\\\u020B\\\\u020D\\\\u020F\\\\u0211\\\\u0213\\\\u0215\\\\u0217\\\\u0219\\\\u021B\\\\u021D\\\\u021F\\\\u0221\\\\u0223\\\\u0225\\\\u0227\\\\u0229\\\\u022B\\\\u022D\\\\u022F\\\\u0231\\\\u0233-\\\\u0239\\\\u023C\\\\u023F\\\\u0240\\\\u0242\\\\u0247\\\\u0249\\\\u024B\\\\u024D\\\\u024F';\n\n/**\n * A regular expression string that matches upper case letters: LATIN\n *\n * @type {string}\n * @ignore\n */\nvar upperCaseLetter = '\\\\x41-\\\\x5a\\\\xc0-\\\\xd6\\\\xd8-\\\\xde\\\\u0100\\\\u0102\\\\u0104\\\\u0106\\\\u0108\\\\u010a\\\\u010c\\\\u010e\\\\u0110\\\\u0112\\\\u0114\\\\u0116\\\\u0118\\\\u011a\\\\u011c\\\\u011e\\\\u0120\\\\u0122\\\\u0124\\\\u0126\\\\u0128\\\\u012a\\\\u012c\\\\u012e\\\\u0130\\\\u0132\\\\u0134\\\\u0136\\\\u0139\\\\u013b\\\\u013d\\\\u013f\\\\u0141\\\\u0143\\\\u0145\\\\u0147\\\\u014a\\\\u014c\\\\u014e\\\\u0150\\\\u0152\\\\u0154\\\\u0156\\\\u0158\\\\u015a\\\\u015c\\\\u015e\\\\u0160\\\\u0162\\\\u0164\\\\u0166\\\\u0168\\\\u016a\\\\u016c\\\\u016e\\\\u0170\\\\u0172\\\\u0174\\\\u0176\\\\u0178\\\\u0179\\\\u017b\\\\u017d\\\\u0181\\\\u0182\\\\u0184\\\\u0186\\\\u0187\\\\u0189-\\\\u018b\\\\u018e-\\\\u0191\\\\u0193\\\\u0194\\\\u0196-\\\\u0198\\\\u019c\\\\u019d\\\\u019f\\\\u01a0\\\\u01a2\\\\u01a4\\\\u01a6\\\\u01a7\\\\u01a9\\\\u01ac\\\\u01ae\\\\u01af\\\\u01b1-\\\\u01b3\\\\u01b5\\\\u01b7\\\\u01b8\\\\u01bc\\\\u01c4\\\\u01c5\\\\u01c7\\\\u01c8\\\\u01ca\\\\u01cb\\\\u01cd\\\\u01cf\\\\u01d1\\\\u01d3\\\\u01d5\\\\u01d7\\\\u01d9\\\\u01db\\\\u01de\\\\u01e0\\\\u01e2\\\\u01e4\\\\u01e6\\\\u01e8\\\\u01ea\\\\u01ec\\\\u01ee\\\\u01f1\\\\u01f2\\\\u01f4\\\\u01f6-\\\\u01f8\\\\u01fa\\\\u01fc\\\\u01fe\\\\u0200\\\\u0202\\\\u0204\\\\u0206\\\\u0208\\\\u020a\\\\u020c\\\\u020e\\\\u0210\\\\u0212\\\\u0214\\\\u0216\\\\u0218\\\\u021a\\\\u021c\\\\u021e\\\\u0220\\\\u0222\\\\u0224\\\\u0226\\\\u0228\\\\u022a\\\\u022c\\\\u022e\\\\u0230\\\\u0232\\\\u023a\\\\u023b\\\\u023d\\\\u023e\\\\u0241\\\\u0243-\\\\u0246\\\\u0248\\\\u024a\\\\u024c\\\\u024e';\n\n/**\n * Regular expression to match Unicode words\n *\n * @type {RegExp}\n * @ignore\n */\nvar REGEXP_WORD = new RegExp('(?:[' + upperCaseLetter + '][' + diacriticalMark + ']*)?(?:[' + lowerCaseLetter + '][' + diacriticalMark + ']*)+|\\\n(?:[' + upperCaseLetter + '][' + diacriticalMark + ']*)+(?![' + lowerCaseLetter + '])|\\\n[' + digit + ']+|\\\n[' + dingbatBlock + ']|\\\n[^' + nonCharacter + generalPunctuationBlock + whitespace + ']+', 'g');\n\n/**\n * Regular expression to match words from Basic Latin and Latin-1 Supplement blocks\n *\n * @type {RegExp}\n * @ignore\n */\nvar REGEXP_LATIN_WORD = /[A-Z\\xC0-\\xD6\\xD8-\\xDE]?[a-z\\xDF-\\xF6\\xF8-\\xFF]+|[A-Z\\xC0-\\xD6\\xD8-\\xDE]+(?![a-z\\xDF-\\xF6\\xF8-\\xFF])|\\d+/g;\n\n/**\n * Regular expression to match alpha characters\n *\n * @see http://stackoverflow.com/a/22075070/1894471\n * @type {RegExp}\n * @ignore\n */\nvar REGEXP_ALPHA = new RegExp('^(?:[' + lowerCaseLetter + upperCaseLetter + '][' + diacriticalMark + ']*)+$');\n\n/**\n * Regular expression to match alpha and digit characters\n *\n * @see http://stackoverflow.com/a/22075070/1894471\n * @type {RegExp}\n * @ignore\n */\nvar REGEXP_ALPHA_DIGIT = new RegExp('^((?:[' + lowerCaseLetter + upperCaseLetter + '][' + diacriticalMark + ']*)|[' + digit + '])+$');\n\n/**\n * Regular expression to match Extended ASCII characters, i.e. the first 255\n *\n * @type {RegExp}\n * @ignore\n */\nvar REGEXP_EXTENDED_ASCII = /^[\\x01-\\xFF]*$/;\n\n/**\n * Verifies if `value` is `undefined` or `null` and returns `defaultValue`. In other case returns `value`.\n *\n * @ignore\n * @function nilDefault\n * @param {*} value The value to verify.\n * @param {*} defaultValue The default value.\n * @return {*} Returns `defaultValue` if `value` is `undefined` or `null`, otherwise `defaultValue`.\n */\nfunction nilDefault(value, defaultValue) {\n  return value == null ? defaultValue : value;\n}\n\n/**\n * Get the string representation of the `value`.\n * Converts the `value` to string.\n *\n * @ignore\n * @function toString\n * @param {*} value             The value to convert.\n * @return {string|null}        Returns the string representation of `value`.\n */\nfunction toString(value) {\n  if (isNil(value)) {\n    return null;\n  }\n  if (isString(value)) {\n    return value;\n  }\n  return String(value);\n}\n\n/**\n * Splits `subject` into an array of words.\n *\n * @function words\n * @static\n * @since 1.0.0\n * @memberOf Split\n * @param {string} [subject=''] The string to split into words.\n * @param {string|RegExp} [pattern] The pattern to watch words. If `pattern` is not RegExp, it is transformed to `new RegExp(pattern, flags)`.\n * @param {string} [flags=''] The regular expression flags. Applies when `pattern` is string type.\n * @return {Array} Returns the array of words.\n * @example\n * v.words('gravity can cross dimensions');\n * // => ['gravity', 'can', 'cross', 'dimensions']\n *\n * v.words('GravityCanCrossDimensions');\n * // => ['Gravity', 'Can', 'Cross', 'Dimensions']\n *\n * v.words('Gravity - can cross dimensions!');\n * // => ['Gravity', 'can', 'cross', 'dimensions']\n *\n * v.words('Earth gravity', /[^\\s]+/g);\n * // => ['Earth', 'gravity']\n */\nfunction words(subject, pattern, flags) {\n  var subjectString = coerceToString(subject);\n  var patternRegExp = void 0;\n  if (isNil(pattern)) {\n    patternRegExp = REGEXP_EXTENDED_ASCII.test(subjectString) ? REGEXP_LATIN_WORD : REGEXP_WORD;\n  } else if (pattern instanceof RegExp) {\n    patternRegExp = pattern;\n  } else {\n    var flagsString = toString(nilDefault(flags, ''));\n    patternRegExp = new RegExp(toString(pattern), flagsString);\n  }\n  return nilDefault(subjectString.match(patternRegExp), []);\n}\n\n/**\n * Transforms the `word` into camel case chunk.\n *\n * @param  {string} word  The word string\n * @param  {number} index The index of the word in phrase.\n * @return {string}       The transformed word.\n * @ignore\n */\nfunction wordToCamel(word, index) {\n  return index === 0 ? lowerCase(word) : capitalize(word, true);\n}\n\n/**\n * Converts the `subject` to <a href=\"https://en.wikipedia.org/wiki/CamelCase\">camel case</a>.\n *\n * @function camelCase\n * @static\n * @since 1.0.0\n * @memberOf Case\n * @param  {string} [subject=''] The string to convert to camel case.\n * @return {string}              The camel case string.\n * @example\n * v.camelCase('bird flight');\n * // => 'birdFlight'\n *\n * v.camelCase('BirdFlight');\n * // => 'birdFlight'\n *\n * v.camelCase('-BIRD-FLIGHT-');\n * // => 'birdFlight'\n */\nfunction camelCase(subject) {\n  var subjectString = coerceToString(subject);\n  if (subjectString === '') {\n    return '';\n  }\n  return words(subjectString).map(wordToCamel).join('');\n}\n\n/**\n * Converts the first character of `subject` to lower case.\n *\n * @function decapitalize\n * @static\n * @since 1.0.0\n * @memberOf Case\n * @param  {string} [subject=''] The string to decapitalize.\n * @return {string}              Returns the decapitalized string.\n * @example\n * v.decapitalize('Sun');\n * // => 'sun'\n *\n * v.decapitalize('moon');\n * // => 'moon'\n */\nfunction decapitalize(subject) {\n  var subjectString = coerceToString(subject);\n  if (subjectString === '') {\n    return '';\n  }\n  return subjectString.substr(0, 1).toLowerCase() + subjectString.substr(1);\n}\n\n/**\n * Converts the `subject` to <a href=\"https://en.wikipedia.org/wiki/Letter_case#cite_ref-13\">kebab case</a>,\n * also called <i>spinal case</i> or <i>lisp case</i>.\n *\n * @function kebabCase\n * @static\n * @since 1.0.0\n * @memberOf Case\n * @param  {string} [subject=''] The string to convert to kebab case.\n * @return {string}              Returns the kebab case string.\n * @example\n * v.kebabCase('goodbye blue sky');\n * // => 'goodbye-blue-sky'\n *\n * v.kebabCase('GoodbyeBlueSky');\n * // => 'goodbye-blue-sky'\n *\n * v.kebabCase('-Goodbye-Blue-Sky-');\n * // => 'goodbye-blue-sky'\n */\nfunction kebabCase(subject) {\n  var subjectString = coerceToString(subject);\n  if (subjectString === '') {\n    return '';\n  }\n  return words(subjectString).map(lowerCase).join('-');\n}\n\n/**\n * Converts the `subject` to <a href=\"https://en.wikipedia.org/wiki/Snake_case\">snake case</a>.\n *\n * @function snakeCase\n * @static\n * @since 1.0.0\n * @memberOf Case\n * @param  {string} [subject=''] The string to convert to snake case.\n * @return {string}              Returns the snake case string.\n * @example\n * v.snakeCase('learning to fly');\n * // => 'learning_to_fly'\n *\n * v.snakeCase('LearningToFly');\n * // => 'learning_to_fly'\n *\n * v.snakeCase('-Learning-To-Fly-');\n * // => 'learning_to_fly'\n */\nfunction snakeCase(subject) {\n  var subjectString = coerceToString(subject);\n  if (subjectString === '') {\n    return '';\n  }\n  return words(subjectString).map(lowerCase).join('_');\n}\n\n/**\n * Converts the `subject` to upper case.\n *\n * @function upperCase\n * @static\n * @since 1.0.0\n * @memberOf Case\n * @param  {string} [subject=''] The string to convert to upper case.\n * @return {string}              Returns the upper case string.\n * @example\n * v.upperCase('school');\n * // => 'SCHOOL'\n */\nfunction upperCase(subject) {\n  var subjectString = coerceToString(subject);\n  return subjectString.toUpperCase();\n}\n\n/**\n * Converts the uppercase alpha caracters of `subject` to lowercase and lowercase \n * characters to uppercase.\n *\n * @function swapCase\n * @static\n * @since 1.3.0\n * @memberOf Case\n * @param  {string} [subject=''] The string to swap the case.\n * @return {string}              Returns the converted string.\n * @example\n * v.swapCase('League of Shadows');\n * // => 'lEAGUE OF sHADOWS'\n *\n * v.swapCase('2 Bees');\n * // => '2 bEES'\n */\nfunction swapCase(subject) {\n  var subjectString = coerceToString(subject);\n  return subjectString.split('').reduce(swapAndConcat, '');\n}\n\nfunction swapAndConcat(swapped, character) {\n  var lowerCase = character.toLowerCase();\n  var upperCase = character.toUpperCase();\n  return swapped + (character === lowerCase ? upperCase : lowerCase);\n}\n\n/**\n * Converts the subject to title case.\n *\n * @function titleCase\n * @static\n * @since 1.4.0\n * @memberOf Case\n * @param  {string} [subject=''] The string to convert to title case.\n * @param  {Array}  [noSplit]    Do not split words at the specified characters.\n * @return {string}              Returns the title case string.\n * @example\n * v.titleCase('learning to fly');\n * // => 'Learning To Fly'\n *\n * v.titleCase('jean-luc is good-looking', ['-']);\n * // => 'Jean-luc Is Good-looking'\n */\nfunction titleCase(subject, noSplit) {\n  var subjectString = coerceToString(subject);\n  var noSplitArray = Array.isArray(noSplit) ? noSplit : [];\n  var wordsRegExp = REGEXP_EXTENDED_ASCII.test(subjectString) ? REGEXP_LATIN_WORD : REGEXP_WORD;\n  return subjectString.replace(wordsRegExp, function (word, index) {\n    var isNoSplit = index > 0 && noSplitArray.indexOf(subjectString[index - 1]) >= 0;\n    return isNoSplit ? word.toLowerCase() : capitalize(word, true);\n  });\n}\n\n/**\n * Clip the number to interval `downLimit` to `upLimit`.\n *\n * @ignore\n * @function clipNumber\n * @param {number} value The number to clip\n * @param {number} downLimit The down limit\n * @param {number} upLimit The upper limit\n * @return {number} The clipped number\n */\nfunction clipNumber(value, downLimit, upLimit) {\n  if (value <= downLimit) {\n    return downLimit;\n  }\n  if (value >= upLimit) {\n    return upLimit;\n  }\n  return value;\n}\n\n/**\n * Max save integer value\n *\n * @ignore\n * @type {number}\n */\nvar MAX_SAFE_INTEGER = 0x1fffffffffffff;\n\n/**\n * Transforms `value` to an integer.\n *\n * @ignore\n * @function toInteger\n * @param {number} value The number to transform.\n * @returns {number} Returns the transformed integer.\n */\nfunction toInteger(value) {\n  if (value === Infinity) {\n    return MAX_SAFE_INTEGER;\n  }\n  if (value === -Infinity) {\n    return -MAX_SAFE_INTEGER;\n  }\n  return ~~value;\n}\n\n/**\n * Truncates `subject` to a new `length`.\n *\n * @function truncate\n * @static\n * @since 1.0.0\n * @memberOf Chop\n * @param  {string} [subject=''] The string to truncate.\n * @param  {int}    length       The length to truncate the string.\n * @param  {string} [end='...']  The string to be added at the end.\n * @return {string}              Returns the truncated string.\n * @example\n * v.truncate('Once upon a time', 7);\n * // => 'Once...'\n *\n * v.truncate('Good day, Little Red Riding Hood', 14, ' (...)');\n * // => 'Good day (...)'\n *\n * v.truncate('Once upon', 10);\n * // => 'Once upon'\n */\nfunction truncate(subject, length, end) {\n  var subjectString = coerceToString(subject);\n  var lengthInt = isNil(length) ? subjectString.length : clipNumber(toInteger(length), 0, MAX_SAFE_INTEGER);\n  var endString = coerceToString(end, '...');\n  if (lengthInt >= subjectString.length) {\n    return subjectString;\n  }\n  return subjectString.substr(0, length - endString.length) + endString;\n}\n\n/**\n * Access a character from `subject` at specified `position`.\n *\n * @function charAt\n * @static\n * @since 1.0.0\n * @memberOf Chop\n * @param  {string} [subject=''] The string to extract from.\n * @param  {numbers} position The position to get the character.\n * @return {string} Returns the character at specified position.\n * @example\n * v.charAt('helicopter', 0);\n * // => 'h'\n *\n * v.charAt('helicopter', 1);\n * // => 'e'\n */\nfunction charAt(subject, position) {\n  var subjectString = coerceToString(subject);\n  return subjectString.charAt(position);\n}\n\nvar HIGH_SURROGATE_START = 0xD800;\nvar HIGH_SURROGATE_END = 0xDBFF;\nvar LOW_SURROGATE_START = 0xDC00;\nvar LOW_SURROGATE_END = 0xDFFF;\n\n/**\n * Checks if `codePoint` is a high-surrogate number from range 0xD800 to 0xDBFF.\n *\n * @ignore\n * @param {number} codePoint The code point number to be verified\n * @return {boolean} Returns a boolean whether `codePoint` is a high-surrogate number.\n */\nfunction isHighSurrogate(codePoint) {\n  return codePoint >= HIGH_SURROGATE_START && codePoint <= HIGH_SURROGATE_END;\n}\n\n/**\n * Checks if `codePoint` is a low-surrogate number from range 0xDC00 to 0xDFFF.\n *\n * @ignore\n * @param {number} codePoint The code point number to be verified\n * @return {boolean} Returns a boolean whether `codePoint` is a low-surrogate number.\n */\nfunction isLowSurrogate(codePoint) {\n  return codePoint >= LOW_SURROGATE_START && codePoint <= LOW_SURROGATE_END;\n}\n\n/**\n * Get the astral code point number based on surrogate pair numbers.\n *\n * @ignore\n * @param {number} highSurrogate The high-surrogate code point number.\n * @param {number} lowSurrogate The low-surrogate code point number.\n * @return {number} Returns the astral symbol number.\n */\nfunction getAstralNumberFromSurrogatePair(highSurrogate, lowSurrogate) {\n  return (highSurrogate - HIGH_SURROGATE_START) * 0x400 + lowSurrogate - LOW_SURROGATE_START + 0x10000;\n}\n\n/**\n * Get the number representation of the `value`.\n * Converts the `value` to number.\n * If `value` is `null` or `undefined`, return `defaultValue`.\n *\n * @ignore\n * @function toString\n * @param {*} value             The value to convert.\n * @param {*} [defaultValue=''] The default value to return.\n * @return {number|null}        Returns the number representation of `value`. Returns `defaultValue` if `value` is\n *                              `null` or `undefined`.\n */\nfunction coerceToNumber(value) {\n  var defaultValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n\n  if (isNil(value)) {\n    return defaultValue;\n  }\n  if (typeof value === 'number') {\n    return value;\n  }\n  return Number(value);\n}\n\n/**\n * If `value` is `NaN`, return `defaultValue`. In other case returns `value`.\n *\n * @ignore\n * @function nanDefault\n * @param {*} value The value to verify.\n * @param {*} defaultValue The default value.\n * @return {*} Returns `defaultValue` if `value` is `NaN`, otherwise `defaultValue`.\n */\nfunction nanDefault(value, defaultValue) {\n  return value !== value ? defaultValue : value;\n}\n\n/**\n * Get the Unicode code point value of the character at `position`. <br/>\n * If a valid UTF-16 <a href=\"https://rainsoft.io/what-every-javascript-developer-should-know-about-unicode/#24surrogatepairs\">\n * surrogate pair</a> starts at `position`, the\n * <a href=\"https://rainsoft.io/what-every-javascript-developer-should-know-about-unicode/#astralplanes\">astral code point</a>\n * value at `position` is returned.\n *\n * @function codePointAt\n * @static\n * @since 1.0.0\n * @memberOf Chop\n * @param  {string} [subject=''] The string to extract from.\n * @param  {number} position The position to get the code point number.\n * @return {number} Returns a non-negative number less than or equal to `0x10FFFF`.\n * @example\n * v.codePointAt('rain', 1);\n * // => 97, or 0x0061\n *\n * v.codePointAt('\\uD83D\\uDE00 is smile', 0); // or '😀 is smile'\n * // => 128512, or 0x1F600\n */\nfunction codePointAt(subject, position) {\n  var subjectString = coerceToString(subject);\n  var subjectStringLength = subjectString.length;\n  var positionNumber = coerceToNumber(position);\n  positionNumber = nanDefault(positionNumber, 0);\n  if (positionNumber < 0 || positionNumber >= subjectStringLength) {\n    return undefined;\n  }\n  var firstCodePoint = subjectString.charCodeAt(positionNumber);\n  var secondCodePoint = void 0;\n  if (isHighSurrogate(firstCodePoint) && subjectStringLength > positionNumber + 1) {\n    secondCodePoint = subjectString.charCodeAt(positionNumber + 1);\n    if (isLowSurrogate(secondCodePoint)) {\n      return getAstralNumberFromSurrogatePair(firstCodePoint, secondCodePoint);\n    }\n  }\n  return firstCodePoint;\n}\n\n/**\n * Extracts the first `length` characters from `subject`.\n *\n * @function first\n * @static\n * @since 1.0.0\n * @memberOf Chop\n * @param  {string} [subject=''] The string to extract from.\n * @param  {int}    [length=1]   The number of characters to extract.\n * @return {string}              Returns the first characters string.\n * @example\n * v.first('helicopter');\n * // => 'h'\n *\n * v.first('vehicle', 2);\n * // => 've'\n *\n * v.first('car', 5);\n * // => 'car'\n */\nfunction first(subject, length) {\n  var subjectString = coerceToString(subject);\n  var lengthInt = isNil(length) ? 1 : clipNumber(toInteger(length), 0, MAX_SAFE_INTEGER);\n  if (subjectString.length <= lengthInt) {\n    return subjectString;\n  }\n  return subjectString.substr(0, lengthInt);\n}\n\n/**\n * Get a grapheme from `subject` at specified `position` taking care of\n * <a href=\"https://rainsoft.io/what-every-javascript-developer-should-know-about-unicode/#24surrogatepairs\">surrogate pairs</a> and\n * <a href=\"https://rainsoft.io/what-every-javascript-developer-should-know-about-unicode/#25combiningmarks\">combining marks</a>.\n *\n * @function graphemeAt\n * @static\n * @since 1.0.0\n * @memberOf Chop\n * @param  {string} [subject=''] The string to extract from.\n * @param  {number} position The position to get the grapheme.\n * @return {string} Returns the grapheme at specified position.\n * @example\n * v.graphemeAt('\\uD835\\uDC00\\uD835\\uDC01', 0); // or '𝐀𝐁'\n * // => 'A'\n *\n * v.graphemeAt('cafe\\u0301', 3); // or 'café'\n * // => 'é'\n */\nfunction graphemeAt(subject, position) {\n  var subjectString = coerceToString(subject);\n  var positionNumber = coerceToNumber(position);\n  var graphemeMatch = void 0;\n  var graphemeMatchIndex = 0;\n  positionNumber = nanDefault(positionNumber, 0);\n  while ((graphemeMatch = REGEXP_UNICODE_CHARACTER.exec(subjectString)) !== null) {\n    if (graphemeMatchIndex === positionNumber) {\n      REGEXP_UNICODE_CHARACTER.lastIndex = 0;\n      return graphemeMatch[0];\n    }\n    graphemeMatchIndex++;\n  }\n  return '';\n}\n\n/**\n * Extracts the last `length` characters from `subject`.\n *\n * @function last\n * @static\n * @since 1.0.0\n * @memberOf Chop\n * @param  {string} [subject=''] The string to extract from.\n * @param  {int}    [length=1]   The number of characters to extract.\n * @return {string}              Returns the last characters string.\n * @example\n * v.last('helicopter');\n * // => 'r'\n *\n * v.last('vehicle', 2);\n * // => 'le'\n *\n * v.last('car', 5);\n * // => 'car'\n */\nfunction last(subject, length) {\n  var subjectString = coerceToString(subject);\n  var lengthInt = isNil(length) ? 1 : clipNumber(toInteger(length), 0, MAX_SAFE_INTEGER);\n  if (subjectString.length <= lengthInt) {\n    return subjectString;\n  }\n  return subjectString.substr(subjectString.length - lengthInt, lengthInt);\n}\n\n/**\n * Truncates `subject` to a new `length` and does not break the words. Guarantees that the truncated string is no longer\n * than `length`.\n *\n * @static\n * @function prune\n * @since 1.0.0\n * @memberOf Chop\n * @param  {string} [subject=''] The string to prune.\n * @param  {int}    length       The length to prune the string.\n * @param  {string} [end='...']  The string to be added at the end.\n * @return {string}              Returns the pruned string.\n * @example\n * v.prune('Once upon a time', 7);\n * // => 'Once...'\n *\n * v.prune('Good day, Little Red Riding Hood', 16, ' (more)');\n * // => 'Good day (more)'\n *\n * v.prune('Once upon', 10);\n * // => 'Once upon'\n */\nfunction prune(subject, length, end) {\n  var subjectString = coerceToString(subject);\n  var lengthInt = isNil(length) ? subjectString.length : clipNumber(toInteger(length), 0, MAX_SAFE_INTEGER);\n  var endString = coerceToString(end, '...');\n  if (lengthInt >= subjectString.length) {\n    return subjectString;\n  }\n  var pattern = REGEXP_EXTENDED_ASCII.test(subjectString) ? REGEXP_LATIN_WORD : REGEXP_WORD;\n  var truncatedLength = 0;\n  subjectString.replace(pattern, function (word, offset) {\n    var wordInsertLength = offset + word.length;\n    if (wordInsertLength <= lengthInt - endString.length) {\n      truncatedLength = wordInsertLength;\n    }\n  });\n  return subjectString.substr(0, truncatedLength) + endString;\n}\n\n/**\n * Extracts from `subject` a string from `start` position up to `end` position. The character at `end` position is not\n * included.\n *\n * @function slice\n * @static\n * @since 1.0.0\n * @memberOf Chop\n * @param  {string} [subject='']         The string to extract from.\n * @param  {number} start                The position to start extraction. If negative use `subject.length + start`.\n * @param  {number} [end=subject.length] The position to end extraction. If negative use `subject.length + end`.\n * @return {string}                      Returns the extracted string.\n * @note Uses native `String.prototype.slice()`\n * @example\n * v.slice('miami', 1);\n * // => 'iami'\n *\n * v.slice('florida', -4);\n * // => 'rida'\n *\n * v.slice('florida', 1, 4);\n * // => \"lor\"\n */\nfunction slice(subject, start, end) {\n  return coerceToString(subject).slice(start, end);\n}\n\n/**\n * Extracts from `subject` a string from `start` position a number of `length` characters.\n *\n * @function substr\n * @static\n * @since 1.0.0\n * @memberOf Chop\n * @param  {string} [subject='']                 The string to extract from.\n * @param  {number} start                        The position to start extraction.\n * @param  {number} [length=subject.endOfString] The number of characters to extract. If omitted, extract to the end of `subject`.\n * @return {string}                              Returns the extracted string.\n * @note Uses native `String.prototype.substr()`\n * @example\n * v.substr('infinite loop', 9);\n * // => 'loop'\n *\n * v.substr('dreams', 2, 2);\n * // => 'ea'\n */\nfunction substr(subject, start, length) {\n  return coerceToString(subject).substr(start, length);\n}\n\n/**\n * Extracts from `subject` a string from `start` position up to `end` position. The character at `end` position is not\n * included.\n *\n * @function substring\n * @static\n * @since 1.0.0\n * @memberOf Chop\n * @param  {string} [subject='']         The string to extract from.\n * @param  {number} start                The position to start extraction.\n * @param  {number} [end=subject.length] The position to end extraction.\n * @return {string}                      Returns the extracted string.\n * @note Uses native `String.prototype.substring()`\n * @example\n * v.substring('beach', 1);\n * // => 'each'\n *\n * v.substring('ocean', 1, 3);\n * // => 'ea'\n */\nfunction substring(subject, start, end) {\n  return coerceToString(subject).substring(start, end);\n}\n\n/**\n * Counts the characters in `subject`.<br/>\n *\n * @function count\n * @static\n * @since 1.0.0\n * @memberOf Count\n * @param  {string} [subject=''] The string to count characters.\n * @return {number}              Returns the number of characters in `subject`.\n * @example\n * v.count('rain');\n * // => 4\n */\nfunction count(subject) {\n  return coerceToString(subject).length;\n}\n\n/**\n * Counts the graphemes in `subject` taking care of\n * <a href=\"https://rainsoft.io/what-every-javascript-developer-should-know-about-unicode/#24surrogatepairs\">surrogate pairs</a> and\n * <a href=\"https://rainsoft.io/what-every-javascript-developer-should-know-about-unicode/#25combiningmarks\">combining marks</a>.\n *\n * @function  countGraphemes\n * @static\n * @since 1.0.0\n * @memberOf Count\n * @param  {string} [subject=''] The string to count graphemes.\n * @return {number}              Returns the number of graphemes in `subject`.\n * @example\n * v.countGraphemes('cafe\\u0301'); // or 'café'\n * // => 4\n *\n * v.countGraphemes('\\uD835\\uDC00\\uD835\\uDC01'); // or '𝐀𝐁'\n * // => 2\n *\n * v.countGraphemes('rain');\n * // => 4\n */\nfunction countGrapheme(subject) {\n  return coerceToString(subject).replace(REGEXP_COMBINING_MARKS, '*').replace(REGEXP_SURROGATE_PAIRS, '*').length;\n}\n\n/**\n * Counts the number of `substring` appearances in `subject`.\n *\n * @function countSubstrings\n * @static\n * @since 1.0.0\n * @memberOf Count\n * @param  {string} [subject=''] The string where to count.\n * @param  {string} substring    The substring to be counted.\n * @return {number}              Returns the number of `substring` appearances.\n * @example\n * v.countSubstrings('bad boys, bad boys whatcha gonna do?', 'boys');\n * // => 2\n *\n * v.countSubstrings('every dog has its day', 'cat');\n * // => 0\n */\nfunction countSubstrings(subject, substring) {\n  var subjectString = coerceToString(subject);\n  var substringString = coerceToString(substring);\n  var substringLength = substringString.length;\n  var count = 0;\n  var matchIndex = 0;\n  if (subjectString === '' || substringString === '') {\n    return count;\n  }\n  do {\n    matchIndex = subjectString.indexOf(substringString, matchIndex);\n    if (matchIndex !== -1) {\n      count++;\n      matchIndex += substringLength;\n    }\n  } while (matchIndex !== -1);\n  return count;\n}\n\nvar reduce = Array.prototype.reduce;\n\n/**\n * Counts the characters in `subject` for which `predicate` returns truthy.\n *\n * @function  countWhere\n * @static\n * @since 1.0.0\n * @memberOf Count\n * @param  {string}   [subject=''] The string to count characters.\n * @param  {Function} predicate    The predicate function invoked on each character with parameters `(character, index, string)`.\n * @param  {Object}   [context]    The context to invoke the `predicate`.\n * @return {number}                Returns the number of characters for which `predicate` returns truthy.\n * @example\n * v.countWhere('hola!', v.isAlpha);\n * // => 4\n *\n * v.countWhere('2022', function(character, index, str) {\n *   return character === '2';\n * });\n * // => 3\n */\nfunction countWhere(subject, predicate, context) {\n  var subjectString = coerceToString(subject);\n  if (subjectString === '' || typeof predicate !== 'function') {\n    return 0;\n  }\n  var predicateWithContext = predicate.bind(context);\n  return reduce.call(subjectString, function (countTruthy, character, index) {\n    return predicateWithContext(character, index, subjectString) ? countTruthy + 1 : countTruthy;\n  }, 0);\n}\n\n/**\n * Counts the number of words in `subject`.\n *\n * @function countWords\n * @static\n * @since 1.0.0\n * @memberOf Count\n * @param {string} [subject=''] The string to split into words.\n * @param {string|RegExp} [pattern] The pattern to watch words. If `pattern` is not RegExp, it is transformed to `new RegExp(pattern, flags)`.\n * @param {string} [flags=''] The regular expression flags. Applies when `pattern` is string type.\n * @return {number} Returns the number of words.\n * @example\n * v.countWords('gravity can cross dimensions');\n * // => 4\n *\n * v.countWords('GravityCanCrossDimensions');\n * // => 4\n *\n * v.countWords('Gravity - can cross dimensions!');\n * // => 4\n *\n * v.words('Earth gravity', /[^\\s]+/g);\n * // => 2\n */\nfunction countWords(subject, pattern, flags) {\n  return words(subject, pattern, flags).length;\n}\n\n/**\n * The current index.\n *\n * @ignore\n * @name ReplacementIndex#index\n * @type {number}\n * @return {ReplacementIndex} ReplacementIndex instance.\n */\nfunction ReplacementIndex() {\n  this.index = 0;\n}\n\n/**\n * Increment the current index.\n *\n * @ignore\n * @return {undefined}\n */\nReplacementIndex.prototype.increment = function () {\n  this.index++;\n};\n\n/**\n * Increment the current index by position.\n *\n * @ignore\n * @param {number} [position] The replacement position.\n * @return {undefined}\n */\nReplacementIndex.prototype.incrementOnEmptyPosition = function (position) {\n  if (isNil(position)) {\n    this.increment();\n  }\n};\n\n/**\n * Get the replacement index by position.\n *\n * @ignore\n * @param {number} [position] The replacement position.\n * @return {number} The replacement index.\n */\nReplacementIndex.prototype.getIndexByPosition = function (position) {\n  return isNil(position) ? this.index : position - 1;\n};\n\n// Type specifiers\nvar TYPE_INTEGER = 'i';\nvar TYPE_INTEGER_BINARY = 'b';\nvar TYPE_INTEGER_ASCII_CHARACTER = 'c';\nvar TYPE_INTEGER_DECIMAL = 'd';\nvar TYPE_INTEGER_OCTAL = 'o';\nvar TYPE_INTEGER_UNSIGNED_DECIMAL = 'u';\nvar TYPE_INTEGER_HEXADECIMAL = 'x';\nvar TYPE_INTEGER_HEXADECIMAL_UPPERCASE = 'X';\nvar TYPE_FLOAT_SCIENTIFIC = 'e';\nvar TYPE_FLOAT_SCIENTIFIC_UPPERCASE = 'E';\nvar TYPE_FLOAT = 'f';\nvar TYPE_FLOAT_SHORT = 'g';\nvar TYPE_FLOAT_SHORT_UPPERCASE = 'G';\nvar TYPE_STRING = 's';\n\n// Simple literals\n\nvar LITERAL_SINGLE_QUOTE = \"'\";\nvar LITERAL_PLUS = '+';\nvar LITERAL_MINUS = '-';\nvar LITERAL_PERCENT_SPECIFIER = '%%';\n\n// Radix constants to format numbers\nvar RADIX_BINARY = 2;\nvar RADIX_OCTAL = 8;\n\nvar RADIX_HEXADECIMAL = 16;\n\n/**\n * Repeats the `subject` number of `times`.\n *\n * @function repeat\n * @static\n * @since 1.0.0\n * @memberOf Manipulate\n * @param {string} [subject=''] The string to repeat.\n * @param {number} [times=1] The number of times to repeat.\n * @return {string} Returns the repeated string.\n * @example\n * v.repeat('w', 3);\n * // => 'www'\n *\n * v.repeat('world', 0);\n * // => ''\n */\nfunction repeat(subject, times) {\n  var subjectString = coerceToString(subject);\n  var timesInt = isNil(times) ? 1 : clipNumber(toInteger(times), 0, MAX_SAFE_INTEGER);\n  var repeatString = '';\n  while (timesInt) {\n    if (timesInt & 1) {\n      repeatString += subjectString;\n    }\n    if (timesInt > 1) {\n      subjectString += subjectString;\n    }\n    timesInt >>= 1;\n  }\n  return repeatString;\n}\n\n/**\n * Creates the padding string.\n *\n * @ignore\n * @param {string} padCharacters The characters to create padding string.\n * @param {number} length The padding string length.\n * @return {string} The padding string.\n */\nfunction buildPadding(padCharacters, length) {\n  var padStringRepeat = toInteger(length / padCharacters.length);\n  var padStringRest = length % padCharacters.length;\n  return repeat(padCharacters, padStringRepeat + padStringRest).substr(0, length);\n}\n\n/**\n * Pads `subject` from left to a new `length`.\n *\n * @function padLeft\n * @static\n * @since 1.0.0\n * @memberOf Manipulate\n * @param {string} [subject=''] The string to pad.\n * @param {int} [length=0] The length to left pad the string. No changes are made if `length` is less than `subject.length`.\n * @param {string} [pad=' '] The string to be used for padding.\n * @return {string} Returns the left padded string.\n * @example\n * v.padLeft('dog', 5);\n * // => '  dog'\n *\n * v.padLeft('bird', 6, '-');\n * // => '--bird'\n *\n * v.padLeft('cat', 6, '-=');\n * // => '-=-cat'\n */\nfunction padLeft(subject, length, pad) {\n  var subjectString = coerceToString(subject);\n  var lengthInt = isNil(length) ? 0 : clipNumber(toInteger(length), 0, MAX_SAFE_INTEGER);\n  var padString = coerceToString(pad, ' ');\n  if (lengthInt <= subjectString.length) {\n    return subjectString;\n  }\n  return buildPadding(padString, lengthInt - subjectString.length) + subjectString;\n}\n\n/**\n * Pads `subject` from right to a new `length`.\n *\n * @function padRight\n * @static\n * @since 1.0.0\n * @memberOf Manipulate\n * @param {string} [subject=''] The string to pad.\n * @param {int} [length=0] The length to right pad the string. No changes are made if `length` is less than `subject.length`.\n * @param {string} [pad=' '] The string to be used for padding.\n * @return {string} Returns the right padded string.\n * @example\n * v.padRight('dog', 5);\n * // => 'dog  '\n *\n * v.padRight('bird', 6, '-');\n * // => 'bird--'\n *\n * v.padRight('cat', 6, '-=');\n * // => 'cat-=-'\n */\nfunction padRight(subject, length, pad) {\n  var subjectString = coerceToString(subject);\n  var lengthInt = isNil(length) ? 0 : clipNumber(toInteger(length), 0, MAX_SAFE_INTEGER);\n  var padString = coerceToString(pad, ' ');\n  if (lengthInt <= subjectString.length) {\n    return subjectString;\n  }\n  return subjectString + buildPadding(padString, lengthInt - subjectString.length);\n}\n\n/**\n * Aligns and pads `subject` string.\n *\n * @ignore\n * @param {string} subject The subject string.\n * @param {ConversionSpecification} conversion The conversion specification object.\n * @return {string} Returns the aligned and padded string.\n */\nfunction alignAndPad(subject, conversion) {\n  var width = conversion.width;\n  if (isNil(width) || subject.length >= width) {\n    return subject;\n  }\n  var padType = conversion.alignmentSpecifier === LITERAL_MINUS ? padRight : padLeft;\n  return padType(subject, width, conversion.getPaddingCharacter());\n}\n\n/**\n * Add sign to the formatted number.\n *\n * @ignore\n * @name addSignToFormattedNumber\n * @param  {number} replacementNumber The number to be replaced.\n * @param  {string} formattedReplacement The formatted version of number.\n * @param  {ConversionSpecification} conversion The conversion specification object.\n * @return {string} Returns the formatted number string with a sign.\n */\nfunction addSignToFormattedNumber(replacementNumber, formattedReplacement, conversion) {\n  if (conversion.signSpecifier === LITERAL_PLUS && replacementNumber >= 0) {\n    formattedReplacement = LITERAL_PLUS + formattedReplacement;\n  }\n  return formattedReplacement;\n}\n\n/**\n * Formats a float type according to specifiers.\n *\n * @ignore\n * @param  {string} replacement The string to be formatted.\n * @param  {ConversionSpecification} conversion The conversion specification object.\n * @return {string} Returns the formatted string.\n */\n\nfunction float(replacement, conversion) {\n  var replacementNumber = parseFloat(replacement);\n  var formattedReplacement = void 0;\n  if (isNaN(replacementNumber)) {\n    replacementNumber = 0;\n  }\n  var precision = coerceToNumber(conversion.precision, 6);\n  switch (conversion.typeSpecifier) {\n    case TYPE_FLOAT:\n      formattedReplacement = replacementNumber.toFixed(precision);\n      break;\n    case TYPE_FLOAT_SCIENTIFIC:\n      formattedReplacement = replacementNumber.toExponential(precision);\n      break;\n    case TYPE_FLOAT_SCIENTIFIC_UPPERCASE:\n      formattedReplacement = replacementNumber.toExponential(precision).toUpperCase();\n      break;\n    case TYPE_FLOAT_SHORT:\n    case TYPE_FLOAT_SHORT_UPPERCASE:\n      formattedReplacement = formatFloatAsShort(replacementNumber, precision, conversion);\n      break;\n  }\n  formattedReplacement = addSignToFormattedNumber(replacementNumber, formattedReplacement, conversion);\n  return coerceToString(formattedReplacement);\n}\n\n/**\n * Formats the short float.\n *\n * @ignore\n * @param  {number} replacementNumber The number to format.\n * @param  {number} precision The precision to format the float.\n * @param  {ConversionSpecification} conversion The conversion specification object.\n * @return {string}  Returns the formatted short float.\n */\nfunction formatFloatAsShort(replacementNumber, precision, conversion) {\n  if (replacementNumber === 0) {\n    return '0';\n  }\n  var nonZeroPrecision = precision === 0 ? 1 : precision;\n  var formattedReplacement = replacementNumber.toPrecision(nonZeroPrecision).replace(REGEXP_TRAILING_ZEROS, '');\n  if (conversion.typeSpecifier === TYPE_FLOAT_SHORT_UPPERCASE) {\n    formattedReplacement = formattedReplacement.toUpperCase();\n  }\n  return formattedReplacement;\n}\n\n/**\n * Formats an integer type according to specifiers.\n *\n * @ignore\n * @param  {string} replacement The string to be formatted.\n * @param  {ConversionSpecification} conversion The conversion specification object.\n * @return {string} Returns the formatted string.\n */\n\nfunction integerBase(replacement, conversion) {\n  var integer = parseInt(replacement);\n  if (isNaN(integer)) {\n    integer = 0;\n  }\n  integer = integer >>> 0;\n  switch (conversion.typeSpecifier) {\n    case TYPE_INTEGER_ASCII_CHARACTER:\n      integer = String.fromCharCode(integer);\n      break;\n    case TYPE_INTEGER_BINARY:\n      integer = integer.toString(RADIX_BINARY);\n      break;\n    case TYPE_INTEGER_OCTAL:\n      integer = integer.toString(RADIX_OCTAL);\n      break;\n    case TYPE_INTEGER_HEXADECIMAL:\n      integer = integer.toString(RADIX_HEXADECIMAL);\n      break;\n    case TYPE_INTEGER_HEXADECIMAL_UPPERCASE:\n      integer = integer.toString(RADIX_HEXADECIMAL).toUpperCase();\n      break;\n  }\n  return coerceToString(integer);\n}\n\n/**\n * Formats a decimal integer type according to specifiers.\n *\n * @ignore\n * @param  {string} replacement The string to be formatted.\n * @param  {ConversionSpecification} conversion The conversion specification object.\n * @return {string} Returns the formatted string.\n */\n\nfunction integerDecimal(replacement, conversion) {\n  var integer = parseInt(replacement);\n  if (isNaN(integer)) {\n    integer = 0;\n  }\n  return addSignToFormattedNumber(integer, toString(integer), conversion);\n}\n\n/**\n * Formats a string type according to specifiers.\n *\n * @ignore\n * @param {string} replacement The string to be formatted.\n * @param {ConversionSpecification} conversion The conversion specification object.\n * @return {string} Returns the formatted string.\n */\nfunction stringFormat(replacement, conversion) {\n  var formattedReplacement = replacement;\n  var precision = conversion.precision;\n  if (!isNil(precision) && formattedReplacement.length > precision) {\n    formattedReplacement = truncate(formattedReplacement, precision, '');\n  }\n  return formattedReplacement;\n}\n\n/**\n * Returns the computed string based on format specifiers.\n *\n * @ignore\n * @name computeReplacement\n * @param {string} replacement The replacement value.\n * @param {ConversionSpecification} conversion The conversion specification object.\n * @return {string} Returns the computed string.\n */\nfunction compute(replacement, conversion) {\n  var formatFunction = void 0;\n  switch (conversion.typeSpecifier) {\n    case TYPE_STRING:\n      formatFunction = stringFormat;\n      break;\n    case TYPE_INTEGER_DECIMAL:\n    case TYPE_INTEGER:\n      formatFunction = integerDecimal;\n      break;\n    case TYPE_INTEGER_ASCII_CHARACTER:\n    case TYPE_INTEGER_BINARY:\n    case TYPE_INTEGER_OCTAL:\n    case TYPE_INTEGER_HEXADECIMAL:\n    case TYPE_INTEGER_HEXADECIMAL_UPPERCASE:\n    case TYPE_INTEGER_UNSIGNED_DECIMAL:\n      formatFunction = integerBase;\n      break;\n    case TYPE_FLOAT:\n    case TYPE_FLOAT_SCIENTIFIC:\n    case TYPE_FLOAT_SCIENTIFIC_UPPERCASE:\n    case TYPE_FLOAT_SHORT:\n    case TYPE_FLOAT_SHORT_UPPERCASE:\n      formatFunction = float;\n      break;\n  }\n  var formattedString = formatFunction(replacement, conversion);\n  return alignAndPad(formattedString, conversion);\n}\n\n/**\n * Construct the new conversion specification object.\n *\n * @ignore\n * @param {Object} properties An object with properties to initialize.\n * @return {ConversionSpecification} ConversionSpecification instance.\n */\nfunction ConversionSpecification(properties) {\n\n  /**\n   * The percent characters from conversion specification.\n   *\n   * @ignore\n   * @name ConversionSpecification#percent\n   * @type {string}\n   */\n  this.percent = properties.percent;\n\n  /**\n   *  The sign specifier to force a sign to be used on a number.\n   *\n   * @ignore\n   * @name ConversionSpecification#signSpecifier\n   * @type {string}\n   */\n  this.signSpecifier = properties.signSpecifier;\n\n  /**\n   * The padding specifier that says what padding character will be used.\n   *\n   * @ignore\n   * @name ConversionSpecification#paddingSpecifier\n   * @type {string}\n   */\n  this.paddingSpecifier = properties.paddingSpecifier;\n\n  /**\n   * The alignment specifier that says if the result should be left-justified or right-justified.\n   *\n   * @ignore\n   * @name ConversionSpecification#alignmentSpecifier\n   * @type {string}\n   */\n  this.alignmentSpecifier = properties.alignmentSpecifier;\n\n  /**\n   * The width specifier how many characters this conversion should result in.\n   *\n   * @ignore\n   * @name ConversionSpecification#width\n   * @type {number}\n   */\n  this.width = properties.width;\n\n  /**\n   * The precision specifier says how many decimal digits should be displayed for floating-point numbers.\n   *\n   * @ignore\n   * @name ConversionSpecification#precision\n   * @type {number}\n   */\n  this.precision = properties.precision;\n\n  /**\n   * The type specifier says what type the argument data should be treated as.\n   *\n   * @ignore\n   * @name ConversionSpecification#typeSpecifier\n   * @type {string}\n   */\n  this.typeSpecifier = properties.typeSpecifier;\n}\n\n/**\n * Check if the conversion specification is a percent literal \"%%\".\n *\n * @ignore\n * @return {boolean} Returns true if the conversion is a percent literal, false otherwise.\n */\nConversionSpecification.prototype.isPercentLiteral = function () {\n  return LITERAL_PERCENT_SPECIFIER === this.percent;\n};\n\n/**\n * Get the padding character from padding specifier.\n *\n * @ignore\n * @returns {string} Returns the padding character.\n */\nConversionSpecification.prototype.getPaddingCharacter = function () {\n  var paddingCharacter = nilDefault(this.paddingSpecifier, ' ');\n  if (paddingCharacter.length === 2 && paddingCharacter[0] === LITERAL_SINGLE_QUOTE) {\n    paddingCharacter = paddingCharacter[1];\n  }\n  return paddingCharacter;\n};\n\n/**\n * Validates the specifier type and replacement position.\n *\n * @ignore\n * @throws {Error} Throws an exception on insufficient arguments or unknown specifier.\n * @param  {number} index The index of the matched specifier.\n * @param  {number} replacementsLength The number of replacements.\n * @param  {ConversionSpecification} conversion The conversion specification object.\n * @return {undefined}\n */\nfunction validate(index, replacementsLength, conversion) {\n  if (isNil(conversion.typeSpecifier)) {\n    throw new Error('sprintf(): Unknown type specifier');\n  }\n  if (index > replacementsLength - 1) {\n    throw new Error('sprintf(): Too few arguments');\n  }\n  if (index < 0) {\n    throw new Error('sprintf(): Argument number must be greater than zero');\n  }\n}\n\n/**\n * Return the replacement for regular expression match of the conversion specification.\n *\n * @ignore\n * @name matchReplacement\n * @param {ReplacementIndex} replacementIndex The replacement index object.\n * @param {string[]} replacements The array of replacements.\n * @param {string} conversionSpecification The conversion specification.\n * @param {string} percent The percent characters from conversion specification.\n * @param {string} position The position to insert the replacement.\n * @param {string} signSpecifier The sign specifier to force a sign to be used on a number.\n * @param {string} paddingSpecifier The padding specifier that says what padding character will be used.\n * @param {string} alignmentSpecifier The alignment specifier that says if the result should be left-justified or right-justified.\n * @param {string} widthSpecifier The width specifier how many characters this conversion should result in.\n * @param {string} precisionSpecifier The precision specifier says how many decimal digits should be displayed for floating-point numbers.\n * @param {string} typeSpecifier The type specifier says what type the argument data should be treated as.\n * @return {string} Returns the computed replacement.\n */\nfunction match(replacementIndex, replacements, conversionSpecification, percent, position, signSpecifier, paddingSpecifier, alignmentSpecifier, widthSpecifier, precisionSpecifier, typeSpecifier) {\n  var conversion = new ConversionSpecification({\n    percent: percent,\n    signSpecifier: signSpecifier,\n    paddingSpecifier: paddingSpecifier,\n    alignmentSpecifier: alignmentSpecifier,\n    width: coerceToNumber(widthSpecifier, null),\n    precision: coerceToNumber(precisionSpecifier, null),\n    typeSpecifier: typeSpecifier\n  });\n  if (conversion.isPercentLiteral()) {\n    return conversionSpecification.slice(1);\n  }\n  var actualReplacementIndex = replacementIndex.getIndexByPosition(position);\n  replacementIndex.incrementOnEmptyPosition(position);\n  validate(actualReplacementIndex, replacements.length, conversion);\n  return compute(replacements[actualReplacementIndex], conversion);\n}\n\n/**\n * Produces a string according to `format`.\n *\n * <div id=\"sprintf-format\" class=\"smaller\">\n * `format` string is composed of zero or more directives: ordinary characters (not <code>%</code>), which are  copied  unchanged\n * to  the  output string and <i>conversion specifications</i>, each of which results in fetching zero or more subsequent\n * arguments. <br/> <br/>\n *\n * Each <b>conversion specification</b> is introduced by the character <code>%</code>, and ends with a <b>conversion\n * specifier</b>. In between there may be (in this order) zero or more <b>flags</b>, an optional <b>minimum field width</b>\n * and an optional <b>precision</b>.<br/>\n * The syntax is: <b>ConversionSpecification</b> = <b>\"%\"</b> { <b>Flags</b> }\n * [ <b>MinimumFieldWidth</b> ] [ <b>Precision</b> ] <b>ConversionSpecifier</b>, where curly braces { } denote repetition\n * and square brackets [ ] optionality. <br/><br/>\n *\n * By default, the arguments are used in the given order.<br/>\n * For argument numbering and swapping, `%m$` (where `m` is a number indicating the argument order)\n * is used instead of `%` to specify explicitly which argument is taken. For instance `%1$s` fetches the 1st argument,\n * `%2$s` the 2nd and so on, no matter what position  the conversion specification has in `format`.\n * <br/><br/>\n *\n * <b>The flags</b><br/>\n * The character <code>%</code> is followed by zero or more of the following flags:<br/>\n * <table class=\"light-params\">\n *   <tr>\n *     <td><code>+</code></td>\n *     <td>\n *       A  sign (<code>+</code> or <code>-</code>) should always be placed before a number produced by a\n *       signed conversion. By default a sign is used only for negative numbers.\n *     </td>\n *   </tr>\n *   <tr>\n *     <td><code>0</code></td>\n *     <td>The value should be zero padded.</td>\n *   </tr>\n *   <tr>\n *     <td><code>&blank;</code></td>\n *     <td>(a space) The value should be space padded.</td>\n *   </tr>\n *   <tr>\n *    <td><code>'</code></td>\n *    <td>Indicates alternate padding character, specified by prefixing it with a single quote <code>'</code>.</td>\n *   </tr>\n *   <tr>\n *     <td><code>-</code></td>\n *     <td>The converted value is to be left adjusted on the field boundary (the default is right justification).</td>\n *   </tr>\n * </table>\n *\n * <b>The minimum field width</b><br/>\n * An  optional decimal digit string (with nonzero first digit) specifying a minimum field width.  If the converted\n * value has fewer characters than the field width, it will be padded with spaces on the left (or right, if the\n * left-adjustment flag has been given).<br/><br/>\n *\n * <b>The precision</b><br/>\n * An optional precision, in the form of a period `.` followed by an optional decimal digit string.<br/>\n * This gives the number of digits to appear after the radix character for `e`, `E`, `f` and `F` conversions, the\n * maximum number of significant digits for `g` and `G` conversions or the maximum number of characters to be printed\n * from a string for `s` conversion.<br/><br/>\n *\n * <b>The conversion specifier</b><br/>\n * A specifier that mentions what type the argument should be treated as:\n *\n * <table class=\"light-params\">\n *   <tr>\n *     <td>`s`</td>\n *     <td>The string argument is treated as and presented as a string.</td>\n *   </tr>\n *   <tr>\n *     <td>`d` `i`</td>\n *     <td>The integer argument is converted to signed decimal notation.</td>\n *   </tr>\n *   <tr>\n *     <td>`b`</td>\n *     <td>The unsigned integer argument is converted to unsigned binary.</td>\n *   </tr>\n *   <tr>\n *     <td>`c`</td>\n *     <td>The unsigned integer argument is converted to an ASCII character with that number.</td>\n *   </tr>\n *   <tr>\n *     <td>`o`</td>\n *     <td>The unsigned integer argument is converted to unsigned octal.</td>\n *   </tr>\n *   <tr>\n *     <td>`u`</td>\n *     <td>The unsigned integer argument is converted to unsigned decimal.</td>\n *   </tr>\n *   <tr>\n *     <td>`x` `X`</td>\n *     <td>The unsigned integer argument is converted to unsigned hexadecimal. The letters `abcdef` are used for `x`\n *     conversions; the letters `ABCDEF` are used for `X` conversions.</td>\n *   </tr>\n *   <tr>\n *     <td>`f`</td>\n *     <td>\n *      The float argument is rounded and converted to decimal notation in the style `[-]ddd.ddd`, where the number of\n *      digits after the decimal-point character is equal to the precision specification. If the precision is missing,\n *      it is taken as 6; if the precision is explicitly zero, no decimal-point character appears.\n *      If a decimal point appears, at least one digit appears before it.\n *     </td>\n *   </tr>\n *   <tr>\n *     <td>`e` `E`</td>\n *     <td>\n *       The float argument is rounded and converted in the style `[-]d.ddde±dd`, where there is one digit\n *       before the decimal-point character and the number of digits after it is equal to the precision. If\n *       the precision is missing, it is taken as `6`; if the precision is zero, no decimal-point character\n *       appears. An `E` conversion uses the letter `E` (rather than `e`) to introduce the exponent.\n *     </td>\n *   </tr>\n *   <tr>\n *     <td>`g` `G`</td>\n *     <td>\n *       The float argument is converted in style `f` or `e` (or `F` or `E` for `G` conversions). The precision specifies\n *       the number of significant digits. If the precision is missing, `6` digits are given; if the\n *       precision is zero, it is treated as `1`. Style `e` is used if the exponent from its conversion is less\n *       than `-6` or greater than or equal to the precision. Trailing zeros are removed from the fractional\n *       part of the result; a decimal point appears only if it is followed by at least one digit.\n *     </td>\n *   </tr>\n *   <tr>\n *     <td>`%`</td>\n *     <td>A literal `%` is written. No argument is converted. The complete conversion specification is `%%`.</td>\n *   </tr>\n *\n * </table>\n * </div>\n *\n * @function sprintf\n * @static\n * @since 1.0.0\n * @memberOf Format\n * @param  {string} [format=''] The format string.\n * @param  {...*}               replacements The replacements to produce the string.\n * @return {string}             Returns the produced string.\n * @example\n * v.sprintf('%s, %s!', 'Hello', 'World');\n * // => 'Hello World!'\n *\n * v.sprintf('%s costs $%d', 'coffee', 2);\n * // => 'coffee costs $2'\n *\n * v.sprintf('%1$s %2$s %1$s %2$s, watcha gonna %3$s', 'bad', 'boys', 'do')\n * // => 'bad boys bad boys, watcha gonna do'\n *\n * v.sprintf('% 6s', 'bird');\n * // => '  bird'\n *\n * v.sprintf('% -6s', 'crab');\n * // => 'crab  '\n *\n * v.sprintf(\"%'*5s\", 'cat');\n * // => '**cat'\n *\n * v.sprintf(\"%'*-6s\", 'duck');\n * // => 'duck**'\n *\n * v.sprintf('%d %i %+d', 15, -2, 25);\n * // => '15 -2 +25'\n *\n * v.sprintf(\"%06d\", 15);\n * // => '000015'\n *\n * v.sprintf('0b%b 0o%o 0x%X', 12, 9, 155);\n * // => '0b1100 0o11 0x9B'\n *\n * v.sprintf('%.2f', 10.469);\n * // => '10.47'\n *\n * v.sprintf('%.2e %g', 100.5, 0.455);\n * // => '1.01e+2 0.455'\n * \n */\nfunction sprintf(format) {\n  var formatString = coerceToString(format);\n  if (formatString === '') {\n    return formatString;\n  }\n\n  for (var _len = arguments.length, replacements = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    replacements[_key - 1] = arguments[_key];\n  }\n\n  var boundReplacementMatch = match.bind(undefined, new ReplacementIndex(), replacements);\n  return formatString.replace(REGEXP_CONVERSION_SPECIFICATION, boundReplacementMatch);\n}\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\n/**\n * Produces a string according to `format`. Works exactly like <a href=\"#sprintf\"><code>sprintf()</code></a>,\n * with the only difference that accepts the formatting arguments in an array `values`.<br/>\n * See <a href=\"#sprintf-format\">here</a> `format` string specifications.\n *\n * @function vprintf\n * @static\n * @since 1.0.0\n * @memberOf Format\n * @param  {string} format='']  The format string.\n * @param  {Array} replacements The array of replacements to produce the string.\n * @return {string}             Returns the produced string.\n * @example\n * v.vprintf('%s', ['Welcome'])\n * // => 'Welcome'\n *\n * v.vprintf('%s has %d apples', ['Alexandra', 3]);\n * // => 'Alexandra has 3 apples'\n */\nfunction vprintf(format, replacements) {\n  return sprintf.apply(undefined, [format].concat(_toConsumableArray(nilDefault(replacements, []))));\n}\n\nvar escapeCharactersMap = {\n  '<': '&lt;',\n  '>': '&gt;',\n  '&': '&amp;',\n  '\"': '&quot;',\n  \"'\": '&#x27;',\n  '`': '&#x60;'\n};\n\n/**\n * Return the escaped version of `character`.\n *\n * @ignore\n * @param  {string} character The character to be escape.\n * @return {string}           The escaped version of character.\n */\nfunction replaceSpecialCharacter(character) {\n  return escapeCharactersMap[character];\n}\n\n/**\n * Escapes HTML special characters  <code>< > & ' \" `</code> in <code>subject</code>.\n *\n * @function escapeHtml\n * @static\n * @since 1.0.0         \n * @memberOf Escape\n * @param {string} [subject=''] The string to escape.\n * @return {string} Returns the escaped string.\n * @example\n * v.escapeHtml('<p>wonderful world</p>');\n * // => '&lt;p&gt;wonderful world&lt;/p&gt;'\n */\nfunction escapeHtml(subject) {\n  return coerceToString(subject).replace(REGEXP_HTML_SPECIAL_CHARACTERS, replaceSpecialCharacter);\n}\n\n/**\n * Escapes the regular expression special characters `- [ ] / { } ( ) * + ? . \\ ^ $ |` in `subject`.\n *\n * @function escapeRegExp\n * @static\n * @since 1.0.0\n * @memberOf Escape\n * @param {string} [subject=''] The string to escape.\n * @return {string} Returns the escaped string.\n * @example\n * v.escapeRegExp('(hours)[minutes]{seconds}');\n * // => '\\(hours\\)\\[minutes\\]\\{seconds\\}'\n */\nfunction escapeRegExp(subject) {\n  return coerceToString(subject).replace(REGEXP_SPECIAL_CHARACTERS, '\\\\$&');\n}\n\nvar unescapeCharactersMap = {\n  '<': /(&lt;)|(&#x0*3c;)|(&#0*60;)/gi,\n  '>': /(&gt;)|(&#x0*3e;)|(&#0*62;)/gi,\n  '&': /(&amp;)|(&#x0*26;)|(&#0*38;)/gi,\n  '\"': /(&quot;)|(&#x0*22;)|(&#0*34;)/gi,\n  \"'\": /(&#x0*27;)|(&#0*39;)/gi,\n  '`': /(&#x0*60;)|(&#0*96;)/gi\n};\nvar characters = Object.keys(unescapeCharactersMap);\n\n/**\n * Replaces the HTML entities with corresponding characters.\n *\n * @ignore\n * @param  {string} string The accumulator string.\n * @param  {string} key    The character.\n * @return {string}        The string with replaced HTML entity\n */\nfunction reduceUnescapedString(string, key) {\n  return string.replace(unescapeCharactersMap[key], key);\n}\n\n/**\n * Unescapes HTML special characters from <code>&amp;lt; &amp;gt; &amp;amp; &amp;quot; &amp;#x27; &amp;#x60;</code>\n * to corresponding <code>< > & ' \" `</code> in <code>subject</code>.\n *\n * @function unescapeHtml\n * @static\n * @since 1.0.0\n * @memberOf Escape\n * @param  {string} [subject=''] The string to unescape.\n * @return {string}              Returns the unescaped string.\n * @example\n * v.unescapeHtml('&lt;p&gt;wonderful world&lt;/p&gt;');\n * // => '<p>wonderful world</p>'\n */\nfunction unescapeHtml(subject) {\n  var subjectString = coerceToString(subject);\n  return characters.reduce(reduceUnescapedString, subjectString);\n}\n\n/**\n * Returns the first occurrence index of `search` in `subject`.\n *\n * @function indexOf\n * @static\n * @since 1.0.0\n * @memberOf Index\n * @param {string} [subject=''] The string where to search.\n * @param {string} search The string to search.\n * @param {number} [fromIndex=0] The index to start searching.\n * @return {number} Returns the first occurrence index or `-1` if not found.\n * @example\n * v.indexOf('morning', 'n');\n * // => 3\n *\n * v.indexOf('evening', 'o');\n * // => -1\n */\nfunction indexOf(subject, search, fromIndex) {\n  var subjectString = coerceToString(subject);\n  return subjectString.indexOf(search, fromIndex);\n}\n\n/**\n * Returns the last occurrence index of `search` in `subject`.\n *\n * @function lastIndexOf\n * @static\n * @since 1.0.0\n * @memberOf Index\n * @param {string} [subject=''] The string where to search.\n * @param {string} search The string to search.\n * @param {number} [fromIndex=subject.length - 1] The index to start searching backward in the string.\n * @return {number} Returns the last occurrence index or `-1` if not found.\n * @example\n * v.lastIndexOf('morning', 'n');\n * // => 5\n *\n * v.lastIndexOf('evening', 'o');\n * // => -1\n */\nfunction lastIndexOf(subject, search, fromIndex) {\n  var subjectString = coerceToString(subject);\n  return subjectString.lastIndexOf(search, fromIndex);\n}\n\n/**\n * Returns the first index of a `pattern` match in `subject`.\n *\n * @function search\n * @static\n * @since 1.0.0\n * @memberOf Index\n * @param {string} [subject=''] The string where to search.\n * @param {string|RegExp} pattern The pattern to match. If `pattern` is not RegExp, it is transformed to `new RegExp(pattern)`.\n * @param {number} [fromIndex=0] The index to start searching.\n * @return {number} Returns the first match index or `-1` if not found.\n * @example\n * v.search('morning', /rn/);\n * // => 2\n *\n * v.search('evening', '/\\d/');\n * // => -1\n */\nfunction search(subject, pattern, fromIndex) {\n  var subjectString = coerceToString(subject);\n  var fromIndexNumber = isNil(fromIndex) ? 0 : clipNumber(toInteger(fromIndex), 0, subjectString.length);\n  var matchIndex = subjectString.substr(fromIndexNumber).search(pattern);\n  if (matchIndex !== -1 && !isNaN(fromIndexNumber)) {\n    matchIndex += fromIndexNumber;\n  }\n  return matchIndex;\n}\n\n/**\n * Inserts into `subject` a string `toInsert` at specified `position`.\n *\n * @function insert\n * @static\n * @since 1.0.0\n * @memberOf Manipulate\n * @param {string} [subject=''] The string where to insert.\n * @param {string} [toInsert=''] The string to be inserted.\n * @param {number} [position=0] The position to insert.\n * @return {string} Returns the string after insertion.\n * @example\n * v.insert('ct', 'a', 1);\n * // => 'cat'\n *\n * v.insert('sunny', ' day', 5);\n * // => 'sunny day'\n */\nfunction insert(subject, toInsert, position) {\n  var subjectString = coerceToString(subject);\n  var toInsertString = coerceToString(toInsert);\n  var positionNumber = coerceToNumber(position);\n  if (positionNumber < 0 || positionNumber > subjectString.length || toInsertString === '') {\n    return subjectString;\n  }\n  return subjectString.slice(0, positionNumber) + toInsertString + subjectString.slice(positionNumber);\n}\n\n/**\n * Generated diacritics map. See bellow the base code.\n * @ignore\n * @see http://stackoverflow.com/a/18391901/1894471\n * @type Object\n */\n\nvar diacritics = {\n  \"3\": \"\\u039e\\u03be\",\n  \"8\": \"\\u0398\\u03b8\",\n  \"A\": \"\\x41\\xc0\\xc1\\xc2\\xc3\\xc4\\xc5\\u0100\\u0102\\u0104\\u01cd\\u01de\\u01e0\\u01fa\\u0200\\u0202\\u0226\\u023a\\u1e00\\u1ea0\\u1ea2\\u1ea4\\u1ea6\\u1ea8\\u1eaa\\u1eac\\u1eae\\u1eb0\\u1eb2\\u1eb4\\u1eb6\\u24b6\\u2c6f\\uff21\\u0386\\u0391\\u0410\",\n  \"B\": \"\\x42\\u0181\\u0182\\u0243\\u1e02\\u1e04\\u1e06\\u24b7\\uff22\\u0392\\u0411\",\n  \"C\": \"\\x43\\xc7\\u0106\\u0108\\u010a\\u010c\\u0187\\u023b\\u1e08\\u24b8\\ua73e\\uff23\\u0426\",\n  \"D\": \"\\x44\\u010e\\u0110\\u0189\\u018a\\u018b\\u1e0a\\u1e0c\\u1e0e\\u1e10\\u1e12\\u24b9\\ua779\\uff24\\xd0\\u0394\\u0414\",\n  \"E\": \"\\x45\\xc8\\xc9\\xca\\xcb\\u0112\\u0114\\u0116\\u0118\\u011a\\u018e\\u0190\\u0204\\u0206\\u0228\\u1e14\\u1e16\\u1e18\\u1e1a\\u1e1c\\u1eb8\\u1eba\\u1ebc\\u1ebe\\u1ec0\\u1ec2\\u1ec4\\u1ec6\\u24ba\\uff25\\u0388\\u0395\\u0415\\u042d\",\n  \"F\": \"\\x46\\u0191\\u1e1e\\u24bb\\ua77b\\uff26\\u03a6\\u0424\",\n  \"G\": \"\\x47\\u011c\\u011e\\u0120\\u0122\\u0193\\u01e4\\u01e6\\u01f4\\u1e20\\u24bc\\ua77d\\ua77e\\ua7a0\\uff27\\u0393\\u0413\\u0490\",\n  \"H\": \"\\x48\\u0124\\u0126\\u021e\\u1e22\\u1e24\\u1e26\\u1e28\\u1e2a\\u24bd\\u2c67\\u2c75\\ua78d\\uff28\\u0389\\u0397\\u0425\",\n  \"I\": \"\\x49\\xcc\\xcd\\xce\\xcf\\u0128\\u012a\\u012c\\u012e\\u0130\\u0197\\u01cf\\u0208\\u020a\\u1e2c\\u1e2e\\u1ec8\\u1eca\\u24be\\uff29\\u038a\\u0399\\u03aa\\u0406\\u0418\",\n  \"J\": \"\\x4a\\u0134\\u0248\\u24bf\\uff2a\\u0419\",\n  \"K\": \"\\x4b\\u0136\\u0198\\u01e8\\u1e30\\u1e32\\u1e34\\u24c0\\u2c69\\ua740\\ua742\\ua744\\ua7a2\\uff2b\\u039a\\u041a\",\n  \"L\": \"\\x4c\\u0139\\u013b\\u013d\\u013f\\u0141\\u023d\\u1e36\\u1e38\\u1e3a\\u1e3c\\u24c1\\u2c60\\u2c62\\ua746\\ua748\\ua780\\uff2c\\u039b\\u041b\",\n  \"M\": \"\\x4d\\u019c\\u1e3e\\u1e40\\u1e42\\u24c2\\u2c6e\\uff2d\\u039c\\u041c\",\n  \"N\": \"\\x4e\\xd1\\u0143\\u0145\\u0147\\u019d\\u01f8\\u0220\\u1e44\\u1e46\\u1e48\\u1e4a\\u24c3\\ua790\\ua7a4\\uff2e\\u039d\\u041d\",\n  \"O\": \"\\x4f\\xd2\\xd3\\xd4\\xd5\\xd6\\xd8\\u014c\\u014e\\u0150\\u0186\\u019f\\u01a0\\u01d1\\u01ea\\u01ec\\u01fe\\u020c\\u020e\\u022a\\u022c\\u022e\\u0230\\u1e4c\\u1e4e\\u1e50\\u1e52\\u1ecc\\u1ece\\u1ed0\\u1ed2\\u1ed4\\u1ed6\\u1ed8\\u1eda\\u1edc\\u1ede\\u1ee0\\u1ee2\\u24c4\\ua74a\\ua74c\\uff2f\\u038c\\u039f\\u041e\",\n  \"P\": \"\\x50\\u01a4\\u1e54\\u1e56\\u24c5\\u2c63\\ua750\\ua752\\ua754\\uff30\\u03a0\\u041f\",\n  \"Q\": \"\\x51\\u024a\\u24c6\\ua756\\ua758\\uff31\",\n  \"R\": \"\\x52\\u0154\\u0156\\u0158\\u0210\\u0212\\u024c\\u1e58\\u1e5a\\u1e5c\\u1e5e\\u24c7\\u2c64\\ua75a\\ua782\\ua7a6\\uff32\\u03a1\\u0420\",\n  \"S\": \"\\x53\\u015a\\u015c\\u015e\\u0160\\u0218\\u1e60\\u1e62\\u1e64\\u1e66\\u1e68\\u1e9e\\u24c8\\u2c7e\\ua784\\ua7a8\\uff33\\u03a3\\u0421\",\n  \"T\": \"\\x54\\u0162\\u0164\\u0166\\u01ac\\u01ae\\u021a\\u023e\\u1e6a\\u1e6c\\u1e6e\\u1e70\\u24c9\\ua786\\uff34\\u03a4\\u0422\",\n  \"U\": \"\\x55\\xd9\\xda\\xdb\\xdc\\u0168\\u016a\\u016c\\u016e\\u0170\\u0172\\u01af\\u01d3\\u01d5\\u01d7\\u01d9\\u01db\\u0214\\u0216\\u0244\\u1e72\\u1e74\\u1e76\\u1e78\\u1e7a\\u1ee4\\u1ee6\\u1ee8\\u1eea\\u1eec\\u1eee\\u1ef0\\u24ca\\uff35\\u0423\\u042a\",\n  \"V\": \"\\x56\\u01b2\\u0245\\u1e7c\\u1e7e\\u24cb\\ua75e\\uff36\\u0412\",\n  \"W\": \"\\x57\\u0174\\u1e80\\u1e82\\u1e84\\u1e86\\u1e88\\u24cc\\u2c72\\uff37\\u038f\\u03a9\",\n  \"X\": \"\\x58\\u1e8a\\u1e8c\\u24cd\\uff38\\u03a7\",\n  \"Y\": \"\\x59\\xdd\\u0176\\u0178\\u01b3\\u0232\\u024e\\u1e8e\\u1ef2\\u1ef4\\u1ef6\\u1ef8\\u1efe\\u24ce\\uff39\\u038e\\u03a5\\u03ab\\u042b\",\n  \"Z\": \"\\x5a\\u0179\\u017b\\u017d\\u01b5\\u0224\\u1e90\\u1e92\\u1e94\\u24cf\\u2c6b\\u2c7f\\ua762\\uff3a\\u0396\\u0417\",\n  \"a\": \"\\x61\\xe0\\xe1\\xe2\\xe3\\xe4\\xe5\\u0101\\u0103\\u0105\\u01ce\\u01df\\u01e1\\u01fb\\u0201\\u0203\\u0227\\u0250\\u1e01\\u1e9a\\u1ea1\\u1ea3\\u1ea5\\u1ea7\\u1ea9\\u1eab\\u1ead\\u1eaf\\u1eb1\\u1eb3\\u1eb5\\u1eb7\\u24d0\\u2c65\\uff41\\u03ac\\u03b1\\u0430\",\n  \"b\": \"\\x62\\u0180\\u0183\\u0253\\u1e03\\u1e05\\u1e07\\u24d1\\uff42\\u03b2\\u0431\",\n  \"c\": \"\\x63\\xe7\\u0107\\u0109\\u010b\\u010d\\u0188\\u023c\\u1e09\\u2184\\u24d2\\ua73f\\uff43\\u0446\",\n  \"d\": \"\\x64\\u010f\\u0111\\u018c\\u0256\\u0257\\u1e0b\\u1e0d\\u1e0f\\u1e11\\u1e13\\u24d3\\ua77a\\uff44\\xf0\\u03b4\\u0434\",\n  \"e\": \"\\x65\\xe8\\xe9\\xea\\xeb\\u0113\\u0115\\u0117\\u0119\\u011b\\u01dd\\u0205\\u0207\\u0229\\u0247\\u025b\\u1e15\\u1e17\\u1e19\\u1e1b\\u1e1d\\u1eb9\\u1ebb\\u1ebd\\u1ebf\\u1ec1\\u1ec3\\u1ec5\\u1ec7\\u24d4\\uff45\\u03ad\\u03b5\\u0435\\u044d\",\n  \"f\": \"\\x66\\u0192\\u1e1f\\u24d5\\ua77c\\uff46\\u03c6\\u0444\",\n  \"g\": \"\\x67\\u011d\\u011f\\u0121\\u0123\\u01e5\\u01e7\\u01f5\\u0260\\u1d79\\u1e21\\u24d6\\ua77f\\ua7a1\\uff47\\u03b3\\u0433\\u0491\",\n  \"h\": \"\\x68\\u0125\\u0127\\u021f\\u0265\\u1e23\\u1e25\\u1e27\\u1e29\\u1e2b\\u1e96\\u24d7\\u2c68\\u2c76\\uff48\\u03ae\\u03b7\\u0445\",\n  \"i\": \"\\x69\\xec\\xed\\xee\\xef\\u0129\\u012b\\u012d\\u012f\\u0131\\u01d0\\u0209\\u020b\\u0268\\u1e2d\\u1e2f\\u1ec9\\u1ecb\\u24d8\\uff49\\u0390\\u03af\\u03b9\\u03ca\\u0438\\u0456\",\n  \"j\": \"\\x6a\\u0135\\u01f0\\u0249\\u24d9\\uff4a\\u0439\",\n  \"k\": \"\\x6b\\u0137\\u0199\\u01e9\\u1e31\\u1e33\\u1e35\\u24da\\u2c6a\\ua741\\ua743\\ua745\\ua7a3\\uff4b\\u03ba\\u043a\",\n  \"l\": \"\\x6c\\u013a\\u013c\\u013e\\u0140\\u0142\\u017f\\u019a\\u026b\\u1e37\\u1e39\\u1e3b\\u1e3d\\u24db\\u2c61\\ua747\\ua749\\ua781\\uff4c\\u03bb\\u043b\",\n  \"m\": \"\\x6d\\u026f\\u0271\\u1e3f\\u1e41\\u1e43\\u24dc\\uff4d\\u03bc\\u043c\",\n  \"n\": \"\\x6e\\xf1\\u0144\\u0146\\u0148\\u0149\\u019e\\u01f9\\u0272\\u1e45\\u1e47\\u1e49\\u1e4b\\u24dd\\ua791\\ua7a5\\uff4e\\u03bd\\u043d\",\n  \"o\": \"\\x6f\\xf2\\xf3\\xf4\\xf5\\xf6\\xf8\\u014d\\u014f\\u0151\\u01a1\\u01d2\\u01eb\\u01ed\\u01ff\\u020d\\u020f\\u022b\\u022d\\u022f\\u0231\\u0254\\u0275\\u1e4d\\u1e4f\\u1e51\\u1e53\\u1ecd\\u1ecf\\u1ed1\\u1ed3\\u1ed5\\u1ed7\\u1ed9\\u1edb\\u1edd\\u1edf\\u1ee1\\u1ee3\\u24de\\ua74b\\ua74d\\uff4f\\u03bf\\u03cc\\u043e\",\n  \"p\": \"\\x70\\u01a5\\u1d7d\\u1e55\\u1e57\\u24df\\ua751\\ua753\\ua755\\uff50\\u03c0\\u043f\",\n  \"q\": \"\\x71\\u024b\\u24e0\\ua757\\ua759\\uff51\",\n  \"r\": \"\\x72\\u0155\\u0157\\u0159\\u0211\\u0213\\u024d\\u027d\\u1e59\\u1e5b\\u1e5d\\u1e5f\\u24e1\\ua75b\\ua783\\ua7a7\\uff52\\u03c1\\u0440\",\n  \"s\": \"\\x73\\xdf\\u015b\\u015d\\u015f\\u0161\\u0219\\u023f\\u1e61\\u1e63\\u1e65\\u1e67\\u1e69\\u1e9b\\u24e2\\ua785\\ua7a9\\uff53\\u03c2\\u03c3\\u0441\",\n  \"t\": \"\\x74\\u0163\\u0165\\u0167\\u01ad\\u021b\\u0288\\u1e6b\\u1e6d\\u1e6f\\u1e71\\u1e97\\u24e3\\u2c66\\ua787\\uff54\\u03c4\\u0442\",\n  \"u\": \"\\x75\\xf9\\xfa\\xfb\\xfc\\u0169\\u016b\\u016d\\u016f\\u0171\\u0173\\u01b0\\u01d4\\u01d6\\u01d8\\u01da\\u01dc\\u0215\\u0217\\u0289\\u1e73\\u1e75\\u1e77\\u1e79\\u1e7b\\u1ee5\\u1ee7\\u1ee9\\u1eeb\\u1eed\\u1eef\\u1ef1\\u24e4\\uff55\\u0443\\u044a\",\n  \"v\": \"\\x76\\u028b\\u028c\\u1e7d\\u1e7f\\u24e5\\ua75f\\uff56\\u0432\",\n  \"w\": \"\\x77\\u0175\\u1e81\\u1e83\\u1e85\\u1e87\\u1e89\\u1e98\\u24e6\\u2c73\\uff57\\u03c9\\u03ce\",\n  \"x\": \"\\x78\\u1e8b\\u1e8d\\u24e7\\uff58\\u03c7\",\n  \"y\": \"\\x79\\xfd\\xff\\u0177\\u01b4\\u0233\\u024f\\u1e8f\\u1e99\\u1ef3\\u1ef5\\u1ef7\\u1ef9\\u1eff\\u24e8\\uff59\\u03b0\\u03c5\\u03cb\\u03cd\\u044b\",\n  \"z\": \"\\x7a\\u017a\\u017c\\u017e\\u01b6\\u0225\\u0240\\u1e91\\u1e93\\u1e95\\u24e9\\u2c6c\\ua763\\uff5a\\u03b6\\u0437\",\n  \"OE\": \"\\x8c\\u0152\",\n  \"oe\": \"\\x9c\\u0153\",\n  \"AE\": \"\\xc6\\u01e2\\u01fc\",\n  \"ae\": \"\\xe6\\u01e3\\u01fd\",\n  \"hv\": \"\\u0195\",\n  \"OI\": \"\\u01a2\",\n  \"oi\": \"\\u01a3\",\n  \"DZ\": \"\\u01c4\\u01f1\",\n  \"Dz\": \"\\u01c5\\u01f2\",\n  \"dz\": \"\\u01c6\\u01f3\",\n  \"LJ\": \"\\u01c7\",\n  \"Lj\": \"\\u01c8\",\n  \"lj\": \"\\u01c9\",\n  \"NJ\": \"\\u01ca\",\n  \"Nj\": \"\\u01cb\",\n  \"nj\": \"\\u01cc\",\n  \"OU\": \"\\u0222\",\n  \"ou\": \"\\u0223\",\n  \"TZ\": \"\\ua728\",\n  \"tz\": \"\\ua729\",\n  \"AA\": \"\\ua732\",\n  \"aa\": \"\\ua733\",\n  \"AO\": \"\\ua734\",\n  \"ao\": \"\\ua735\",\n  \"AU\": \"\\ua736\",\n  \"au\": \"\\ua737\",\n  \"AV\": \"\\ua738\\ua73a\",\n  \"av\": \"\\ua739\\ua73b\",\n  \"AY\": \"\\ua73c\",\n  \"ay\": \"\\ua73d\",\n  \"OO\": \"\\ua74e\",\n  \"oo\": \"\\ua74f\",\n  \"VY\": \"\\ua760\",\n  \"vy\": \"\\ua761\",\n  \"TH\": \"\\xde\",\n  \"th\": \"\\xfe\",\n  \"PS\": \"\\u03a8\",\n  \"ps\": \"\\u03c8\",\n  \"Yo\": \"\\u0401\",\n  \"Ye\": \"\\u0404\",\n  \"Yi\": \"\\u0407\",\n  \"Zh\": \"\\u0416\",\n  \"Ch\": \"\\u0427\",\n  \"Sh\": \"\\u0428\\u0429\",\n  \"\": \"\\u042c\\u044c\",\n  \"Yu\": \"\\u042e\",\n  \"Ya\": \"\\u042f\",\n  \"zh\": \"\\u0436\",\n  \"ch\": \"\\u0447\",\n  \"sh\": \"\\u0448\\u0449\",\n  \"yu\": \"\\u044e\",\n  \"ya\": \"\\u044f\",\n  \"yo\": \"\\u0451\",\n  \"ye\": \"\\u0454\",\n  \"yi\": \"\\u0457\"\n};\n\nvar diacriticsMap = null;\n\n/**\n * Creates a map of the diacritics.\n *\n * @ignore\n * @returns {Object} Returns the diacritics map.\n */\nfunction getDiacriticsMap() {\n  if (diacriticsMap !== null) {\n    return diacriticsMap;\n  }\n  diacriticsMap = {};\n  Object.keys(diacritics).forEach(function (key) {\n    var characters = diacritics[key];\n    for (var index = 0; index < characters.length; index++) {\n      var character = characters[index];\n      diacriticsMap[character] = key;\n    }\n  });\n  return diacriticsMap;\n}\n\n/**\n * Get the latin character from character with diacritics.\n *\n * @ignore\n * @param   {string} character The character with diacritics.\n * @returns {string}           Returns the character without diacritics.\n */\nfunction getLatinCharacter(character) {\n  var characterWithoutDiacritic = getDiacriticsMap()[character];\n  return characterWithoutDiacritic ? characterWithoutDiacritic : character;\n}\n\n/**\n * Returns the `cleanCharacter` from combining marks regular expression match.\n *\n * @ignore\n * @param {string} character The character with combining marks\n * @param {string} cleanCharacter The character without combining marks.\n * @return {string} The character without combining marks.\n */\nfunction removeCombiningMarks(character, cleanCharacter) {\n  return cleanCharacter;\n}\n\n/**\n * Latinises the `subject` by removing diacritic characters.\n *\n * @function latinise\n * @static\n * @since 1.0.0\n * @memberOf Manipulate\n * @param {string} [subject=''] The string to latinise.\n * @return {string} Returns the latinised string.\n * @example\n * v.latinise('cafe\\u0301'); // or 'café'\n * // => 'cafe'\n *\n * v.latinise('août décembre');\n * // => 'aout decembre'\n *\n * v.latinise('как прекрасен этот мир');\n * // => 'kak prekrasen etot mir'\n */\nfunction latinise(subject) {\n  var subjectString = coerceToString(subject);\n  if (subjectString === '') {\n    return '';\n  }\n  return subjectString.replace(REGEXP_NON_LATIN, getLatinCharacter).replace(REGEXP_COMBINING_MARKS, removeCombiningMarks);\n}\n\n/**\n * Pads `subject` to a new `length`.\n *\n * @function pad\n * @static\n * @since 1.0.0\n * @memberOf Manipulate\n * @param {string} [subject=''] The string to pad.\n * @param {int} [length=0] The length to pad the string. No changes are made if `length` is less than `subject.length`.\n * @param {string} [pad=' '] The string to be used for padding.\n * @return {string} Returns the padded string.\n * @example\n * v.pad('dog', 5);\n * // => ' dog '\n *\n * v.pad('bird', 6, '-');\n * // => '-bird-'\n *\n * v.pad('cat', 6, '-=');\n * // => '-cat-='\n */\nfunction pad(subject, length, pad) {\n  var subjectString = coerceToString(subject);\n  var lengthInt = isNil(length) ? 0 : clipNumber(toInteger(length), 0, MAX_SAFE_INTEGER);\n  var padString = coerceToString(pad, ' ');\n  if (lengthInt <= subjectString.length) {\n    return subjectString;\n  }\n  var paddingLength = lengthInt - subjectString.length;\n  var paddingSideLength = toInteger(paddingLength / 2);\n  var paddingSideRemainingLength = paddingLength % 2;\n  return buildPadding(padString, paddingSideLength) + subjectString + buildPadding(padString, paddingSideLength + paddingSideRemainingLength);\n}\n\n/**\n * Replaces the matches of `pattern` with `replacement`. <br/>\n *\n * @function replace\n * @static\n * @since 1.0.0\n * @memberOf Manipulate\n * @param {string} [subject=''] The string to verify.\n * @param {string|RegExp} pattern The pattern which match is replaced. If `pattern` is a string,\n * a simple string match is evaluated and only the first occurrence replaced.\n * @param {string|Function} replacement The string or function which invocation result replaces `pattern` match.\n * @return {string} Returns the replacement result.\n * @example\n * v.replace('swan', 'wa', 'u');\n * // => 'sun'\n *\n * v.replace('domestic duck', /domestic\\s/, '');\n * // => 'duck'\n *\n * v.replace('nice duck', /(nice)(duck)/, function(match, nice, duck) {\n *   return 'the ' + duck + ' is ' + nice;\n * });\n * // => 'the duck is nice'\n */\nfunction replace(subject, pattern, replacement) {\n  var subjectString = coerceToString(subject);\n  return subjectString.replace(pattern, replacement);\n}\n\n/**\n * Get the flags string from a regular expression object.\n *\n * @ignore\n * @param {RegExp} regExp The regular expression object.\n * @return {string} Returns the string with flags chars.\n */\nfunction getRegExpFlags(regExp) {\n  return regExp.toString().match(REGEXP_FLAGS)[0];\n}\n\n/**\n * Checks whether `subject` includes `search` starting from `position`.\n *\n * @function includes\n * @static\n * @since 1.0.0\n * @memberOf Query\n * @param {string} [subject=''] The string where to search.\n * @param {string} search The string to search.\n * @param {number} [position=0] The position to start searching.\n * @return {boolean} Returns `true` if `subject` includes `search` or `false` otherwise.\n * @example\n * v.includes('starship', 'star');\n * // => true\n *\n * v.includes('galaxy', 'g', 1);\n * // => false\n */\nfunction includes(subject, search, position) {\n  var subjectString = coerceToString(subject);\n  var searchString = toString(search);\n  if (searchString === null) {\n    return false;\n  }\n  if (searchString === '') {\n    return true;\n  }\n  position = isNil(position) ? 0 : clipNumber(toInteger(position), 0, subjectString.length);\n  return subjectString.indexOf(searchString, position) !== -1;\n}\n\n/**\n * Append flag to a regular expression.\n *\n * @ignore\n * @param {RegExp} pattern The pattern to coerce.\n * @param {string} appendFlag The flag to append to regular expression.\n * @return {RegExp} The regular expression with added flag.\n */\nfunction appendFlagToRegExp(pattern, appendFlag) {\n  var regularExpressionFlags = getRegExpFlags(pattern);\n  if (!includes(regularExpressionFlags, appendFlag)) {\n    return new RegExp(pattern.source, regularExpressionFlags + appendFlag);\n  }\n  return pattern;\n}\n\n/**\n * Replaces all matches of `pattern` with `replacement`. <br/>\n *\n * @function replaceAll\n * @static\n * @since 1.0.0\n * @memberOf Manipulate\n * @param {string} [subject=''] The string to verify.\n * @param {string|RegExp} pattern The pattern which match is replaced. If `pattern` is a string, a simple string match is evaluated.\n * All matches are replaced.\n * @param {string|Function} replacement The string or function which invocation result replaces `pattern` match.\n * @return {string} Returns the replacement result.\n * @example\n * v.replaceAll('good morning', 'o', '*');\n * // => 'g**d m*rning'\n * v.replaceAll('evening', /n/, 's');\n * // => 'evesisg'\n *\n */\nfunction replaceAll(subject, pattern, replacement) {\n  var subjectString = coerceToString(subject);\n  var regExp = pattern;\n  if (!(pattern instanceof RegExp)) {\n    regExp = new RegExp(escapeRegExp(pattern), 'g');\n  } else if (!pattern.global) {\n    regExp = appendFlagToRegExp(pattern, 'g');\n  }\n  return subjectString.replace(regExp, replacement);\n}\n\n/**\n * Reverses the `subject`.\n *\n * @function reverse\n * @static\n * @since 1.0.0\n * @memberOf Manipulate\n * @param {string} [subject=''] The string to reverse.\n * @return {string} Returns the reversed string.\n * @example\n * v.reverse('winter');\n * // => 'retniw'\n */\nfunction reverse(subject) {\n  var subjectString = coerceToString(subject);\n  return subjectString.split('').reverse().join('');\n}\n\n/**\n * Reverses the `subject` taking care of\n * <a href=\"https://rainsoft.io/what-every-javascript-developer-should-know-about-unicode/#24surrogatepairs\">surrogate pairs</a> and\n * <a href=\"https://rainsoft.io/what-every-javascript-developer-should-know-about-unicode/#25combiningmarks\">combining marks</a>.\n *\n * @function reverseGrapheme\n * @static\n * @since 1.0.0\n * @memberOf Manipulate\n * @param {string} [subject=''] The string to reverse.\n * @return {string} Returns the reversed string.\n * @example\n * v.reverseGrapheme('summer');\n * // => 'remmus'\n *\n * v.reverseGrapheme('𝌆 bar mañana mañana');\n * // => 'anañam anañam rab 𝌆'\n */\nfunction reverseGrapheme(subject) {\n  var subjectString = coerceToString(subject);\n  /**\n   * @see https://github.com/mathiasbynens/esrever\n   */\n  subjectString = subjectString.replace(REGEXP_COMBINING_MARKS, function ($0, $1, $2) {\n    return reverseGrapheme($2) + $1;\n  }).replace(REGEXP_SURROGATE_PAIRS, '$2$1');\n  var reversedString = '';\n  var index = subjectString.length;\n  while (index--) {\n    reversedString += subjectString.charAt(index);\n  }\n  return reversedString;\n}\n\n/**\n * Slugifies the `subject`. Cleans the `subject` by replacing diacritics with corresponding latin characters.\n *\n * @function slugify\n * @static\n * @since 1.0.0\n * @memberOf Manipulate\n * @param {string} [subject=''] The string to slugify.\n * @return {string} Returns the slugified string.\n * @example\n * v.slugify('Italian cappuccino drink');\n * // => 'italian-cappuccino-drink'\n *\n * v.slugify('caffé latté');\n * // => 'caffe-latte'\n *\n * v.slugify('хорошая погода');\n * // => 'horoshaya-pogoda'\n */\nfunction slugify(subject) {\n  var subjectString = coerceToString(subject);\n  if (subjectString === '') {\n    return '';\n  }\n  var cleanSubjectString = latinise(subjectString).replace(REGEXP_NON_LATIN, '-');\n  return kebabCase(cleanSubjectString);\n}\n\n/**\n * Changes `subject` by deleting `deleteCount` of characters starting at position `start`. Places a new string\n * `toAdd` instead of deleted characters.\n *\n * @function splice\n * @static\n * @since 1.0.0\n * @memberOf Manipulate\n * @param {string} [subject=''] The string where to insert.\n * @param {string} start The position to start changing the string. For a negative position will start from the end of\n * the string.\n * @param {number} [deleteCount=subject.length-start] The number of characters to delete from string.\n * @param {string} [toAdd=''] The string to be added instead of deleted characters.\n * @return {string} Returns the modified string.\n * @example\n * v.splice('new year', 0, 4);\n * // => 'year'\n *\n * v.splice('new year', 0, 3, 'happy');\n * // => 'happy year'\n *\n * v.splice('new year', -4, 4, 'day');\n * // => 'new day'\n */\nfunction splice(subject, start, deleteCount, toAdd) {\n  var subjectString = coerceToString(subject);\n  var toAddString = coerceToString(toAdd);\n  var startPosition = coerceToNumber(start);\n  if (startPosition < 0) {\n    startPosition = subjectString.length + startPosition;\n    if (startPosition < 0) {\n      startPosition = 0;\n    }\n  } else if (startPosition > subjectString.length) {\n    startPosition = subjectString.length;\n  }\n  var deleteCountNumber = coerceToNumber(deleteCount, subjectString.length - startPosition);\n  if (deleteCountNumber < 0) {\n    deleteCountNumber = 0;\n  }\n  return subjectString.slice(0, startPosition) + toAddString + subjectString.slice(startPosition + deleteCountNumber);\n}\n\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\n/**\n * Translates characters or replaces substrings in `subject`.\n *\n * @function tr\n * @static\n * @since 1.3.0\n * @memberOf Manipulate\n * @param  {string} [subject=''] The string to translate.\n * @param  {string|Object} from The string of characters to translate from. Or an object, then the object keys are replaced with corresponding values (longest keys are tried first).\n * @param  {string} to The string of characters to translate to. Ignored when `from` is an object.\n * @return {string} Returns the translated string.\n * @example\n * v.tr('hello', 'el', 'ip');\n * // => 'hippo'\n * \n * v.tr('légèreté', 'éè', 'ee');\n * // => 'legerete'\n * \n * v.tr('Yes. The fire rises.', {\n *   'Yes': 'Awesome',\n *   'fire': 'flame'\n * })\n * // => 'Awesome. The flame rises.'\n * \n * v.tr(':where is the birthplace of :what', {\n *   ':where': 'Africa',\n *   ':what': 'Humanity'\n * });\n * // => 'Africa is the birthplace of Humanity'\n * \n */\nfunction tr(subject, from, to) {\n  var subjectString = coerceToString(subject);\n  var keys = void 0;\n  var values = void 0;\n  if (isString(from) && isString(to)) {\n    keys = from.split('');\n    values = to.split('');\n  } else {\n    var _extractKeysAndValues = extractKeysAndValues(nilDefault(from, {}));\n\n    var _extractKeysAndValues2 = _slicedToArray(_extractKeysAndValues, 2);\n\n    keys = _extractKeysAndValues2[0];\n    values = _extractKeysAndValues2[1];\n  }\n  var keysLength = keys.length;\n  if (keysLength === 0) {\n    return subjectString;\n  }\n  var result = '';\n  var valuesLength = values.length;\n  for (var index = 0; index < subjectString.length; index++) {\n    var isMatch = false;\n    var matchValue = void 0;\n    for (var keyIndex = 0; keyIndex < keysLength && keyIndex < valuesLength; keyIndex++) {\n      var key = keys[keyIndex];\n      if (subjectString.substr(index, key.length) === key) {\n        isMatch = true;\n        matchValue = values[keyIndex];\n        index = index + key.length - 1;\n        break;\n      }\n    }\n    result += isMatch ? matchValue : subjectString[index];\n  }\n  return result;\n}\n\nfunction extractKeysAndValues(object) {\n  var keys = Object.keys(object);\n  var values = keys.sort(sortStringByLength).map(function (key) {\n    return object[key];\n  });\n  return [keys, values];\n}\n\nfunction sortStringByLength(str1, str2) {\n  if (str1.length === str2.length) {\n    return 0;\n  }\n  return str1.length < str2.length ? 1 : -1;\n}\n\nvar reduce$1 = Array.prototype.reduce;\n\n/**\n * Removes whitespaces from the left side of the `subject`.\n *\n * @function trimLeft\n * @static\n * @since 1.0.0\n * @memberOf Manipulate\n * @param {string} [subject=''] The string to trim.\n * @param {string} [whitespace=whitespace] The whitespace characters to trim. List all characters that you want to be stripped.\n * @return {string} Returns the trimmed string.\n * @example\n * v.trimLeft('  Starship Troopers');\n * // => 'Starship Troopers'\n *\n * v.trimLeft('***Mobile Infantry', '*');\n * // => 'Mobile Infantry'\n */\nfunction trimLeft(subject, whitespace$$1) {\n  var subjectString = coerceToString(subject);\n  if (whitespace$$1 === '' || subjectString === '') {\n    return subjectString;\n  }\n  var whitespaceString = toString(whitespace$$1);\n  if (isNil(whitespaceString)) {\n    return subjectString.replace(REGEXP_TRIM_LEFT, '');\n  }\n  var matchWhitespace = true;\n  return reduce$1.call(subjectString, function (trimmed, character) {\n    if (matchWhitespace && includes(whitespaceString, character)) {\n      return trimmed;\n    }\n    matchWhitespace = false;\n    return trimmed + character;\n  }, '');\n}\n\nvar reduceRight = Array.prototype.reduceRight;\n\n/**\n * Removes whitespaces from the right side of the `subject`.\n *\n * @function trimRight\n * @static\n * @since 1.0.0\n * @memberOf Manipulate\n * @param {string} [subject=''] The string to trim.\n * @param {string} [whitespace=whitespace] The whitespace characters to trim. List all characters that you want to be stripped.\n * @return {string} Returns the trimmed string.\n * @example\n * v.trimRight('the fire rises   ');\n * // => 'the fire rises'\n *\n * v.trimRight('do you feel in charge?!!!', '!');\n * // => 'do you feel in charge?'\n */\nfunction trimRight(subject, whitespace$$1) {\n  var subjectString = coerceToString(subject);\n  if (whitespace$$1 === '' || subjectString === '') {\n    return subjectString;\n  }\n  var whitespaceString = toString(whitespace$$1);\n  if (isNil(whitespaceString)) {\n    return subjectString.replace(REGEXP_TRIM_RIGHT, '');\n  }\n  var matchWhitespace = true;\n  return reduceRight.call(subjectString, function (trimmed, character) {\n    if (matchWhitespace && includes(whitespaceString, character)) {\n      return trimmed;\n    }\n    matchWhitespace = false;\n    return character + trimmed;\n  }, '');\n}\n\n/**\n * Removes whitespaces from left and right sides of the `subject`.\n *\n * @function trim\n * @static\n * @since 1.0.0\n * @memberOf Manipulate\n * @param {string} [subject=''] The string to trim.\n * @param {string} [whitespace=whitespace] The whitespace characters to trim. List all characters that you want to be stripped.\n * @return {string} Returns the trimmed string.\n * @example\n * v.trim(' Mother nature ');\n * // => 'Mother nature'\n *\n * v.trim('--Earth--', '-');\n * // => 'Earth'\n */\nfunction trim(subject, whitespace) {\n  var subjectString = coerceToString(subject);\n  if (whitespace === '' || subjectString === '') {\n    return subjectString;\n  }\n  var whitespaceString = toString(whitespace);\n  if (isNil(whitespaceString)) {\n    return subjectString.trim();\n  }\n  return trimRight(trimLeft(subjectString, whitespaceString), whitespaceString);\n}\n\nvar OPTION_WIDTH = 'width';\nvar OPTION_NEW_LINE = 'newLine';\nvar OPTION_INDENT = 'indent';\nvar OPTION_CUT = 'cut';\n\n/**\n * Wraps `subject` to a given number of characters using a string break character.\n *\n * @function wordWrap\n * @static\n * @since 1.0.0\n * @memberOf Manipulate\n * @param  {string} [subject=''] The string to wrap.\n * @param  {Object} [options={}] The wrap options.\n * @param  {number} [options.width=75] The number of characters at which to wrap.\n * @param  {string} [options.newLine='\\n'] The string to add at the end of line.\n * @param  {string} [options.indent='']  The string to intend the line.\n * @param  {boolean} [options.cut=false] When `false` (default) does not split the word even if word length is bigger than `width`. <br/>\n *                                       When `true` breaks the word that has length bigger than `width`.\n *\n * @return {string} Returns wrapped string.\n * @example\n * v.wordWrap('Hello world', {\n *   width: 5\n * });\n * // => 'Hello\\nworld'\n *\n * v.wordWrap('Hello world', {\n *   width: 5,\n *   newLine: '<br/>',\n *   indent: '__'\n * });\n * // => '__Hello<br/>__world'\n *\n * v.wordWrap('Wonderful world', {\n *   width: 5,\n *   cut: true\n * });\n * // => 'Wonde\\nrful\\nworld'\n *\n */\nfunction wordWrap(subject) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  var subjectString = coerceToString(subject);\n\n  var _determineOptions = determineOptions(options),\n      width = _determineOptions.width,\n      newLine = _determineOptions.newLine,\n      indent = _determineOptions.indent,\n      cut = _determineOptions.cut;\n\n  if (subjectString === '' || width <= 0) {\n    return indent;\n  }\n  var subjectLength = subjectString.length;\n  var substring = subjectString.substring.bind(subjectString);\n  var offset = 0;\n  var wrappedLine = '';\n  while (subjectLength - offset > width) {\n    if (subjectString[offset] === ' ') {\n      offset++;\n      continue;\n    }\n    var spaceToWrapAt = subjectString.lastIndexOf(' ', width + offset);\n    if (spaceToWrapAt >= offset) {\n      wrappedLine += indent + substring(offset, spaceToWrapAt) + newLine;\n      offset = spaceToWrapAt + 1;\n    } else {\n      if (cut) {\n        wrappedLine += indent + substring(offset, width + offset) + newLine;\n        offset += width;\n      } else {\n        spaceToWrapAt = subjectString.indexOf(' ', width + offset);\n        if (spaceToWrapAt >= 0) {\n          wrappedLine += indent + substring(offset, spaceToWrapAt) + newLine;\n          offset = spaceToWrapAt + 1;\n        } else {\n          wrappedLine += indent + substring(offset);\n          offset = subjectLength;\n        }\n      }\n    }\n  }\n  if (offset < subjectLength) {\n    wrappedLine += indent + substring(offset);\n  }\n  return wrappedLine;\n}\n\n/**\n * Determine the word wrap options. The missing values are filled with defaults.\n *\n * @param  {Object} options  The options object.\n * @return {Object}          The word wrap options, with default settings if necessary.\n * @ignore\n */\nfunction determineOptions(options) {\n  return {\n    width: coerceToNumber(options[OPTION_WIDTH], 75),\n    newLine: coerceToString(options[OPTION_NEW_LINE], '\\n'),\n    indent: coerceToString(options[OPTION_INDENT], ''),\n    cut: coerceToBoolean(options[OPTION_CUT], false)\n  };\n}\n\n/**\n * Checks whether `subject` ends with `end`.\n *\n * @function endsWith\n * @static\n * @since 1.0.0\n * @memberOf Query\n * @param {string} [subject=''] The string to verify.\n * @param {string} end The ending string.\n * @param {number} [position=subject.length] Search within `subject` as if the string were only `position` long.\n * @return {boolean} Returns `true` if `subject` ends with `end` or `false` otherwise.\n * @example\n * v.endsWith('red alert', 'alert');\n * // => true\n *\n * v.endsWith('metro south', 'metro');\n * // => false\n *\n * v.endsWith('Murphy', 'ph', 5);\n * // => true\n */\nfunction endsWith(subject, end, position) {\n  if (isNil(end)) {\n    return false;\n  }\n  var subjectString = coerceToString(subject);\n  var endString = coerceToString(end);\n  if (endString === '') {\n    return true;\n  }\n  position = isNil(position) ? subjectString.length : clipNumber(toInteger(position), 0, subjectString.length);\n  position -= endString.length;\n  var lastIndex = subjectString.indexOf(endString, position);\n  return lastIndex !== -1 && lastIndex === position;\n}\n\n/**\n * Checks whether `subject` contains only alpha characters.\n *\n * @function isAlpha\n * @static\n * @since 1.0.0\n * @memberOf Query\n * @param {string} [subject=''] The string to verify.\n * @return {boolean} Returns `true` if `subject` contains only alpha characters or `false` otherwise.\n * @example\n * v.isAlpha('bart');\n * // => true\n *\n * v.isAlpha('lisa!');\n * // => false\n *\n * v.isAlpha('lisa and bart');\n * // => false\n */\nfunction isAlpha(subject) {\n  var subjectString = coerceToString(subject);\n  return REGEXP_ALPHA.test(subjectString);\n}\n\n/**\n * Checks whether `subject` contains only alpha and digit characters.\n *\n * @function isAlphaDigit\n * @static\n * @since 1.0.0\n * @memberOf Query\n * @param {string} [subject=''] The string to verify.\n * @return {boolean} Returns `true` if `subject` contains only alpha and digit characters or `false` otherwise.\n * @example\n * v.isAlphaDigit('year2020');\n * // => true\n *\n * v.isAlphaDigit('1448');\n * // => true\n *\n * v.isAlphaDigit('40-20');\n * // => false\n */\nfunction isAlphaDigit(subject) {\n  var subjectString = coerceToString(subject);\n  return REGEXP_ALPHA_DIGIT.test(subjectString);\n}\n\n/**\n * Checks whether `subject` is empty or contains only whitespaces.\n *\n * @function isBlank\n * @static\n * @since 1.0.0\n * @memberOf Query\n * @param {string} [subject=''] The string to verify.\n * @return {boolean} Returns `true` if `subject` is empty or contains only whitespaces or `false` otherwise.\n * @example\n * v.isBlank('');\n * // => true\n *\n * v.isBlank('  ');\n * // => true\n *\n * v.isBlank('World');\n * // => false\n */\nfunction isBlank(subject) {\n  var subjectString = coerceToString(subject);\n  return subjectString.trim().length === 0;\n}\n\n/**\n * Checks whether `subject` contains only digit characters.\n *\n * @function isDigit\n * @static\n * @since 1.0.0\n * @memberOf Query\n * @param {string} [subject=''] The string to verify.\n * @return {boolean} Returns `true` if `subject` contains only digit characters or `false` otherwise.\n * @example\n * v.isDigit('35');\n * // => true\n *\n * v.isDigit('1.5');\n * // => false\n *\n * v.isDigit('ten');\n * // => false\n */\nfunction isDigit(subject) {\n  var subjectString = coerceToString(subject);\n  return REGEXP_DIGIT.test(subjectString);\n}\n\n/**\n * Checks whether `subject` is empty.\n *\n * @function isEmpty\n * @static\n * @since 1.0.0\n * @memberOf Query\n * @param {string} [subject=''] The string to verify.\n * @return {boolean} Returns `true` if `subject` is empty or `false` otherwise\n * @example\n * v.isEmpty('');\n * // => true\n *\n * v.isEmpty('  ');\n * // => false\n *\n * v.isEmpty('sun');\n * // => false\n */\nfunction isEmpty(subject) {\n  var subjectString = coerceToString(subject);\n  return subjectString.length === 0;\n}\n\n/**\n * Checks whether `subject` has only lower case characters.\n *\n * @function isLowerCase\n * @static\n * @since 1.0.0\n * @memberOf Query\n * @param {string} [subject=''] The string to verify.\n * @return {boolean} Returns `true` if `subject` is lower case or `false` otherwise.\n * @example\n * v.isLowerCase('motorcycle');\n * // => true\n *\n * v.isLowerCase('John');\n * // => false\n *\n * v.isLowerCase('T1000');\n * // => false\n */\nfunction isLowerCase(subject) {\n  var valueString = coerceToString(subject);\n  return isAlpha(valueString) && valueString.toLowerCase() === valueString;\n}\n\n/**\n * Checks whether `subject` is numeric.\n *\n * @function isNumeric\n * @static\n * @since 1.0.0\n * @memberOf Query\n * @param {string} [subject=''] The string to verify.\n * @return {boolean} Returns `true` if `subject` is numeric or `false` otherwise.\n * @example\n * v.isNumeric('350');\n * // => true\n *\n * v.isNumeric('-20.5');\n * // => true\n *\n * v.isNumeric('1.5E+2');\n * // => true\n *\n * v.isNumeric('five');\n * // => false\n */\nfunction isNumeric(subject) {\n  var valueNumeric = typeof subject === 'object' && !isNil(subject) ? Number(subject) : subject;\n  return (typeof valueNumeric === 'number' || typeof valueNumeric === 'string') && !isNaN(valueNumeric - parseFloat(valueNumeric));\n}\n\n/**\n * Checks whether `subject` contains only upper case characters.\n *\n * @function isUpperCase\n * @static\n * @since 1.0.0\n * @memberOf Query\n * @param {string} [subject=''] The string to verify.\n * @return {boolean} Returns `true` if `subject` is upper case or `false` otherwise.\n * @example\n * v.isUpperCase('ACDC');\n * // => true\n *\n * v.isUpperCase('Morning');\n * // => false\n */\nfunction isUpperCase(subject) {\n  var subjectString = coerceToString(subject);\n  return isAlpha(subjectString) && subjectString.toUpperCase() === subjectString;\n}\n\n/**\n * Checks whether `subject` matches the regular expression `pattern`.\n *\n * @function matches\n * @static\n * @since 1.0.0\n * @memberOf Query\n * @param {string} [subject=''] The string to verify.\n * @param {RegExp|string} pattern The pattern to match. If `pattern` is not RegExp, it is transformed to `new RegExp(pattern, flags)`.\n * @param {string} [flags=''] The regular expression flags. Applies when `pattern` is string type.\n * @return {boolean} Returns `true` if `subject` matches `pattern` or `false` otherwise.\n * @example\n * v.matches('pluto', /plu.{2}/);\n * // => true\n *\n * v.matches('sun', 'S', 'i');\n * // => true\n *\n * v.matches('apollo 11', '\\\\d{3}');\n * // => false\n */\nfunction matches(subject, pattern, flags) {\n  var subjectString = coerceToString(subject);\n  var flagsString = coerceToString(flags);\n  var patternString = void 0;\n  if (!(pattern instanceof RegExp)) {\n    patternString = toString(pattern);\n    if (patternString === null) {\n      return false;\n    }\n    pattern = new RegExp(patternString, flagsString);\n  }\n  return pattern.test(subjectString);\n}\n\n/**\n * Checks whether `subject` starts with `start`.\n *\n * @function startsWith\n * @static\n * @since 1.0.0\n * @memberOf Query\n * @param {string} [subject=''] The string to verify.\n * @param {string} start The starting string.\n * @param {number} [position=0] The position to start searching.\n * @return {boolean} Returns `true` if `subject` starts with `start` or `false` otherwise.\n * @example\n * v.startsWith('say hello to my little friend', 'say hello');\n * // => true\n *\n * v.startsWith('tony', 'on', 1);\n * // => true\n *\n * v.startsWith('the world is yours', 'world');\n * // => false\n */\nfunction startsWith(subject, start, position) {\n  var subjectString = coerceToString(subject);\n  var startString = toString(start);\n  if (startString === null) {\n    return false;\n  }\n  if (startString === '') {\n    return true;\n  }\n  position = isNil(position) ? 0 : clipNumber(toInteger(position), 0, subjectString.length);\n  return subjectString.substr(position, startString.length) === startString;\n}\n\n/**\n * Splits `subject` into an array of characters.\n *\n * @function chars\n * @static\n * @since 1.0.0\n * @memberOf Split\n * @param {string} [subject=''] The string to split into characters.\n * @return {Array} Returns the array of characters.\n * @example\n * v.chars('cloud');\n * // => ['c', 'l', 'o', 'u', 'd']\n */\nfunction chars(subject) {\n  var subjectString = coerceToString(subject);\n  return subjectString.split('');\n}\n\n/**\n * Returns an array of Unicode code point values from characters of `subject`.\n *\n * @function codePoints\n * @static\n * @since 1.0.0\n * @memberOf Split\n * @param  {string} [subject=''] The string to extract from.\n * @return {Array} Returns an array of non-negative numbers less than or equal to `0x10FFFF`.\n * @example\n * v.codePoints('rain');\n * // => [114, 97, 105, 110], or\n * //    [0x72, 0x61, 0x69, 0x6E]\n *\n * v.codePoints('\\uD83D\\uDE00 smile'); // or '😀 smile'\n * // => [128512, 32, 115, 109, 105, 108, 101], or\n * //    [0x1F600, 0x20, 0x73, 0x6D, 0x69, 0x6C, 0x65]\n */\nfunction codePoints(subject) {\n  var subjectString = coerceToString(subject);\n  var subjectStringLength = subjectString.length;\n  var codePointArray = [];\n  var index = 0;\n  var codePointNumber = void 0;\n  while (index < subjectStringLength) {\n    codePointNumber = codePointAt(subjectString, index);\n    codePointArray.push(codePointNumber);\n    index += codePointNumber > 0xFFFF ? 2 : 1;\n  }\n  return codePointArray;\n}\n\n/**\n * Splits `subject` into an array of graphemes taking care of\n * <a href=\"https://rainsoft.io/what-every-javascript-developer-should-know-about-unicode/#24surrogatepairs\">surrogate pairs</a> and\n * <a href=\"https://rainsoft.io/what-every-javascript-developer-should-know-about-unicode/#25combiningmarks\">combining marks</a>.\n *\n * @function graphemes\n * @static\n * @since 1.0.0\n * @memberOf Split\n * @param {string} [subject=''] The string to split into characters.\n * @return {Array} Returns the array of graphemes.\n * @example\n * v.graphemes('\\uD835\\uDC00\\uD835\\uDC01'); // or '𝐀𝐁'\n * // => ['\\uD835\\uDC00', '\\uD835\\uDC01'], or\n * //    ['𝐀', '𝐁']\n *\n * v.graphemes('cafe\\u0301'); // or 'café'\n * // => ['c', 'a', 'f', 'e\\u0301'], or\n * //    ['c', 'a', 'f', 'é']\n */\nfunction graphemes(subject) {\n  var subjectString = coerceToString(subject);\n  return nilDefault(subjectString.match(REGEXP_UNICODE_CHARACTER), []);\n}\n\n/**\n * Splits `subject` into an array of chunks by `separator`.\n *\n * @function split\n * @static\n * @since 1.0.0\n * @memberOf Split\n * @param {string} [subject=''] The string to split into characters.\n * @param {string|RegExp} [separator] The pattern to match the separator.\n * @param {number} [limit] Limit the number of chunks to be found.\n * @return {Array} Returns the array of chunks.\n * @example\n * v.split('rage against the dying of the light', ' ');\n * // => ['rage', 'against', 'the', 'dying', 'of', 'the', 'light']\n *\n * v.split('the dying of the light', /\\s/, 3);\n * // => ['the', 'dying', 'of']\n */\nfunction split(subject, separator, limit) {\n  var subjectString = coerceToString(subject);\n  return subjectString.split(separator, limit);\n}\n\nvar BYRE_ORDER_MARK = '\\uFEFF';\n\n/**\n * Strips the byte order mark (BOM) from the beginning of `subject`.\n *\n * @function stripBom\n * @static\n * @since 1.2.0\n * @memberOf Strip\n * @param {string} [subject=''] The string to strip from.\n * @return {string} Returns the stripped string.\n * @example\n *\n * v.stripBom('\\uFEFFsummertime sadness');\n * // => 'summertime sadness'\n *\n * v.stripBom('summertime happiness');\n * // => 'summertime happiness'\n *\n */\nfunction trim$1(subject) {\n  var subjectString = coerceToString(subject);\n  if (subjectString === '') {\n    return '';\n  }\n  if (subjectString[0] === BYRE_ORDER_MARK) {\n    return subjectString.substring(1);\n  }\n  return subjectString;\n}\n\n/**\n * Checks whether `subject` contains substring at specific `index`.\n *\n * @ignore\n * @param {string} subject The subject to search in.\n * @param {string} substring The substring to search/\n * @param {number} index The index to search substring.\n * @param {boolean} lookBehind Whether to look behind (true) or ahead (false).\n * @return {boolean} Returns a boolean whether the substring exists.\n */\nfunction hasSubstringAtIndex(subject, substring, index) {\n  var lookBehind = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n\n  var indexOffset = 0;\n  if (lookBehind) {\n    indexOffset = -substring.length + 1;\n  }\n  var extractedSubstring = subject.substr(index + indexOffset, substring.length);\n  return extractedSubstring.toLowerCase() === substring;\n}\n\n/**\n * Parses the tags from the string '<tag1><tag2>...<tagN>'.\n *\n * @ignore\n * @param {string} tags The string that contains the tags.\n * @return {string[]} Returns the array of tag names.\n */\nfunction parseTagList(tags) {\n  var tagsList = [];\n  var match = void 0;\n  while ((match = REGEXP_TAG_LIST.exec(tags)) !== null) {\n    tagsList.push(match[1]);\n  }\n  return tagsList;\n}\n\nvar STATE_START_TAG = 0;\nvar STATE_NON_WHITESPACE = 1;\nvar STATE_DONE = 2;\n\n/**\n * Parses the tag name from html content.\n *\n * @ignore\n * @param {string} tagContent The tag content.\n * @return {string} Returns the tag name.\n */\nfunction parseTagName(tagContent) {\n  var state = STATE_START_TAG;\n  var tagName = '';\n  var index = 0;\n  while (state !== STATE_DONE) {\n    var char = tagContent[index++].toLowerCase();\n    switch (char) {\n      case '<':\n        break;\n      case '>':\n        state = STATE_DONE;\n        break;\n      default:\n        if (REGEXP_WHITESPACE.test(char)) {\n          if (state === STATE_NON_WHITESPACE) {\n            state = STATE_DONE;\n          }\n        } else {\n          if (state === STATE_START_TAG) {\n            state = STATE_NON_WHITESPACE;\n          }\n          if (char !== '/') {\n            tagName += char;\n          }\n        }\n        break;\n    }\n  }\n  return tagName;\n}\n\nvar STATE_OUTPUT = 0;\nvar STATE_HTML = 1;\nvar STATE_EXCLAMATION = 2;\nvar STATE_COMMENT = 3;\n\n/**\n * Strips HTML tags from `subject`.\n *\n * @function stripTags\n * @static\n * @since 1.1.0\n * @memberOf Strip\n * @param {string} [subject=''] The string to strip from.\n * @param {string|Array} [allowableTags] The string `'<tag1><tag2>'` or array `['tag1', 'tag2']` of tags that should not be stripped.\n * @param {string} [replacement=''] The string to replace the stripped tag.\n * @return {string} Returns the stripped string.\n * @example\n *\n * v.stripTags('<span><a href=\"#\">Summer</a> is nice</span>');\n * // => 'Summer is nice'\n *\n * v.stripTags('<span><i>Winter</i> is <b>cold</b></span>', ['b', 'i']);\n * // => '<i>Winter</i> is <b>cold</b>'\n *\n * v.stripTags('Sun<br/>set', '', '-');\n * // => 'Sun-set'\n */\nfunction trim$2(subject, allowableTags, replacement) {\n  subject = coerceToString(subject);\n  if (subject === '') {\n    return '';\n  }\n  if (!Array.isArray(allowableTags)) {\n    var allowableTagsString = coerceToString(allowableTags);\n    allowableTags = allowableTagsString === '' ? [] : parseTagList(allowableTagsString);\n  }\n  var replacementString = coerceToString(replacement);\n  var length = subject.length;\n  var hasAllowableTags = allowableTags.length > 0;\n  var hasSubstring = hasSubstringAtIndex.bind(null, subject);\n  var state = STATE_OUTPUT;\n  var depth = 0;\n  var output = '';\n  var tagContent = '';\n  var quote = null;\n  for (var index = 0; index < length; index++) {\n    var char = subject[index];\n    var advance = false;\n    switch (char) {\n      case '<':\n        if (quote) {\n          break;\n        }\n        if (hasSubstring('< ', index, false)) {\n          advance = true;\n          break;\n        }\n        if (state === STATE_OUTPUT) {\n          advance = true;\n          state = STATE_HTML;\n          break;\n        }\n        if (state === STATE_HTML) {\n          depth++;\n          break;\n        }\n        advance = true;\n        break;\n      case '!':\n        if (state === STATE_HTML && hasSubstring('<!', index)) {\n          state = STATE_EXCLAMATION;\n          break;\n        }\n        advance = true;\n        break;\n      case '-':\n        if (state === STATE_EXCLAMATION && hasSubstring('!--', index)) {\n          state = STATE_COMMENT;\n          break;\n        }\n        advance = true;\n        break;\n      case '\"':\n      case \"'\":\n        if (state === STATE_HTML) {\n          if (quote === char) {\n            quote = null;\n          } else if (!quote) {\n            quote = char;\n          }\n        }\n        advance = true;\n        break;\n      case 'E':\n      case 'e':\n        if (state === STATE_EXCLAMATION && hasSubstring('doctype', index)) {\n          state = STATE_HTML;\n          break;\n        }\n        advance = true;\n        break;\n      case '>':\n        if (depth > 0) {\n          depth--;\n          break;\n        }\n        if (quote) {\n          break;\n        }\n        if (state === STATE_HTML) {\n          quote = null;\n          state = STATE_OUTPUT;\n          if (hasAllowableTags) {\n            tagContent += '>';\n            var tagName = parseTagName(tagContent);\n            if (allowableTags.indexOf(tagName.toLowerCase()) !== -1) {\n              output += tagContent;\n            } else {\n              output += replacementString;\n            }\n            tagContent = '';\n          } else {\n            output += replacementString;\n          }\n          break;\n        }\n        if (state === STATE_EXCLAMATION || state === STATE_COMMENT && hasSubstring('-->', index)) {\n          quote = null;\n          state = STATE_OUTPUT;\n          tagContent = '';\n          break;\n        }\n        advance = true;\n        break;\n      default:\n        advance = true;\n    }\n    if (advance) {\n      switch (state) {\n        case STATE_OUTPUT:\n          output += char;\n          break;\n        case STATE_HTML:\n          if (hasAllowableTags) {\n            tagContent += char;\n          }\n          break;\n      }\n    }\n  }\n  return output;\n}\n\nvar globalObject$1 = null;\n\nfunction getGlobalObject() {\n  if (globalObject$1 !== null) {\n    return globalObject$1;\n  }\n  /* istanbul ignore next */\n  // It's hard to mock the global variables. This code surely works fine. I hope :)\n  if (typeof global === 'object' && global.Object === Object) {\n    // NodeJS global object\n    globalObject$1 = global;\n  } else if (typeof self === 'object' && self.Object === Object) {\n    // self property from Window object\n    globalObject$1 = self;\n  } else {\n    // Other cases. Function constructor always has the context as global object\n    globalObject$1 = new Function('return this')();\n  }\n  return globalObject$1;\n}\n\nvar globalObject = getGlobalObject();\nvar previousV = globalObject.v;\n\n/**\n * Restores `v` variable to previous value and returns Voca library instance.\n *\n * @function noConflict\n * @static\n * @since 1.0.0\n * @memberOf Util\n * @return {Object} Returns Voca library instance.\n * @example\n * var voca = v.noConflict();\n * voca.isAlpha('Hello');\n * // => true\n */\nfunction noConflict() {\n  if (this === globalObject.v) {\n    globalObject.v = previousV;\n  }\n  return this;\n}\n\n/**\n * A property that contains the library <a href=\"http://semver.org/\">semantic version number</a>.\n * @name version\n * @static\n * @since 1.0.0\n * @memberOf Util\n * @type string\n * @example\n * v.version\n * // => '1.4.0'\n */\nvar version = '1.4.0';\n\n/* eslint sort-imports: \"off\" */\n\n/**\n * Functions to change the case\n * @namespace Case\n */\n/**\n * Chain functions\n * @namespace Chain\n */\n\n/**\n * Functions to cut a string\n * @namespace Chop\n */\n/**\n * Functions to count characters in a string\n * @namespace Count\n */\n/**\n * Functions to format\n * @namespace Format\n */\n/**\n * Functions to escape RegExp special characters\n * @namespace Escape\n */\n/**\n * Functions to find index\n * @namespace Index\n */\n/**\n * Functions to manipulate a string\n * @namespace Manipulate\n */\n/**\n * Functions to query a string\n * @namespace Query\n */\n/**\n * Functions to split a string\n * @namespace Split\n */\n/**\n * Functions to strip a string\n * @namespace Strip\n */\n/**\n * Util functions and properties\n * @namespace Util\n */\nvar functions = {\n  camelCase: camelCase,\n  capitalize: capitalize,\n  decapitalize: decapitalize,\n  kebabCase: kebabCase,\n  lowerCase: lowerCase,\n  snakeCase: snakeCase,\n  swapCase: swapCase,\n  titleCase: titleCase,\n  upperCase: upperCase,\n\n  count: count,\n  countGraphemes: countGrapheme,\n  countSubstrings: countSubstrings,\n  countWhere: countWhere,\n  countWords: countWords,\n\n  escapeHtml: escapeHtml,\n  escapeRegExp: escapeRegExp,\n  unescapeHtml: unescapeHtml,\n\n  sprintf: sprintf,\n  vprintf: vprintf,\n\n  indexOf: indexOf,\n  lastIndexOf: lastIndexOf,\n  search: search,\n\n  charAt: charAt,\n  codePointAt: codePointAt,\n  first: first,\n  graphemeAt: graphemeAt,\n  last: last,\n  prune: prune,\n  slice: slice,\n  substr: substr,\n  substring: substring,\n  truncate: truncate,\n\n  insert: insert,\n  latinise: latinise,\n  pad: pad,\n  padLeft: padLeft,\n  padRight: padRight,\n  repeat: repeat,\n  replace: replace,\n  replaceAll: replaceAll,\n  reverse: reverse,\n  reverseGrapheme: reverseGrapheme,\n  slugify: slugify,\n  splice: splice,\n  tr: tr,\n  trim: trim,\n  trimLeft: trimLeft,\n  trimRight: trimRight,\n  wordWrap: wordWrap,\n\n  endsWith: endsWith,\n  includes: includes,\n  isAlpha: isAlpha,\n  isAlphaDigit: isAlphaDigit,\n  isBlank: isBlank,\n  isDigit: isDigit,\n  isEmpty: isEmpty,\n  isLowerCase: isLowerCase,\n  isNumeric: isNumeric,\n  isString: isString,\n  isUpperCase: isUpperCase,\n  matches: matches,\n  startsWith: startsWith,\n\n  chars: chars,\n  codePoints: codePoints,\n  graphemes: graphemes,\n  split: split,\n  words: words,\n\n  stripBom: trim$1,\n  stripTags: trim$2,\n\n  noConflict: noConflict,\n  version: version\n};\n\n/**\n * The chain wrapper constructor.\n *\n * @ignore\n * @param  {string}       subject               The string to be wrapped.\n * @param  {boolean}      [explicitChain=false] A boolean that indicates if the chain sequence is explicit or implicit.\n * @return {ChainWrapper}                       Returns a new instance of `ChainWrapper`\n * @constructor\n */\nfunction ChainWrapper(subject, explicitChain) {\n  this._wrappedValue = subject;\n  this._explicitChain = explicitChain;\n}\n\n/**\n * Unwraps the chain sequence wrapped value.\n *\n * @memberof Chain\n * @since 1.0.0\n * @function __proto__value\n * @return {*} Returns the unwrapped value.\n * @example\n * v\n *  .chain('Hello world')\n *  .replace('Hello', 'Hi')\n *  .lowerCase()\n *  .slugify()\n *  .value()\n * // => 'hi-world'\n *\n * v(' Space travel ')\n *  .trim()\n *  .truncate(8)\n *  .value()\n * // => 'Space...'\n */\nChainWrapper.prototype.value = function () {\n  return this._wrappedValue;\n};\n\n/**\n * Override the default object valueOf().\n *\n * @ignore\n * @return {*} Returns the wrapped value.\n */\nChainWrapper.prototype.valueOf = function () {\n  return this.value();\n};\n\n/**\n * Returns the wrapped value to be used in JSON.stringify().\n *\n * @ignore\n * @return {*} Returns the wrapped value.\n */\nChainWrapper.prototype.toJSON = function () {\n  return this.value();\n};\n\n/**\n * Returns the string representation of the wrapped value.\n *\n * @ignore\n * @return {string} Returns the string representation.\n */\nChainWrapper.prototype.toString = function () {\n  return String(this.value());\n};\n\n/**\n * Creates a new chain object that enables <i>explicit</i> chain sequences.\n * Use `v.prototype.value()` to unwrap the result. <br/>\n * Does not modify the wrapped value.\n *\n * @memberof Chain\n * @since 1.0.0\n * @function __proto__chain\n * @return {Object} Returns the wrapper in <i>explicit</i> mode.\n * @example\n * v('Back to School')\n *  .chain()\n *  .lowerCase()\n *  .words()\n *  .value()\n * // => ['back', 'to', 'school']\n *\n * v(\" Back to School \")\n *  .chain()\n *  .trim()\n *  .truncate(7)\n *  .value()\n * // => 'Back...'\n */\nChainWrapper.prototype.chain = function () {\n  return new ChainWrapper(this._wrappedValue, true);\n};\n\n/**\n * Modifies the wrapped value with the invocation result of `changer` function. The current wrapped value is the\n * argument of `changer` invocation.\n *\n * @memberof Chain\n * @since 1.0.0\n * @function __proto__thru\n * @param  {Function} changer The function to invoke.\n * @return {Object}           Returns the new wrapper that wraps the invocation result of `changer`.\n * @example\n * v\n *  .chain('sun is shining')\n *  .words()\n *  .thru(function(words) {\n *    return words[0];\n *  })\n *  .value()\n * // => 'sun'\n *\n */\nChainWrapper.prototype.thru = function (changer) {\n  if (typeof changer === 'function') {\n    return new ChainWrapper(changer(this._wrappedValue), this._explicitChain);\n  }\n  return this;\n};\n\n/**\n * A boolean that indicates if the chain sequence is explicit or implicit.\n * @ignore\n * @type {boolean}\n * @private\n */\nChainWrapper.prototype._explicitChain = true;\n\n/**\n * Make a voca function chainable.\n *\n * @ignore\n * @param  {Function} functionInstance The function to make chainable\n * @return {Function}                  Returns the chainable function\n */\nfunction makeFunctionChainable(functionInstance) {\n  return function () {\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    var result = functionInstance.apply(undefined, [this._wrappedValue].concat(args));\n    if (this._explicitChain || typeof result === 'string') {\n      return new ChainWrapper(result, this._explicitChain);\n    } else {\n      return result;\n    }\n  };\n}\n\nObject.keys(functions).forEach(function (name) {\n  ChainWrapper.prototype[name] = makeFunctionChainable(functions[name]);\n});\n\n/**\n * Creates a chain object that wraps `subject`, enabling <i>explicit</i> chain sequences. <br/>\n * Use `v.prototype.value()` to unwrap the result.\n *\n * @memberOf Chain\n * @since 1.0.0\n * @function chain\n * @param  {string} subject The string to wrap.\n * @return {Object}         Returns the new wrapper object.\n * @example\n * v\n *  .chain('Back to School')\n *  .lowerCase()\n *  .words()\n *  .value()\n * // => ['back', 'to', 'school']\n */\nfunction chain(subject) {\n  return new ChainWrapper(subject, true);\n}\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\n/**\n * Creates a chain object that wraps `subject`, enabling <i>implicit</i> chain sequences.<br/>\n * A function that returns `number`, `boolean` or `array` type <i>terminates</i> the chain sequence and returns the unwrapped value.\n * Otherwise use `v.prototype.value()` to unwrap the result.\n *\n * @memberOf Chain\n * @since 1.0.0\n * @function v\n * @param {string} subject The string to wrap.\n * @return {Object}  Returns the new wrapper object.\n * @example\n * v('Back to School')\n *  .lowerCase()\n *  .words()\n * // => ['back', 'to', 'school']\n *\n * v(\" Back to School \")\n *  .trim()\n *  .truncate(7)\n *  .value()\n * // => 'Back...'\n */\nfunction Voca(subject) {\n  return new ChainWrapper(subject, false);\n}\n\n_extends(Voca, functions, {\n  chain: chain\n});\n\nreturn Voca;\n\n})));\n"]},"metadata":{},"sourceType":"script"}