{"ast":null,"code":"var _jsxFileName = \"/Users/sherikwong/Desktop/okay-inventory/src/App.tsx\";\n\n/* eslint-disable @typescript-eslint/no-unused-vars */\nimport { Grommet } from 'grommet';\nimport { createBrowserHistory } from 'history';\nimport React, { useState } from 'react';\nimport './App.scss';\nimport { IS_AUTHENTICATED } from './components/authentication/authentication';\n// import { List } from '../node_modules/grommet-icons/icons';\nimport List from './components/List/List';\nimport { Menu } from 'grommet-icons';\nimport ItemRouter from './components/item/Router';\nimport { cookies } from './index';\nimport Scan from './components/scan/scan';\nimport { NewModel } from './components/features/model/new/new-model';\nconst theme = {\n  calendar: {\n    medium: {\n      daySize: 'calc(100vw/8)'\n    }\n  }\n};\nexport const routes = {\n  '/item/:id': {\n    component: ItemRouter,\n    buttons: {\n      top: [],\n      bottom: []\n    }\n  },\n  '/list': {\n    component: List,\n    buttons: {\n      top: [],\n      bottom: []\n    }\n  },\n  '/models/new': {\n    component: NewModel\n  },\n  '/': {\n    component: Scan,\n    buttons: {\n      top: [{\n        icon: Menu\n      }],\n      bottom: []\n    }\n  }\n};\nconst history = createBrowserHistory();\n\nconst App = () => {\n  const [isAuthenticated, setAuthenticated] = useState(false);\n  const hasAuthenticatedCookie = cookies.get(IS_AUTHENTICATED);\n  const [logoHasPlayed, setLogoHasPlayed] = useState(false);\n  setTimeout(() => {\n    setLogoHasPlayed(true);\n  }, 3000);\n  return (\n    /*#__PURE__*/\n    // <Grommet theme={theme} themeMode=\"dark\">\n    React.createElement(Grommet, {\n      theme: theme,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(NewModel, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 7\n      }\n    }))\n  );\n};\n\nexport default App;","map":{"version":3,"sources":["/Users/sherikwong/Desktop/okay-inventory/src/App.tsx"],"names":["Grommet","createBrowserHistory","React","useState","IS_AUTHENTICATED","List","Menu","ItemRouter","cookies","Scan","NewModel","theme","calendar","medium","daySize","routes","component","buttons","top","bottom","icon","history","App","isAuthenticated","setAuthenticated","hasAuthenticatedCookie","get","logoHasPlayed","setLogoHasPlayed","setTimeout"],"mappings":";;AAAA;AACA,SAASA,OAAT,QAA6B,SAA7B;AACA,SAASC,oBAAT,QAAqC,SAArC;AACA,OAAOC,KAAP,IAGEC,QAHF,QAKO,OALP;AAQA,OAAO,YAAP;AACA,SACEC,gBADF,QAEO,4CAFP;AAIA;AACA,OAAOC,IAAP,MAAiB,wBAAjB;AACA,SAASC,IAAT,QAAqB,eAArB;AACA,OAAOC,UAAP,MAAuB,0BAAvB;AACA,SAASC,OAAT,QAAwB,SAAxB;AACA,OAAOC,IAAP,MAAiB,wBAAjB;AAEA,SAASC,QAAT,QAAyB,2CAAzB;AAEA,MAAMC,KAAK,GAAG;AACZC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,MAAM,EAAE;AACNC,MAAAA,OAAO,EAAE;AADH;AADA;AADE,CAAd;AAiBA,OAAO,MAAMC,MAAM,GAAG;AACpB,eAAa;AACXC,IAAAA,SAAS,EAAET,UADA;AAEXU,IAAAA,OAAO,EAAE;AACPC,MAAAA,GAAG,EAAE,EADE;AAEPC,MAAAA,MAAM,EAAE;AAFD;AAFE,GADO;AAQpB,WAAS;AACPH,IAAAA,SAAS,EAAEX,IADJ;AAEPY,IAAAA,OAAO,EAAE;AACPC,MAAAA,GAAG,EAAE,EADE;AAEPC,MAAAA,MAAM,EAAE;AAFD;AAFF,GARW;AAepB,iBAAe;AACbH,IAAAA,SAAS,EAAEN;AADE,GAfK;AAkBpB,OAAK;AACHM,IAAAA,SAAS,EAAEP,IADR;AAEHQ,IAAAA,OAAO,EAAE;AACPC,MAAAA,GAAG,EAAE,CACH;AACEE,QAAAA,IAAI,EAAEd;AADR,OADG,CADE;AAMPa,MAAAA,MAAM,EAAE;AAND;AAFN;AAlBe,CAAf;AA+BP,MAAME,OAAO,GAAGpB,oBAAoB,EAApC;;AAEA,MAAMqB,GAAG,GAAG,MAAM;AAChB,QAAM,CAACC,eAAD,EAAkBC,gBAAlB,IAAsCrB,QAAQ,CAAC,KAAD,CAApD;AACA,QAAMsB,sBAAsB,GAAGjB,OAAO,CAACkB,GAAR,CAAYtB,gBAAZ,CAA/B;AACA,QAAM,CAACuB,aAAD,EAAgBC,gBAAhB,IAAoCzB,QAAQ,CAAC,KAAD,CAAlD;AAEA0B,EAAAA,UAAU,CAAC,MAAM;AACfD,IAAAA,gBAAgB,CAAC,IAAD,CAAhB;AACD,GAFS,EAEP,IAFO,CAAV;AAIA;AAAA;AACE;AACA,wBAAC,OAAD;AAAS,MAAA,KAAK,EAAEjB,KAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AAFF;AA2BD,CApCD;;AAsCA,eAAeW,GAAf","sourcesContent":["/* eslint-disable @typescript-eslint/no-unused-vars */\nimport { Grommet, Box } from 'grommet';\nimport { createBrowserHistory } from 'history';\nimport React, {\n  ComponentClass,\n  createFactory,\n  useState,\n  useEffect,\n} from 'react';\nimport { Route, Router, withRouter } from 'react-router-dom';\nimport { FirebaseAuthProvider } from 'use-firebase-auth';\nimport './App.scss';\nimport Authentication, {\n  IS_AUTHENTICATED,\n} from './components/authentication/authentication';\nimport { db } from './database';\n// import { List } from '../node_modules/grommet-icons/icons';\nimport List from './components/List/List';\nimport { Menu } from 'grommet-icons';\nimport ItemRouter from './components/item/Router';\nimport { cookies } from './index';\nimport Scan from './components/scan/scan';\nimport Logo from './components/reusable/logo/logo';\nimport { NewModel } from './components/features/model/new/new-model';\n\nconst theme = {\n  calendar: {\n    medium: {\n      daySize: 'calc(100vw/8)',\n    },\n  },\n};\n\nexport interface INavButton {\n  icon: any;\n  click?: () => {};\n}\nexport interface IRoute {\n  component: ComponentClass;\n  buttons?: { [key: string]: INavButton[] };\n}\n\nexport const routes = {\n  '/item/:id': {\n    component: ItemRouter,\n    buttons: {\n      top: [],\n      bottom: [],\n    },\n  },\n  '/list': {\n    component: List,\n    buttons: {\n      top: [],\n      bottom: [],\n    },\n  },\n  '/models/new': {\n    component: NewModel,\n  },\n  '/': {\n    component: Scan,\n    buttons: {\n      top: [\n        {\n          icon: Menu,\n        },\n      ],\n      bottom: [],\n    },\n  },\n};\n\nconst history = createBrowserHistory();\n\nconst App = () => {\n  const [isAuthenticated, setAuthenticated] = useState(false);\n  const hasAuthenticatedCookie = cookies.get(IS_AUTHENTICATED);\n  const [logoHasPlayed, setLogoHasPlayed] = useState(false);\n\n  setTimeout(() => {\n    setLogoHasPlayed(true);\n  }, 3000);\n\n  return (\n    // <Grommet theme={theme} themeMode=\"dark\">\n    <Grommet theme={theme}>\n      <NewModel />\n      {/* {!logoHasPlayed ? (\n        <Box fill={true} alignContent=\"center\" justify=\"center\">\n          <Logo animated={true} width=\"100%\" />\n        </Box>\n      ) : (\n        <Router history={history}>\n          {true ? (\n            // hasAuthenticatedCookie || isAuthenticated\n            Object.entries(routes).map(([path, info]) => (\n              <Route\n                path={path}\n                key={path}\n                component={createFactory(info.component as any)}\n                exact\n              />\n            ))\n          ) : (\n            <Authentication setAuthenticated={setAuthenticated} />\n          )}\n        </Router>\n      )} */}\n    </Grommet>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}