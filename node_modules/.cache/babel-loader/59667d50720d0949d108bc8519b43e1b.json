{"ast":null,"code":"var _jsxFileName = \"/Users/sherikwong/Desktop/okay-inventory/src/components/item/EditItem/EditTags.tsx\";\n\n/* eslint-disable @typescript-eslint/no-unused-vars */\nimport { withRouter } from \"react-router-dom\";\nimport React from 'react';\nimport { useState, useEffect } from 'react';\nimport { tagsDB } from \"../../../database/tags\";\nimport { TextInput, Box, Button, Keyboard } from 'grommet';\nimport styled from 'styled-components';\nimport SpinnerButton from '../../reusable/SpinnerButton/SpinnerButton';\nimport { Add } from 'grommet-icons';\nimport Tags from \"../../reusable/Tags/Tags\";\nimport { itemsDB } from '../../../database/items';\nimport { getAllTags } from '../../reusable/Tags/Tags';\nexport const WhiteBgTextInput = styled(TextInput)`\nbackground-color: rgba(255, 255, 255, .5);\n`;\nexport const CenteredBox = styled(Box)`\nposition: absolute;\ntop: 50%;\n`;\n\nconst EditTags = props => {\n  const {\n    match,\n    details,\n    location: {\n      state\n    },\n    history\n  } = props;\n  const id = match.params.id;\n  const [tags, setTags] = useState(new Set([]));\n  const [isDictating, setDictating] = useState(false);\n  const [search, setSearch] = useState('');\n  const [allTags, setAllTags] = useState(new Map([]));\n  const [loading, setLoading] = useState(false);\n  useEffect(getAllTags(setAllTags), []);\n  useEffect(() => {\n    setTags(new Set(details ? details.tags : state.details.tags));\n  }, [details, state]);\n\n  const removeExistingTags = () => {\n    console.log(allTags);\n    return [...allTags.values()].filter(tag => {\n      return !tags.has(tag.id);\n    }).map(tag => ({\n      label: tag.name,\n      value: tag.id\n    }));\n  };\n\n  const onType = ({\n    target: {\n      value: searchValue\n    }\n  }) => {\n    setSearch(searchValue);\n  };\n\n  const onCustomTag = () => {\n    tagsDB.add({\n      name: search\n    }).then(newTag => {\n      tags.add(newTag.id);\n      allTags.set(newTag.id, newTag);\n      itemsDB.update(id, {\n        id,\n        tags: [...tags]\n      });\n    });\n  };\n\n  const onSelect = $event => {\n    const id = $event.suggestion.value; // console.log('Selecting', id);\n\n    const safeTags = [...tags];\n    safeTags.push(id);\n    setTags(new Set(safeTags));\n    updateDBTags(safeTags);\n  };\n\n  const updateDBTags = tags => {\n    itemsDB.update(id, { ...props.details,\n      tags: tags\n    }); // props.onUpdate();\n  };\n\n  const onRemove = tag => {\n    const withRemoved = new Set(tags);\n    withRemoved.delete(tag.id);\n    setTags(withRemoved);\n    updateDBTags([...withRemoved]);\n  };\n\n  const navToDate = () => {\n    history.push(`/item/${details.id}/edit/date`);\n  };\n\n  return /*#__PURE__*/React.createElement(Box, {\n    justify: \"start\",\n    fill: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Box, {\n    direction: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Tags, {\n    tags: tags,\n    onRemove: onRemove,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(Keyboard, {\n    onEnter: onCustomTag,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(CenteredBox, {\n    fill: \"horizontal\",\n    pad: \"large\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Box, {\n    direction: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(WhiteBgTextInput, {\n    value: search,\n    suggestions: removeExistingTags(),\n    onSelect: onSelect,\n    onChange: onType,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Box, {\n    direction: \"row\",\n    align: \"center\",\n    pad: {\n      left: 'large'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 13\n    }\n  }, search && /*#__PURE__*/React.createElement(Button, {\n    icon: /*#__PURE__*/React.createElement(Add, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 40\n      }\n    }),\n    onClick: onCustomTag,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 26\n    }\n  }), /*#__PURE__*/React.createElement(SpinnerButton, {\n    onClick: navToDate,\n    loading: loading,\n    setLoading: setLoading,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 15\n    }\n  }))))));\n};\n\nexport default withRouter(EditTags);","map":{"version":3,"sources":["/Users/sherikwong/Desktop/okay-inventory/src/components/item/EditItem/EditTags.tsx"],"names":["withRouter","React","useState","useEffect","tagsDB","TextInput","Box","Button","Keyboard","styled","SpinnerButton","Add","Tags","itemsDB","getAllTags","WhiteBgTextInput","CenteredBox","EditTags","props","match","details","location","state","history","id","params","tags","setTags","Set","isDictating","setDictating","search","setSearch","allTags","setAllTags","Map","loading","setLoading","removeExistingTags","console","log","values","filter","tag","has","map","label","name","value","onType","target","searchValue","onCustomTag","add","then","newTag","set","update","onSelect","$event","suggestion","safeTags","push","updateDBTags","onRemove","withRemoved","delete","navToDate","left"],"mappings":"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","sourcesContent":["/* eslint-disable @typescript-eslint/no-unused-vars */\n\nimport { withRouter } from \"react-router-dom\";\nimport React from 'react';\nimport { useState, useEffect } from 'react';\nimport { ITag, tagsDB } from \"../../../database/tags\";\nimport { TextInput, Box, Button, Keyboard, Stack } from 'grommet';\nimport styled from 'styled-components';\nimport SpinnerButton from '../../reusable/SpinnerButton/SpinnerButton';\nimport { Add } from 'grommet-icons'; import Tags from \"../../reusable/Tags/Tags\";\nimport { itemsDB } from '../../../database/items';\nimport { IItem } from '../../../models/items';\nimport { getAllTags } from '../../reusable/Tags/Tags';\n\nexport interface InputSuggestion {\n  value: string;\n  label: string;\n}\n\nexport const WhiteBgTextInput = styled(TextInput)`\nbackground-color: rgba(255, 255, 255, .5);\n`;\n\nexport const CenteredBox = styled(Box)`\nposition: absolute;\ntop: 50%;\n`\n\nconst EditTags = props => {\n  const { match, details, location: { state }, history } = props;\n  const id = match.params.id;\n  const [tags, setTags] = useState(new Set([] as string[]));\n  const [isDictating, setDictating] = useState(false);\n  const [search, setSearch] = useState('');\n  const [allTags, setAllTags] = useState(new Map([]));\n  const [loading, setLoading] = useState(false);\n\n  useEffect(getAllTags(setAllTags), []);\n\n  useEffect(() => {\n    setTags(new Set(details ? details.tags : state.details.tags));\n  }, [details, state]);\n\n  const removeExistingTags = () => {\n    console.log(allTags);\n    return [...allTags.values()].filter(tag => {\n      return !tags.has((tag as ITag).id);\n    }).map(tag => ({\n      label: (tag as ITag).name,\n      value: (tag as ITag).id\n    }));\n  }\n\n  const onType = ({ target: { value: searchValue } }) => {\n    setSearch(searchValue);\n  }\n\n  const onCustomTag = () => {\n    tagsDB.add({\n      name: search\n    }).then((newTag: ITag) => {\n      tags.add(newTag.id);\n      allTags.set(newTag.id, newTag);\n      itemsDB.update(id, {\n        id,\n        tags: [...tags] as string[]\n      });\n\n\n    });\n  };\n\n  const onSelect = $event => {\n    const id = $event.suggestion.value;\n    // console.log('Selecting', id);\n\n    const safeTags = [...tags];\n    safeTags.push(id);\n    setTags(new Set(safeTags));\n\n    updateDBTags(safeTags);\n  }\n\n  const updateDBTags = tags => {\n    itemsDB.update(id, {\n      ...props.details,\n      tags: tags\n    });\n\n    // props.onUpdate();\n  }\n\n  const onRemove = (tag: ITag) => {\n    const withRemoved = new Set(tags);\n    withRemoved.delete(tag.id);\n    setTags(withRemoved);\n    updateDBTags([...withRemoved]);\n  }\n\n  const navToDate = () => {\n    history.push(`/item/${details.id}/edit/date`);\n  }\n\n  return (\n    <Box justify=\"start\" fill={true}>\n\n      <Box direction=\"row\">\n        <Tags tags={tags} onRemove={onRemove} />\n      </Box>\n\n      <Keyboard onEnter={onCustomTag}>\n        <CenteredBox fill=\"horizontal\" pad=\"large\">\n\n          <Box direction=\"row\">\n            <WhiteBgTextInput\n              value={search}\n              suggestions={removeExistingTags()}\n              onSelect={onSelect}\n              onChange={onType}\n            />\n\n            <Box direction=\"row\" align=\"center\" pad={{ left: 'large' }}>\n              {search && <Button icon={<Add />} onClick={onCustomTag} />}\n              <SpinnerButton onClick={navToDate} loading={loading} setLoading={setLoading} />\n            </Box>\n          </Box>\n        </CenteredBox>\n      </Keyboard>\n\n    </Box>\n  );\n}\n\nexport default withRouter(EditTags);\n"]},"metadata":{},"sourceType":"module"}