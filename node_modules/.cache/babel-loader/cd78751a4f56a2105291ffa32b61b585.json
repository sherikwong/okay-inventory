{"ast":null,"code":"var _jsxFileName = \"/Users/sherikwong/Desktop/okay-inventory/src/App.tsx\";\n\n/* eslint-disable @typescript-eslint/no-unused-vars */\nimport { Grommet, Box } from 'grommet';\nimport { createBrowserHistory } from 'history';\nimport React, { createFactory, useState } from 'react';\nimport { Route, Router } from 'react-router-dom';\nimport './App.scss';\nimport Authentication, { IS_AUTHENTICATED } from './components/authentication/authentication';\n// import { List } from '../node_modules/grommet-icons/icons';\nimport List from './components/List/List';\nimport { Menu } from 'grommet-icons';\nimport ItemRouter from './components/item/Router';\nimport { cookies } from './index';\nimport Scan from './components/scan/scan';\nimport Logo from './components/reusable/logo/logo';\nimport { NewModel } from './components/features/model/new/new-model';\nconst theme = {\n  calendar: {\n    medium: {\n      daySize: 'calc(100vw/8)'\n    }\n  }\n};\nexport const routes = {\n  '/item/:id': {\n    component: ItemRouter,\n    buttons: {\n      top: [],\n      bottom: []\n    }\n  },\n  '/list': {\n    component: List,\n    buttons: {\n      top: [],\n      bottom: []\n    }\n  },\n  '/models/new': {\n    component: NewModel\n  },\n  '/': {\n    component: Scan,\n    buttons: {\n      top: [{\n        icon: Menu\n      }],\n      bottom: []\n    }\n  }\n};\nconst history = createBrowserHistory();\n\nconst App = () => {\n  const [isAuthenticated, setAuthenticated] = useState(false);\n  const hasAuthenticatedCookie = cookies.get(IS_AUTHENTICATED);\n  const [logoHasPlayed, setLogoHasPlayed] = useState(false);\n  setTimeout(() => {\n    setLogoHasPlayed(true);\n  }, 3000);\n  return /*#__PURE__*/React.createElement(Grommet, {\n    theme: theme,\n    themeMode: \"dark\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 5\n    }\n  }, !logoHasPlayed ? /*#__PURE__*/React.createElement(Box, {\n    fill: true,\n    alignContent: \"center\",\n    justify: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Logo, {\n    animated: true,\n    width: \"100%\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 11\n    }\n  })) : /*#__PURE__*/React.createElement(Router, {\n    history: history,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 9\n    }\n  }, true ? // hasAuthenticatedCookie || isAuthenticated\n  Object.entries(routes).map(([path, info]) => /*#__PURE__*/React.createElement(Route, {\n    path: path,\n    key: path,\n    component: createFactory(info.component),\n    exact: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 15\n    }\n  })) : /*#__PURE__*/React.createElement(Authentication, {\n    setAuthenticated: setAuthenticated,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 13\n    }\n  })));\n};\n\nexport default App;","map":{"version":3,"sources":["/Users/sherikwong/Desktop/okay-inventory/src/App.tsx"],"names":["Grommet","Box","createBrowserHistory","React","createFactory","useState","Route","Router","Authentication","IS_AUTHENTICATED","List","Menu","ItemRouter","cookies","Scan","Logo","NewModel","theme","calendar","medium","daySize","routes","component","buttons","top","bottom","icon","history","App","isAuthenticated","setAuthenticated","hasAuthenticatedCookie","get","logoHasPlayed","setLogoHasPlayed","setTimeout","Object","entries","map","path","info"],"mappings":"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","sourcesContent":["/* eslint-disable @typescript-eslint/no-unused-vars */\nimport { Grommet, Box } from 'grommet';\nimport { createBrowserHistory } from 'history';\nimport React, {\n  ComponentClass,\n  createFactory,\n  useState,\n  useEffect,\n} from 'react';\nimport { Route, Router, withRouter } from 'react-router-dom';\nimport { FirebaseAuthProvider } from 'use-firebase-auth';\nimport './App.scss';\nimport Authentication, {\n  IS_AUTHENTICATED,\n} from './components/authentication/authentication';\nimport { db } from './database';\n// import { List } from '../node_modules/grommet-icons/icons';\nimport List from './components/List/List';\nimport { Menu } from 'grommet-icons';\nimport ItemRouter from './components/item/Router';\nimport { cookies } from './index';\nimport Scan from './components/scan/scan';\nimport Logo from './components/reusable/logo/logo';\nimport { NewModel } from './components/features/model/new/new-model';\n\nconst theme = {\n  calendar: {\n    medium: {\n      daySize: 'calc(100vw/8)',\n    },\n  },\n};\n\nexport interface INavButton {\n  icon: any;\n  click?: () => {};\n}\nexport interface IRoute {\n  component: ComponentClass;\n  buttons?: { [key: string]: INavButton[] };\n}\n\nexport const routes = {\n  '/item/:id': {\n    component: ItemRouter,\n    buttons: {\n      top: [],\n      bottom: [],\n    },\n  },\n  '/list': {\n    component: List,\n    buttons: {\n      top: [],\n      bottom: [],\n    },\n  },\n  '/models/new': {\n    component: NewModel,\n  },\n  '/': {\n    component: Scan,\n    buttons: {\n      top: [\n        {\n          icon: Menu,\n        },\n      ],\n      bottom: [],\n    },\n  },\n};\n\nconst history = createBrowserHistory();\n\nconst App = () => {\n  const [isAuthenticated, setAuthenticated] = useState(false);\n  const hasAuthenticatedCookie = cookies.get(IS_AUTHENTICATED);\n  const [logoHasPlayed, setLogoHasPlayed] = useState(false);\n\n  setTimeout(() => {\n    setLogoHasPlayed(true);\n  }, 3000);\n\n  return (\n    <Grommet theme={theme} themeMode=\"dark\">\n      {!logoHasPlayed ? (\n        <Box fill={true} alignContent=\"center\" justify=\"center\">\n          <Logo animated={true} width=\"100%\" />\n        </Box>\n      ) : (\n        <Router history={history}>\n          {true ? (\n            // hasAuthenticatedCookie || isAuthenticated\n            Object.entries(routes).map(([path, info]) => (\n              <Route\n                path={path}\n                key={path}\n                component={createFactory(info.component as any)}\n                exact\n              />\n            ))\n          ) : (\n            <Authentication setAuthenticated={setAuthenticated} />\n          )}\n        </Router>\n      )}\n    </Grommet>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}