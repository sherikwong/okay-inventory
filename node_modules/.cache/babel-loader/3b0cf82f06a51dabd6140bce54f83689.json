{"ast":null,"code":"import { db } from '.';\nexport class BaseDB {\n  constructor(dbName) {\n    this.dbName = dbName;\n    this._db = void 0;\n    this.items = [];\n    this.g = void 0;\n    this._db = db.ref().child(dbName);\n  }\n\n  getAll() {\n    return this._db.once('value', res => {\n      this.items = res.val();\n    }).then(res => this.items);\n  }\n\n  get(id) {\n    return db.ref().child(this.dbName + '/' + id).once('value').then(snapshot => snapshot && snapshot.exists() ? snapshot.val() : undefined);\n  }\n\n  add(data) {\n    const newEntry = this._db.push(); // TODO: SK: Revisit bracket notation;\n\n\n    data['id'] = newEntry.key;\n    data['dateCreated'] = new Date();\n    return newEntry.set(data).then(res => {\n      return data;\n    });\n  }\n\n  update(id, data) {\n    return db.ref().child(this.dbName + '/' + id).update(data).then(() => {\n      console.log(`Success updating ${id}`);\n    });\n  }\n\n  delete(id) {\n    return db.ref().child(this.dbName + '/' + id).remove();\n  }\n\n}","map":{"version":3,"sources":["/Users/sherikwong/Desktop/okay-inventory/src/database/base.tsx"],"names":["db","BaseDB","constructor","dbName","_db","items","g","ref","child","getAll","once","res","val","then","get","id","snapshot","exists","undefined","add","data","newEntry","push","key","Date","set","update","console","log","delete","remove"],"mappings":"AAAA,SAASA,EAAT,QAAmB,GAAnB;AAcA,OAAO,MAAMC,MAAN,CAAsC;AAI3CC,EAAAA,WAAW,CAAWC,MAAX,EAA2B;AAAA,SAAhBA,MAAgB,GAAhBA,MAAgB;AAAA,SAH5BC,GAG4B;AAAA,SAF5BC,KAE4B,GAFf,EAEe;AAAA,SAUtCC,CAVsC;AACpC,SAAKF,GAAL,GAAWJ,EAAE,CAACO,GAAH,GAASC,KAAT,CAAeL,MAAf,CAAX;AACD;;AAEMM,EAAAA,MAAP,GAA8B;AAC5B,WAAO,KAAKL,GAAL,CAASM,IAAT,CAAc,OAAd,EAAuBC,GAAG,IAAI;AACnC,WAAKN,KAAL,GAAaM,GAAG,CAACC,GAAJ,EAAb;AACD,KAFM,EAEJC,IAFI,CAECF,GAAG,IAAI,KAAKN,KAFb,CAAP;AAID;;AAEMS,EAAAA,GAAP,CAAWC,EAAX,EAAqC;AACnC,WAAOf,EAAE,CAACO,GAAH,GAASC,KAAT,CAAe,KAAKL,MAAL,GAAc,GAAd,GAAoBY,EAAnC,EAAuCL,IAAvC,CAA4C,OAA5C,EACJG,IADI,CACCG,QAAQ,IAAIA,QAAQ,IAAIA,QAAQ,CAACC,MAAT,EAAZ,GAAgCD,QAAQ,CAACJ,GAAT,EAAhC,GAAiDM,SAD9D,CAAP;AAED;;AAEMC,EAAAA,GAAP,CAAWC,IAAX,EAA2C;AACzC,UAAMC,QAAQ,GAAG,KAAKjB,GAAL,CAASkB,IAAT,EAAjB,CADyC,CAGzC;;;AACAF,IAAAA,IAAI,CAAC,IAAD,CAAJ,GAAaC,QAAQ,CAACE,GAAtB;AACAH,IAAAA,IAAI,CAAC,aAAD,CAAJ,GAAsB,IAAII,IAAJ,EAAtB;AAEA,WAAOH,QAAQ,CAACI,GAAT,CAAaL,IAAb,EACJP,IADI,CACCF,GAAG,IAAI;AACX,aAAOS,IAAP;AACD,KAHI,CAAP;AAID;;AAEMM,EAAAA,MAAP,CAAcX,EAAd,EAA0BK,IAA1B,EAA0D;AACxD,WAAOpB,EAAE,CAACO,GAAH,GAASC,KAAT,CAAe,KAAKL,MAAL,GAAc,GAAd,GAAoBY,EAAnC,EAAuCW,MAAvC,CAA8CN,IAA9C,EACJP,IADI,CACC,MAAM;AACVc,MAAAA,OAAO,CAACC,GAAR,CAAa,oBAAmBb,EAAG,EAAnC;AACD,KAHI,CAAP;AAID;;AAEMc,EAAAA,MAAP,CAAcd,EAAd,EAAwC;AACtC,WAAOf,EAAE,CAACO,GAAH,GAASC,KAAT,CAAe,KAAKL,MAAL,GAAc,GAAd,GAAoBY,EAAnC,EAAuCe,MAAvC,EAAP;AACD;;AA1C0C","sourcesContent":["import { db } from '.';\n\nexport interface IBaseDB<T> {\n  getAll(): Promise<T[]>;\n  add(data: T): void;\n  update(id: string, data: T): void;\n}\n\nexport interface IBaseModel {\n  dateCreated?: Date;\n  dateModified?: Date;\n  id: string;\n}\n\nexport class BaseDB<T> implements IBaseDB<T> {\n  protected _db: firebase.database.Reference;\n  protected items: T[] = [];\n\n  constructor(protected dbName: string) {\n    this._db = db.ref().child(dbName);\n  }\n\n  public getAll(): Promise<T[]> {\n    return this._db.once('value', res => {\n      this.items = res.val();\n    }).then(res => this.items);\n\n  }\n  g\n  public get(id: string): Promise<any> {\n    return db.ref().child(this.dbName + '/' + id).once('value')\n      .then(snapshot => snapshot && snapshot.exists() ? snapshot.val() : undefined);\n  }\n\n  public add(data: Partial<T>): Promise<any> {\n    const newEntry = this._db.push();\n\n    // TODO: SK: Revisit bracket notation;\n    data['id'] = newEntry.key;\n    data['dateCreated'] = new Date();\n\n    return newEntry.set(data)\n      .then(res => {\n        return data;\n      });\n  }\n\n  public update(id: string, data: Partial<T>): Promise<any> {\n    return db.ref().child(this.dbName + '/' + id).update(data)\n      .then(() => {\n        console.log(`Success updating ${id}`);\n      });\n  }\n\n  public delete(id: string): Promise<any> {\n    return db.ref().child(this.dbName + '/' + id).remove();\n  }\n}\n"]},"metadata":{},"sourceType":"module"}