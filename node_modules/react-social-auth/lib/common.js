"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getQueryParameter = exports.hasRequiredSettings = exports.loadScript = void 0;

var _fp = _interopRequireDefault(require("lodash/fp"));

var F = _interopRequireWildcard(require("futil-js"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var loadScript = function loadScript(id, src) {
  return new Promise(function (resolve) {
    if (typeof document !== 'undefined') {
      if (!document.getElementById(id)) {
        var siblingElement = _fp["default"].head(document.getElementsByTagName('script'));

        var scriptElement = document.createElement('script');
        F.extendOn(scriptElement, {
          id: id,
          src: src,
          onload: resolve,
          async: true
        });
        siblingElement.parentNode.insertBefore(scriptElement, siblingElement);
      }
    }
  });
};

exports.loadScript = loadScript;

var hasProperties = _fp["default"].curry(function (properties, instance) {
  return _fp["default"].every(function (property) {
    return _fp["default"].has(property, instance) && !_fp["default"].isNil(property, instance);
  }, properties);
});

var hasRequiredSettings = function hasRequiredSettings(instance) {
  var requiredSettings = ['provider', 'appId', 'onSuccess', 'component'];

  if (!hasProperties(requiredSettings, instance)) {
    throw "[Social Authentication] - A valid value for the following setting is required ".concat(requiredSettings.join(', '), ".");
  } else {
    return true;
  }
};

exports.hasRequiredSettings = hasRequiredSettings;

var getQueryParameter = function getQueryParameter(name) {
  if (typeof window !== 'undefined') {
    var match = RegExp("[?&]".concat(name, "=([^&]*)")).exec(window.location.search);
    return match && decodeURIComponent(match[1].replace(/\+/g, ' '));
  }
};

exports.getQueryParameter = getQueryParameter;
//# sourceMappingURL=common.js.map