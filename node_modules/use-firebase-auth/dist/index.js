'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var React = require('react');
var React__default = _interopDefault(React);

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

function __generator(thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
}

function useReducedState(initialState) {
    var reducedState = React.useReducer(function (oldState, newState) { return (__assign(__assign({}, oldState), newState)); }, initialState);
    return reducedState;
}

var FirebaseContext = React.createContext(null);
(function (SIGNIN_PROVIDERS) {
    SIGNIN_PROVIDERS["PASSWORD"] = "password";
    SIGNIN_PROVIDERS["GOOGLE"] = "google";
    SIGNIN_PROVIDERS["FACEBOOK"] = "facebook";
    SIGNIN_PROVIDERS["TWITTER"] = "twitter";
    SIGNIN_PROVIDERS["GITHUB"] = "github";
    SIGNIN_PROVIDERS["MICROSOFT"] = "microsoft";
    SIGNIN_PROVIDERS["YAHOO"] = "yahoo";
})(exports.SIGNIN_PROVIDERS || (exports.SIGNIN_PROVIDERS = {}));
function FirebaseAuthProvider(_a) {
    var firebase = _a.firebase, children = _a.children;
    var _b = useReducedState({
        user: firebase.auth().currentUser,
        loading: false,
        error: null,
        firstCheck: false,
    }), _c = _b[0], user = _c.user, loading = _c.loading, error = _c.error, firstCheck = _c.firstCheck, setState = _b[1];
    React.useEffect(function () {
        !user && setState({ loading: true });
        return firebase
            .auth()
            .onAuthStateChanged(function (user) {
            setState({
                loading: false,
                error: null,
                user: user,
                firstCheck: true,
            });
        });
    }, []);
    return (React__default.createElement(FirebaseContext.Provider, { value: {
            user: user,
            loading: loading,
            error: error,
            firebase: firebase,
            setState: setState,
            firstCheck: firstCheck,
        } }, children));
}
function useFirebaseAuth() {
    var firebaseContext = React.useContext(FirebaseContext);
    if (firebaseContext === null) {
        throw new Error("No FirebaseAuthProvider found.");
    }
    var user = firebaseContext.user, loading = firebaseContext.loading, error = firebaseContext.error, setState = firebaseContext.setState, firebase = firebaseContext.firebase, firstCheck = firebaseContext.firstCheck;
    function signInWithProvider(provider, options) {
        return __awaiter(this, void 0, void 0, function () {
            var auth, providerObj, scopes, userCredential, e_1, supportedPopupSignInMethods_1, getProvider, providers, firstPopupProviderMethod, linkedProvider, result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        setState({ loading: true });
                        firebase.auth().useDeviceLanguage();
                        auth = firebase.auth;
                        if (typeof provider === "string") {
                            switch (provider) {
                                case exports.SIGNIN_PROVIDERS.GOOGLE:
                                    providerObj = new auth.GoogleAuthProvider();
                                    break;
                                case exports.SIGNIN_PROVIDERS.FACEBOOK:
                                    providerObj = new auth.FacebookAuthProvider();
                                    break;
                                case exports.SIGNIN_PROVIDERS.TWITTER:
                                    providerObj = new auth.TwitterAuthProvider();
                                    break;
                                case exports.SIGNIN_PROVIDERS.GITHUB:
                                    providerObj = new auth.GithubAuthProvider();
                                    break;
                                case exports.SIGNIN_PROVIDERS.MICROSOFT:
                                    providerObj = new auth.OAuthProvider("microsoft.com");
                                    break;
                                case exports.SIGNIN_PROVIDERS.YAHOO:
                                    providerObj = new auth.OAuthProvider("yahoo.com");
                                    break;
                                default:
                                    throw new Error("Unrecognized provider: " + provider);
                            }
                        }
                        else {
                            providerObj = provider;
                        }
                        scopes = (options && Array.isArray(options.scopes)) ? options.scopes : [];
                        if (provider instanceof firebase.auth.OAuthProvider) {
                            scopes.forEach(function (scope) { return providerObj.addScope(scope); });
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 8]);
                        return [4 /*yield*/, firebase.auth().signInWithPopup(providerObj)];
                    case 2:
                        userCredential = _a.sent();
                        return [2 /*return*/, userCredential];
                    case 3:
                        e_1 = _a.sent();
                        if (!(e_1.email &&
                            e_1.credential &&
                            e_1.code === "auth/account-exists-with-different-credential")) return [3 /*break*/, 6];
                        supportedPopupSignInMethods_1 = [
                            firebase.auth.GoogleAuthProvider.PROVIDER_ID,
                            firebase.auth.FacebookAuthProvider.PROVIDER_ID,
                            firebase.auth.GithubAuthProvider.PROVIDER_ID,
                        ];
                        getProvider = function (providerId) {
                            switch (providerId) {
                                case firebase.auth.GoogleAuthProvider.PROVIDER_ID:
                                    return new firebase.auth.GoogleAuthProvider();
                                case firebase.auth.FacebookAuthProvider.PROVIDER_ID:
                                    return new firebase.auth.FacebookAuthProvider();
                                case firebase.auth.GithubAuthProvider.PROVIDER_ID:
                                    return new firebase.auth.GithubAuthProvider();
                                default:
                                    throw new Error("No provider implemented for " + providerId);
                            }
                        };
                        return [4 /*yield*/, firebase
                                .auth()
                                .fetchSignInMethodsForEmail(e_1.email)];
                    case 4:
                        providers = _a.sent();
                        firstPopupProviderMethod = providers.find(function (p) {
                            return supportedPopupSignInMethods_1.includes(p);
                        });
                        // Test: Could this happen with email link then trying social provider?
                        if (!firstPopupProviderMethod) {
                            throw new Error("Your account is linked to a provider that isn't supported.");
                        }
                        linkedProvider = getProvider(firstPopupProviderMethod);
                        linkedProvider.setCustomParameters({ login_hint: e_1.email });
                        return [4 /*yield*/, firebase.auth().signInWithPopup(linkedProvider)];
                    case 5:
                        result = _a.sent();
                        result.user && result.user.linkWithCredential(e_1.credential);
                        return [3 /*break*/, 7];
                    case 6:
                        setState({
                            error: e_1,
                            loading: false,
                        });
                        _a.label = 7;
                    case 7: return [2 /*return*/, null];
                    case 8: return [2 /*return*/];
                }
            });
        });
    }
    function signInWithEmailAndPassword(email, password) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                setState({ loading: true });
                return [2 /*return*/, firebase
                        .auth()
                        .signInWithEmailAndPassword(email, password)
                        .catch(function (e) {
                        setState({
                            error: e,
                            loading: false,
                        });
                    })];
            });
        });
    }
    function signOut() {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                setState({ loading: true });
                return [2 /*return*/, firebase.auth().signOut()];
            });
        });
    }
    function createUserWithEmailAndPassword(email, password) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                setState({ loading: true });
                return [2 /*return*/, firebase
                        .auth()
                        .createUserWithEmailAndPassword(email, password)
                        .catch(function (e) {
                        setState({
                            error: e,
                            loading: false,
                        });
                    })];
            });
        });
    }
    function sendPasswordResetEmail(email) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, firebase.auth().sendPasswordResetEmail(email)];
            });
        });
    }
    function verifyPasswordResetCode(code) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, firebase.auth().verifyPasswordResetCode(code)];
            });
        });
    }
    function confirmPasswordReset(code, newPassword) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, firebase.auth().confirmPasswordReset(code, newPassword)];
            });
        });
    }
    function applyActionCode(code) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, firebase.auth().applyActionCode(code)];
            });
        });
    }
    function updateProfile(_a) {
        var displayName = _a.displayName, photoURL = _a.photoURL;
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_b) {
                if (!user) {
                    throw new Error("User is not logged in");
                }
                return [2 /*return*/, user.updateProfile({
                        displayName: displayName,
                        photoURL: photoURL,
                    })];
            });
        });
    }
    function updatePassword(newPassword) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                if (!user) {
                    throw new Error("User is not logged in");
                }
                return [2 /*return*/, user.updatePassword(newPassword)];
            });
        });
    }
    return {
        user: user,
        loading: loading,
        error: error,
        firstCheck: firstCheck,
        signInWithEmailAndPassword: signInWithEmailAndPassword,
        signInWithProvider: signInWithProvider,
        signOut: signOut,
        createUserWithEmailAndPassword: createUserWithEmailAndPassword,
        sendPasswordResetEmail: sendPasswordResetEmail,
        verifyPasswordResetCode: verifyPasswordResetCode,
        confirmPasswordReset: confirmPasswordReset,
        updateProfile: updateProfile,
        updatePassword: updatePassword,
        applyActionCode: applyActionCode,
    };
}

exports.FirebaseAuthProvider = FirebaseAuthProvider;
exports.useFirebaseAuth = useFirebaseAuth;
//# sourceMappingURL=index.js.map
